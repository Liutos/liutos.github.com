<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小打小闹写点bug</title>
  
  <subtitle>乍听之下，不无道理；仔细揣摩，胡说八道</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liutos.github.io/"/>
  <updated>2022-08-21T07:39:48.132Z</updated>
  <id>https://liutos.github.io/</id>
  
  <author>
    <name>Liutos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在CommonLisp中解析命令行参数</title>
    <link href="https://liutos.github.io/2022/08/21/%E5%A6%82%E4%BD%95%E5%9C%A8CommonLisp%E4%B8%AD%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>https://liutos.github.io/2022/08/21/如何在CommonLisp中解析命令行参数/</id>
    <published>2022-08-21T07:27:55.000Z</published>
    <updated>2022-08-21T07:39:48.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="clingon"><a href="#clingon" class="headerlink" title="clingon"></a>clingon</h1><p>clingon 是一个 Common Lisp 的命令行选项的解析器，它可以轻松地解析具有复杂格式的命令行选项。例如，下面的代码可以打印给定次数的打招呼信息</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">#|-*- mode:lisp -*-|#</span><br><span class="line">#|</span><br><span class="line">exec ros -Q -- $0 "$@"</span><br><span class="line">|#</span><br><span class="line">(<span class="name">progn</span> <span class="comment">;;init forms</span></span><br><span class="line">  (<span class="name">ros</span><span class="symbol">:ensure-asdf</span>)</span><br><span class="line">  #+quicklisp(<span class="name">ql</span><span class="symbol">:quickload</span> '(clingon) <span class="symbol">:silent</span> <span class="literal">t</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">(<span class="name">defpackage</span> <span class="symbol">:ros</span>.script.hello.<span class="number">3868869124</span></span><br><span class="line">  (<span class="symbol">:use</span> <span class="symbol">:cl</span></span><br><span class="line">        <span class="symbol">:clingon</span>))</span><br><span class="line">(<span class="name">in-package</span> <span class="symbol">:ros</span>.script.hello.<span class="number">3868869124</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">check-type</span> cmd clingon<span class="symbol">:command</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">count</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:count</span>))</span><br><span class="line">        (<span class="name">name</span> (<span class="name">first</span> (<span class="name">clingon</span><span class="symbol">:command-arguments</span> cmd))))</span><br><span class="line">    (<span class="name">dotimes</span> (<span class="name">_</span> count)</span><br><span class="line">      (<span class="name">declare</span> (<span class="name">ignorable</span> _))</span><br><span class="line">      (<span class="name">format</span> <span class="literal">t</span> <span class="string">"Hello ~A!~%"</span> name))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"hello"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:integer</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"number of greetings"</span></span><br><span class="line">                         <span class="symbol">:initial-value</span> <span class="number">1</span></span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:count</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"count"</span>)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br><span class="line"><span class="comment">;;; vim: set ft=lisp lisp:</span></span><br></pre></td></tr></table></figure><p>稍微做一些解释。首先执行命令<code>ros init hello</code>生成上面的代码的雏形——加载依赖、包定义，以及空的函数<code>main</code>。为了加载 clingon，将其作为函数<code>ql:quickload</code>的参数。然后分别定义一个<code>command</code>、<code>handler</code>，以及<code>option</code>。</p><p>在 clingon 中，类<code>clingon:command</code>的实例对象表示一个可以在 shell 中被触发的命令，它们由函数<code>clingon:make-command</code>创建。每一个命令起码要有三个要素：</p><ol><li><code>:handler</code>，负责使用命令行选项、实现业务逻辑的函数；</li><li><code>:name</code>，命令的名字，一般会被展示在命令的用法说明中；</li><li><code>:options</code>，该命令所接受的选项。</li></ol><p>此处的<code>:handler</code>就是函数<code>top-level/handler</code>，它会被函数<code>clingon:run</code>调用（依赖注入的味道），并将一个合适的<code>clingon:command</code>对象传入。<code>:options</code>目前只承载了一个选项的定义，即</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line"> <span class="symbol">:integer</span></span><br><span class="line"> <span class="symbol">:description</span> <span class="string">"number of greetings"</span></span><br><span class="line"> <span class="symbol">:initial-value</span> <span class="number">1</span></span><br><span class="line"> <span class="symbol">:key</span> <span class="symbol">:count</span></span><br><span class="line"> <span class="symbol">:long-name</span> <span class="string">"count"</span>)</span><br></pre></td></tr></table></figure><p>它定义了一个值为整数的选项，在命令行中通过<code>--count</code>指定。如果没有传入该选项，那么在使用函数<code>clingon:getopt</code>取值时，会获得默认值 1。如果要从一个命令对象中取出这个选项的值，需要以它的<code>:key</code>参数的值作为参数来调用函数<code>clingon:getopt</code>，正如上面的函数<code>top-level/handler</code>所示。</p><h2 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h2><p>clingon 也可以实现诸如<code>git add</code>、<code>git branch</code>这样的子命令特性。像<code>add</code>、<code>branch</code>这样的子命令，对于 clingon 而言仍然是类<code>clingon:command</code>的实例对象，只不过它们不会传递给函数<code>clingon:run</code>调度，而是传递给函数<code>clingon:make-command</code>的参数<code>:sub-command</code>，如下列代码所示</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> cmd)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"cli"</span></span><br><span class="line">              <span class="symbol">:sub-commands</span> (<span class="name">list</span></span><br><span class="line">                             (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">                              <span class="symbol">:handler</span> #'(lambda (cmd)</span><br><span class="line">                                           (declare (ignorable cmd))</span><br><span class="line">                                           (format <span class="literal">t</span> <span class="string">"Dropped the database~%"</span>))</span><br><span class="line">                              <span class="symbol">:name</span> <span class="string">"dropdb"</span>)</span><br><span class="line">                             (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">                              <span class="symbol">:handler</span> #'(lambda (cmd)</span><br><span class="line">                                           (declare (ignorable cmd))</span><br><span class="line">                                           (format <span class="literal">t</span> <span class="string">"Initialized the database~%"</span>))</span><br><span class="line">                              <span class="symbol">:name</span> <span class="string">"initdb"</span>)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure><h2 id="选项与参数"><a href="#选项与参数" class="headerlink" title="选项与参数"></a>选项与参数</h2><p>在 clingon 中通过命令行传递给进程的信息分为选项和参数两种形态，选项是通过名字来引用，而参数则通过它们的下标来引用。例如在第一个例子中，就定义了一个名为<code>--count</code>的选项，它在解析结果中被赋予了<code>:count</code>这个关键字，可以通过函数<code>clingon:getopt</code>来引用它的值；与之相反，变量<code>name</code>是从命令行中解析了选项后、剩余的参数中的<strong>第一个</strong>，它是以位置来标识的。clingon 通过函数<code>clingon:make-option</code>来定义选项，它提供了丰富的控制能力。</p><h2 id="选项名称"><a href="#选项名称" class="headerlink" title="选项名称"></a>选项名称</h2><p>选项有好几种名字，一种叫做<code>:key</code>，是在程序内部使用的名字，用作函数<code>clingon:getopt</code>的参数之一；一种叫做<code>:long-name</code>，一般为多于一个字符的字符串，如<code>&quot;count&quot;</code>，在命令行该名称需要带上两个连字符的前缀来使用，如<code>--count 3</code>；最后一种叫做<code>:short-name</code>，为一个单独的字符，如<code>#\v</code>，在命令行中带上一个连字符前缀来使用，如<code>-v</code>。</p><h2 id="必要性与默认值"><a href="#必要性与默认值" class="headerlink" title="必要性与默认值"></a>必要性与默认值</h2><p>通过传入参数<code>:required t</code>给函数<code>clingon:make-option</code>，可以要求一个选项为必传的。例如下面的命令的选项<code>--n</code>就是必传的</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">dotimes</span> (<span class="name">i</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:n</span>))</span><br><span class="line">    (<span class="name">declare</span> (<span class="name">ignorable</span> i))</span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> <span class="string">"."</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"dots"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:integer</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"打印的英文句号的数量"</span></span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:n</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"n"</span></span><br><span class="line">                         <span class="symbol">:required</span> <span class="literal">t</span>)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure><p>如果不希望在一些最简单的情况下也要繁琐地编写<code>--n 1</code>这样的命令行参数，可以用<code>:initial-value 1</code>来指定。除此之外，也可以让选项默认读取指定的环境变量中的值，使用<code>:env-vars</code>指定环境变量名即可</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"Hello ~A~%"</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:username</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"greet"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:string</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"用户名"</span></span><br><span class="line">                         <span class="symbol">:env-vars</span> '(<span class="string">"GREETER_USERNAME"</span>)</span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:username</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"username"</span>)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure><h2 id="可多次使用的选项"><a href="#可多次使用的选项" class="headerlink" title="可多次使用的选项"></a>可多次使用的选项</h2><p>像<code>curl</code>中的选项<code>-H</code>就是可以多次使用的，每指定一次就可以在请求中添加一个 HTTP 头部，如下图所示</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20220821/curl多次传入-H的效果.jpg" alt="curl多次传入-H的效果"></p><p>在 clingon 中可以通过往函数<code>clingon:make-option</code>传入<code>:list</code>来实现。当用<code>clingon:getopt</code>取出类型为<code>:list</code>的选项的值时，得到的是一个列表，其中依次存放着输入的值的字符串。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">messages</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:message</span>)))</span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~&#123;~A~^~%~&#125;"</span> messages)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"commit"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:list</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"提交的消息"</span></span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:message</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"message"</span></span><br><span class="line">                         <span class="symbol">:short-name</span> #\m)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure><p>另一种情况是尽管没有值，但仍然多次使用同一个选项。例如命令<code>ssh</code>的选项<code>-v</code>，使用的次数越多（最多为 3 次），则<code>ssh</code>打印的调试信息也就越详细。这种类型的选项在 clingon 中称为<code>:counter</code>。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"Verbosity: ~D~%"</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:verbose</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"log"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:counter</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"啰嗦程度"</span></span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:verbose</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"verbose"</span></span><br><span class="line">                         <span class="symbol">:short-name</span> #\v)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure><h2 id="信号选项"><a href="#信号选项" class="headerlink" title="信号选项"></a>信号选项</h2><p>有一些选项只需要区分【有】和【没有】两种情况就可以了，而不需要在意这个选项的值——或者这类选项本身就不允许有值，例如<code>docker run</code>命令的选项<code>-d</code>和<code>--detach</code>。这种选项的类型为<code>:boolean/true</code>，如果指定了这个选项，那么取出来的值始终为<code>t</code>。与之相反，类型<code>:boolean/false</code>取出来的值始终为<code>nil</code>。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">rv</span> (<span class="name">software-type</span>)))</span><br><span class="line">    (<span class="name">when</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:shout</span>)</span><br><span class="line">      (<span class="name">setf</span> rv (<span class="name">concatenate</span> 'string (<span class="name">string-upcase</span> rv) <span class="string">"!!!!111"</span>)))</span><br><span class="line"></span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~A~%"</span> rv)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"info"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:boolean/true</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"大喊"</span></span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:shout</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"shout"</span>)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure><h2 id="选择型选项"><a href="#选择型选项" class="headerlink" title="选择型选项"></a>选择型选项</h2><p>如果一个选项尽管接受的是字符串，但并非所有输入都是有意义的，例如命令<code>dot</code>的选项<code>-T</code>。从<code>dot</code>的 man 文档可以看到，它所支持的图片类型是有限的，如<code>ps</code>、<code>pdf</code>、<code>png</code>等。比起声明一个<code>:string</code>类型的选项，让 clingon 代劳输入值的有效性检查来得更轻松，这里可以使用<code>:choice</code>类型</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> top-level/handler (<span class="name">cmd</span>)</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~A~%"</span> (<span class="name">clingon</span><span class="symbol">:getopt</span> cmd <span class="symbol">:hash-type</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> main (<span class="name">&amp;rest</span> argv)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">app</span> (<span class="name">clingon</span><span class="symbol">:make-command</span></span><br><span class="line">              <span class="symbol">:handler</span> #'top-level/handler</span><br><span class="line">              <span class="symbol">:name</span> <span class="string">"digest"</span></span><br><span class="line">              <span class="symbol">:options</span> (<span class="name">list</span></span><br><span class="line">                        (<span class="name">clingon</span><span class="symbol">:make-option</span></span><br><span class="line">                         <span class="symbol">:choice</span></span><br><span class="line">                         <span class="symbol">:description</span> <span class="string">"哈希类型"</span></span><br><span class="line">                         <span class="symbol">:items</span> '(<span class="string">"MD5"</span> <span class="string">"SHA1"</span>)</span><br><span class="line">                         <span class="symbol">:key</span> <span class="symbol">:hash-type</span></span><br><span class="line">                         <span class="symbol">:long-name</span> <span class="string">"hash-type"</span>)))))</span><br><span class="line">    (<span class="name">clingon</span><span class="symbol">:run</span> app argv)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="命令行" scheme="https://liutos.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="教程" scheme="https://liutos.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>自己动手打印整数</title>
    <link href="https://liutos.github.io/2022/05/02/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%89%93%E5%8D%B0%E6%95%B4%E6%95%B0/"/>
    <id>https://liutos.github.io/2022/05/02/自己动手打印整数/</id>
    <published>2022-05-02T03:14:03.000Z</published>
    <updated>2022-05-02T03:21:16.784Z</updated>
    
    <content type="html"><![CDATA[<p>在 Common Lisp 中，打印整数一般用函数<code>format</code>。例如，上面的代码会往标准输出中打印出233这个数字：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~D"</span> <span class="number">233</span>)</span><br></pre></td></tr></table></figure><p>除此之外，<code>format</code>还可以控制打印内容的宽度、填充字符、是否打印正负号等方面。例如，要控制打印的内容至少占据6列的话，可以用如下代码</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~6D"</span> <span class="number">233</span>)</span><br></pre></td></tr></table></figure><p>如果不使用字符串形式的 DSL，而是以关键字参数的方式来实现一个能够达到同样效果的函数<code>format-decimal</code>，代码可能如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> format-decimal (<span class="name">n</span></span><br><span class="line">                       <span class="symbol">&amp;key</span></span><br><span class="line">                         mincol)</span><br><span class="line">  <span class="string">"打印整数 N 到标准输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MINCOL 如果不为 NIL，则表示所打印的内容至少要占据的列数。"</span></span><br><span class="line">  <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">  (<span class="name">let</span> ((<span class="name">digits</span> '()))</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">zerop</span> n)</span><br><span class="line">           (<span class="name">push</span> <span class="number">0</span> digits))</span><br><span class="line">          (<span class="name">t</span></span><br><span class="line">           (<span class="name">do</span> ((<span class="name">n</span> n (<span class="name">truncate</span> n <span class="number">10</span>)))</span><br><span class="line">               ((<span class="name">zerop</span> n))</span><br><span class="line">             (<span class="name">push</span> (<span class="name">rem</span> n <span class="number">10</span>) digits))))</span><br><span class="line">    <span class="comment">;; 打印出填充用的空格。</span></span><br><span class="line">    (<span class="name">when</span> (<span class="name">and</span> (<span class="name">integerp</span> mincol) (<span class="name">&gt;</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">      (<span class="name">dotimes</span> (<span class="name">i</span> (<span class="name">-</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">        (<span class="name">declare</span> (<span class="name">ignorable</span> i))</span><br><span class="line">        (<span class="name">princ</span> #\Space)))</span><br><span class="line"></span><br><span class="line">    (<span class="name">dolist</span> (<span class="name">digit</span> digits)</span><br><span class="line">      (<span class="name">princ</span> (<span class="name">code-char</span> (<span class="name">+</span> digit (<span class="name">char-code</span> #\<span class="number">0</span>)))))))</span><br><span class="line"></span><br><span class="line">(<span class="name">format-decimal</span> <span class="number">233</span> <span class="symbol">:mincol</span> <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>如果要求用数字0而不是空格来填充左侧的列，用<code>format</code>的写法如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~6,'0D"</span> <span class="number">233</span>)</span><br></pre></td></tr></table></figure><p><code>format-decimal</code>想要做到同样的事情，可以这么写：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> format-decimal (<span class="name">n</span></span><br><span class="line">                       <span class="symbol">&amp;key</span></span><br><span class="line">                         mincol</span><br><span class="line">                         (<span class="name">padchar</span> #\Space))</span><br><span class="line">  <span class="string">"打印整数 N 到标准输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MINCOL 如果不为 NIL，则表示所打印的内容至少要占据的列数。</span></span><br><span class="line"><span class="string">PADCHAR 表达式为了填充多余的列时所用的字符。"</span></span><br><span class="line">  (<span class="name">check-type</span> mincol (<span class="name">or</span> integer null))</span><br><span class="line">  (<span class="name">check-type</span> padchar character)</span><br><span class="line">  <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">  (<span class="name">let</span> ((<span class="name">digits</span> '()))</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">zerop</span> n)</span><br><span class="line">           (<span class="name">push</span> <span class="number">0</span> digits))</span><br><span class="line">          (<span class="name">t</span></span><br><span class="line">           (<span class="name">do</span> ((<span class="name">n</span> n (<span class="name">truncate</span> n <span class="number">10</span>)))</span><br><span class="line">               ((<span class="name">zerop</span> n))</span><br><span class="line">             (<span class="name">push</span> (<span class="name">rem</span> n <span class="number">10</span>) digits))))</span><br><span class="line">    <span class="comment">;; 打印出填充用的空格。</span></span><br><span class="line">    (<span class="name">when</span> (<span class="name">and</span> (<span class="name">integerp</span> mincol) (<span class="name">&gt;</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">      (<span class="name">dotimes</span> (<span class="name">i</span> (<span class="name">-</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">        (<span class="name">declare</span> (<span class="name">ignorable</span> i))</span><br><span class="line">        (<span class="name">princ</span> padchar)))</span><br><span class="line"></span><br><span class="line">    (<span class="name">dolist</span> (<span class="name">digit</span> digits)</span><br><span class="line">      (<span class="name">princ</span> (<span class="name">code-char</span> (<span class="name">+</span> digit (<span class="name">char-code</span> #\<span class="number">0</span>)))))))</span><br><span class="line"></span><br><span class="line">(<span class="name">format-decimal</span> <span class="number">233</span> <span class="symbol">:mincol</span> <span class="number">6</span> <span class="symbol">:padchar</span> #\<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>-D</code>默认是不会打印非负整数的符号的，可以用修饰符<code>@</code>来修改这个行为。例如，<code>(format t &quot;~6,&#39;0@D&quot; 233)</code>会打印出<code>00+233</code>。稍微修改一下就可以在<code>format-decimal</code>中实现同样的功能</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> format-decimal (<span class="name">n</span></span><br><span class="line">                       <span class="symbol">&amp;key</span></span><br><span class="line">                         mincol</span><br><span class="line">                         (<span class="name">padchar</span> #\Space)</span><br><span class="line">                         signed)</span><br><span class="line">  <span class="string">"打印整数 N 到标准输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MINCOL 如果不为 NIL，则表示所打印的内容至少要占据的列数。</span></span><br><span class="line"><span class="string">PADCHAR 表达式为了填充多余的列时所用的字符。"</span></span><br><span class="line">  (<span class="name">check-type</span> mincol (<span class="name">or</span> integer null))</span><br><span class="line">  (<span class="name">check-type</span> padchar character)</span><br><span class="line">  (<span class="name">flet</span> ((<span class="name">to-digits</span> (<span class="name">n</span>)</span><br><span class="line">           <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">           (<span class="name">let</span> ((<span class="name">digits</span> '()))</span><br><span class="line">             (<span class="name">cond</span> ((<span class="name">zerop</span> n)</span><br><span class="line">                    (<span class="name">push</span> #\<span class="number">0</span> digits))</span><br><span class="line">                   (<span class="name">t</span></span><br><span class="line">                    (<span class="name">do</span> ((<span class="name">n</span> n (<span class="name">truncate</span> n <span class="number">10</span>)))</span><br><span class="line">                        ((<span class="name">zerop</span> n))</span><br><span class="line">                      (<span class="name">push</span> (<span class="name">code-char</span> (<span class="name">+</span> (<span class="name">rem</span> n <span class="number">10</span>) (<span class="name">char-code</span> #\<span class="number">0</span>))) digits))))</span><br><span class="line">             digits)))</span><br><span class="line">    <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">    (<span class="name">let</span> ((<span class="name">digits</span> (<span class="name">to-digits</span> (<span class="name">abs</span> n))))</span><br><span class="line">      (<span class="name">when</span> (<span class="name">or</span> signed (<span class="name">&lt;</span> n <span class="number">0</span>))</span><br><span class="line">        (<span class="name">push</span> (<span class="name">if</span> (<span class="name">&lt;</span> n <span class="number">0</span>) #\- #\+) digits))</span><br><span class="line">      <span class="comment">;; 打印出填充用的空格。</span></span><br><span class="line">      (<span class="name">when</span> (<span class="name">and</span> (<span class="name">integerp</span> mincol) (<span class="name">&gt;</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">        (<span class="name">dotimes</span> (<span class="name">i</span> (<span class="name">-</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">          (<span class="name">declare</span> (<span class="name">ignorable</span> i))</span><br><span class="line">          (<span class="name">princ</span> padchar)))</span><br><span class="line"></span><br><span class="line">      (<span class="name">dolist</span> (<span class="name">digit</span> digits)</span><br><span class="line">        (<span class="name">princ</span> digit)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">format-decimal</span> <span class="number">233</span> <span class="symbol">:mincol</span> <span class="number">6</span> <span class="symbol">:padchar</span> #\<span class="number">0</span> <span class="symbol">:signed</span> <span class="literal">t</span>)</span><br></pre></td></tr></table></figure><p>除了<code>@</code>之外，<code>:</code>也是一个<code>~D</code>的修饰符，它可以让<code>format</code>每隔3个数字就打印出一个逗号，方便阅读比较长的数字。例如，下列代码会打印出<code>00+23,333</code>：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~9,'0@:D"</span> <span class="number">23333</span>)</span><br></pre></td></tr></table></figure><p>为此，给<code>format-decimal</code>新增一个关键字参数<code>comma-separated</code>来控制这一行为。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> format-decimal (<span class="name">n</span></span><br><span class="line">                       <span class="symbol">&amp;key</span></span><br><span class="line">                         comma-separated</span><br><span class="line">                         mincol</span><br><span class="line">                         (<span class="name">padchar</span> #\Space)</span><br><span class="line">                         signed)</span><br><span class="line">  <span class="string">"打印整数 N 到标准输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">COMMA-SEPARATED 如果为 T，则每打印3个字符就打印一个逗号。</span></span><br><span class="line"><span class="string">MINCOL 如果不为 NIL，则表示所打印的内容至少要占据的列数。</span></span><br><span class="line"><span class="string">PADCHAR 表示填充多余的列时所用的字符。</span></span><br><span class="line"><span class="string">SIGNED 控制是否显示非负整数的加号。"</span></span><br><span class="line">  (<span class="name">check-type</span> comma-separated boolean)</span><br><span class="line">  (<span class="name">check-type</span> mincol (<span class="name">or</span> integer null))</span><br><span class="line">  (<span class="name">check-type</span> padchar character)</span><br><span class="line">  (<span class="name">check-type</span> signed boolean)</span><br><span class="line">  (<span class="name">flet</span> ((<span class="name">to-digits</span> (<span class="name">n</span>)</span><br><span class="line">           <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">           (<span class="name">let</span> ((<span class="name">digits</span> '()))</span><br><span class="line">             (<span class="name">cond</span> ((<span class="name">zerop</span> n)</span><br><span class="line">                    (<span class="name">push</span> #\<span class="number">0</span> digits))</span><br><span class="line">                   (<span class="name">t</span></span><br><span class="line">                    (<span class="name">do</span> ((<span class="name">count</span> <span class="number">0</span> (<span class="number">1</span>+ count))</span><br><span class="line">                         (<span class="name">n</span> n (<span class="name">truncate</span> n <span class="number">10</span>)))</span><br><span class="line">                        ((<span class="name">zerop</span> n))</span><br><span class="line">                      (<span class="name">when</span> (<span class="name">and</span> comma-separated (<span class="name">&gt;</span> count <span class="number">0</span>) (<span class="name">zerop</span> (<span class="name">rem</span> count <span class="number">3</span>)))</span><br><span class="line">                        (<span class="name">push</span> #\, digits))</span><br><span class="line">                      (<span class="name">push</span> (<span class="name">code-char</span> (<span class="name">+</span> (<span class="name">rem</span> n <span class="number">10</span>) (<span class="name">char-code</span> #\<span class="number">0</span>))) digits))))</span><br><span class="line">             digits)))</span><br><span class="line">    <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">    (<span class="name">let</span> ((<span class="name">digits</span> (<span class="name">to-digits</span> (<span class="name">abs</span> n))))</span><br><span class="line">      (<span class="name">when</span> (<span class="name">or</span> signed (<span class="name">&lt;</span> n <span class="number">0</span>))</span><br><span class="line">        (<span class="name">push</span> (<span class="name">if</span> (<span class="name">&lt;</span> n <span class="number">0</span>) #\- #\+) digits))</span><br><span class="line">      <span class="comment">;; 打印出填充用的空格。</span></span><br><span class="line">      (<span class="name">when</span> (<span class="name">and</span> (<span class="name">integerp</span> mincol) (<span class="name">&gt;</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">        (<span class="name">dotimes</span> (<span class="name">i</span> (<span class="name">-</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">          (<span class="name">declare</span> (<span class="name">ignorable</span> i))</span><br><span class="line">          (<span class="name">princ</span> padchar)))</span><br><span class="line"></span><br><span class="line">      (<span class="name">dolist</span> (<span class="name">digit</span> digits)</span><br><span class="line">        (<span class="name">princ</span> digit)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">format-decimal</span> <span class="number">-23333</span> <span class="symbol">:comma-separated</span> <span class="literal">t</span> <span class="symbol">:mincol</span> <span class="number">9</span> <span class="symbol">:padchar</span> #\<span class="number">0</span> <span class="symbol">:signed</span> <span class="literal">t</span>)</span><br></pre></td></tr></table></figure><p>事实上，打印分隔符的步长，以及作为分隔符的逗号都是可以定制的。例如，可以改为每隔4个数字打印一个连字符</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~9,'0,'-,4@:D"</span> <span class="number">23333</span>)</span><br></pre></td></tr></table></figure><p>对于<code>format-decimal</code>来说这个修改现在很简单了</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> format-decimal (<span class="name">n</span></span><br><span class="line">                       <span class="symbol">&amp;key</span></span><br><span class="line">                         (<span class="name">commachar</span> #\,)</span><br><span class="line">                         (<span class="name">comma-interval</span> <span class="number">3</span>)</span><br><span class="line">                         comma-separated</span><br><span class="line">                         mincol</span><br><span class="line">                         (<span class="name">padchar</span> #\Space)</span><br><span class="line">                         signed)</span><br><span class="line">  <span class="string">"打印整数 N 到标准输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">COMMACHAR 表示当需要打印分隔符时的分隔符。</span></span><br><span class="line"><span class="string">COMMA-INTERVAL 表示当需要打印分隔符时需要间隔的步长。</span></span><br><span class="line"><span class="string">COMMA-SEPARATED 如果为 T，则每打印3个字符就打印一个逗号。</span></span><br><span class="line"><span class="string">MINCOL 如果不为 NIL，则表示所打印的内容至少要占据的列数。</span></span><br><span class="line"><span class="string">PADCHAR 表示填充多余的列时所用的字符。</span></span><br><span class="line"><span class="string">SIGNED 控制是否显示非负整数的加号。"</span></span><br><span class="line">  (<span class="name">check-type</span> commachar character)</span><br><span class="line">  (<span class="name">check-type</span> comma-interval integer)</span><br><span class="line">  (<span class="name">check-type</span> comma-separated boolean)</span><br><span class="line">  (<span class="name">check-type</span> mincol (<span class="name">or</span> integer null))</span><br><span class="line">  (<span class="name">check-type</span> padchar character)</span><br><span class="line">  (<span class="name">check-type</span> signed boolean)</span><br><span class="line">  (<span class="name">flet</span> ((<span class="name">to-digits</span> (<span class="name">n</span>)</span><br><span class="line">           <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">           (<span class="name">let</span> ((<span class="name">digits</span> '()))</span><br><span class="line">             (<span class="name">cond</span> ((<span class="name">zerop</span> n)</span><br><span class="line">                    (<span class="name">push</span> #\<span class="number">0</span> digits))</span><br><span class="line">                   (<span class="name">t</span></span><br><span class="line">                    (<span class="name">do</span> ((<span class="name">count</span> <span class="number">0</span> (<span class="number">1</span>+ count))</span><br><span class="line">                         (<span class="name">n</span> n (<span class="name">truncate</span> n <span class="number">10</span>)))</span><br><span class="line">                        ((<span class="name">zerop</span> n))</span><br><span class="line">                      (<span class="name">when</span> (<span class="name">and</span> comma-separated (<span class="name">&gt;</span> count <span class="number">0</span>) (<span class="name">zerop</span> (<span class="name">rem</span> count comma-interval)))</span><br><span class="line">                        (<span class="name">push</span> commachar digits))</span><br><span class="line">                      (<span class="name">push</span> (<span class="name">code-char</span> (<span class="name">+</span> (<span class="name">rem</span> n <span class="number">10</span>) (<span class="name">char-code</span> #\<span class="number">0</span>))) digits))))</span><br><span class="line">             digits)))</span><br><span class="line">    <span class="comment">;; 通过取余的方式得到 N 的每一位并逐个入栈，之后出栈的顺序就是从左到右打印的顺序了。</span></span><br><span class="line">    (<span class="name">let</span> ((<span class="name">digits</span> (<span class="name">to-digits</span> (<span class="name">abs</span> n))))</span><br><span class="line">      (<span class="name">when</span> (<span class="name">or</span> signed (<span class="name">&lt;</span> n <span class="number">0</span>))</span><br><span class="line">        (<span class="name">push</span> (<span class="name">if</span> (<span class="name">&lt;</span> n <span class="number">0</span>) #\- #\+) digits))</span><br><span class="line">      <span class="comment">;; 打印出填充用的空格。</span></span><br><span class="line">      (<span class="name">when</span> (<span class="name">and</span> (<span class="name">integerp</span> mincol) (<span class="name">&gt;</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">        (<span class="name">dotimes</span> (<span class="name">i</span> (<span class="name">-</span> mincol (<span class="name">length</span> digits)))</span><br><span class="line">          (<span class="name">declare</span> (<span class="name">ignorable</span> i))</span><br><span class="line">          (<span class="name">princ</span> padchar)))</span><br><span class="line"></span><br><span class="line">      (<span class="name">dolist</span> (<span class="name">digit</span> digits)</span><br><span class="line">        (<span class="name">princ</span> digit)))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name">format-decimal</span> <span class="number">-23333</span> <span class="symbol">:commachar</span> #\- <span class="symbol">:comma-interval</span> <span class="number">4</span> <span class="symbol">:comma-separated</span> <span class="literal">t</span> <span class="symbol">:mincol</span> <span class="number">9</span> <span class="symbol">:padchar</span> #\<span class="number">0</span> <span class="symbol">:signed</span> <span class="literal">t</span>)</span><br></pre></td></tr></table></figure><p>全文完。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="format" scheme="https://liutos.github.io/tags/format/"/>
    
  </entry>
  
  <entry>
    <title>为什么管Java叫单派发以及什么是多派发</title>
    <link href="https://liutos.github.io/2021/10/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%AE%A1Java%E5%8F%AB%E5%8D%95%E6%B4%BE%E5%8F%91%E4%BB%A5%E5%8F%8A%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%B4%BE%E5%8F%91/"/>
    <id>https://liutos.github.io/2021/10/15/为什么管Java叫单派发以及什么是多派发/</id>
    <published>2021-10-15T15:43:05.000Z</published>
    <updated>2021-10-15T15:43:05.190Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在 Java 语言中支持基于子类型的多态，例如某百科全书中就给了一个基于<code>Animal</code>及其两个子类的例子（代码经过我微微调整）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> String <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Meow!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Woof!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">letsHear</span><span class="params">(<span class="keyword">final</span> Animal a)</span> </span>&#123;</span><br><span class="line">    System.out.println(a.talk());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    letsHear(<span class="keyword">new</span> Cat());</span><br><span class="line">    letsHear(<span class="keyword">new</span> Dog());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于子类型的多态要求在程序的运行期根据参数的类型，选择不同的具体方法——例如在上述例子中，当方法<code>letsHear</code>中调用了参数<code>a</code>的方法<code>talk</code>时，是依照变量<code>a</code>在运行期的类型（第一次为<code>Cat</code>，第二次为<code>Dog</code>）来选择对应的<code>talk</code>方法的实例的，而不是依照编译期的类型<code>Animal</code>。</p><p>但在不同的语言中，在运行期查找方法时，所选择的参数的个数是不同的。对于 Java 而言，它只取方法的第一个参数（即接收者），这个策略被称为 single dispatch。</p><h1 id="Java-的-single-dispatch"><a href="#Java-的-single-dispatch" class="headerlink" title="Java 的 single dispatch"></a>Java 的 single dispatch</h1><p>要演示为什么 Java 是 single dispatch 的，必须让示例代码中的方法接收两个参数（除了方法的接收者之外再来一个参数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 演示 Java 是 single dispatch 的。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractResizer</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Circle c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Shape s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Triangle t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resizer</span> <span class="keyword">extends</span> <span class="title">AbstractResizer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Circle c)</span> </span>&#123; System.out.println(<span class="string">"缩放圆形"</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle r)</span> </span>&#123; System.out.println(<span class="string">"缩放矩形"</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Shape s)</span> </span>&#123; System.out.println(<span class="string">"缩放任意图形"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Triangle t)</span> </span>&#123; System.out.println(<span class="string">"缩放三角形"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trial1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AbstractResizer resizer = <span class="keyword">new</span> Resizer();</span><br><span class="line">Shape[] shapes = &#123;<span class="keyword">new</span> Circle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Triangle()&#125;;</span><br><span class="line"><span class="keyword">for</span> (Shape shape : shapes)</span><br><span class="line">&#123;</span><br><span class="line">resizer.resize(shape);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，类<code>Resizer</code>的实例方法<code>resize</code>就是接收两个参数的——第一个为<code>Resizer</code>类的实例对象，第二个则可能是<code>Shape</code>及其三个子类中的一种类的实例对象。假如 Java 的多态策略是 multiple dispatch 的，那么应当分别调用不同的三个版本的<code>resize</code>方法，但实际上并不是</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211015/Java是singledispatch的证据.jpg" alt=""></p><p>通过 JDK 中提供的程序<code>javap</code>可以看到在<code>main</code>方法中调用<code>resize</code>方法时究竟用的是类<code>Resizer</code>中的哪一个版本，运行命令<code>javap -c -l -s -v Trial1</code>，可以看到调用<code>resize</code>方法对应的 JVM 字节码为<code>invokevirtual</code></p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211015/invokevirtual命令.jpg" alt=""></p><p>翻阅 JVM 规格文档可以找到对<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokevirtual" target="_blank" rel="noopener">invokevirtual 指令的解释</a></p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211015/invokevirtual的查找逻辑.jpg" alt=""></p><p>显然，由于在 JVM 的字节码中，<code>invokevirtual</code>所调用的方法的参数类型已经解析完毕——<code>LShape</code>表示是一个叫做<code>Shape</code>的类，因此在方法接收者，即类<code>Resizer</code>中查找的时候，也只会命中<code>resize(Shape s)</code>这个版本的方法。变量<code>s</code>的运行期类型在查找方法的时候，丝毫没有派上用场，因此 Java 的多态是 single dispatch 的。</p><p>想要依据参数的运行期类型来打印不同内容也不难，简单粗暴的办法可以选择<code>instanceOf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractResizer</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Shape s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resizer</span> <span class="keyword">extends</span> <span class="title">AbstractResizer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Shape s)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">      System.out.println(<span class="string">"缩放圆形"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">      System.out.println(<span class="string">"缩放矩形"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Triangle) &#123;</span><br><span class="line">      System.out.println(<span class="string">"缩放三角形"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"缩放任意图形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者动用 Visitor 模式。</p><h1 id="什么是-multiple-dispatch？"><a href="#什么是-multiple-dispatch？" class="headerlink" title="什么是 multiple dispatch？"></a>什么是 multiple dispatch？</h1><p>我第一次知道 multiple dispatch 这个词语，其实就是在偶然间查找 CLOS 的相关资料时看到的。在 Common Lisp 中，定义类和方法的语法与常见的语言画风不太一样。例如，下列代码跟 Java 一样定义了四个类</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defclass</span> shape ()</span><br><span class="line">  ())</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> circle (<span class="name">shape</span>)</span><br><span class="line">  ())</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> rectangle (<span class="name">shape</span>)</span><br><span class="line">  ())</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> triangle (<span class="name">shape</span>)</span><br><span class="line">  ())</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> abstract-resizer ()</span><br><span class="line">  ())</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> resizer (<span class="name">abstract-resizer</span>)</span><br><span class="line">  ())</span><br><span class="line"></span><br><span class="line">(<span class="name">defgeneric</span> resize (<span class="name">resizer</span> shape))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> resize ((<span class="name">resizer</span> resizer) (<span class="name">shape</span> circle))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"缩放圆形~%"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> resize ((<span class="name">resizer</span> resizer) (<span class="name">shape</span> rectangle))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"缩放矩形~%"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> resize ((<span class="name">resizer</span> resizer) (<span class="name">shape</span> shape))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"缩放任意图形~%"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> resize ((<span class="name">resizer</span> resizer) (<span class="name">shape</span> triangle))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"缩放三角形~%"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">let</span> ((<span class="name">resizer</span> (<span class="name">make-instance</span> 'resizer))</span><br><span class="line">      (<span class="name">shapes</span> (<span class="name">list</span></span><br><span class="line">               (<span class="name">make-instance</span> 'circle)</span><br><span class="line">               (<span class="name">make-instance</span> 'rectangle)</span><br><span class="line">               (<span class="name">make-instance</span> 'triangle))))</span><br><span class="line">  (<span class="name">dolist</span> (<span class="name">shape</span> shapes)</span><br><span class="line">    (<span class="name">resize</span> resizer shape)))</span><br></pre></td></tr></table></figure><p>执行上述代码会调用不同版本的<code>resize</code>方法来打印内容</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211015/multipledispatch的例子.jpg" alt=""></p><p>由于<code>defmethod</code>支持给每一个参数都声明对应的类这一做法是在太符合直觉了，以至于我丝毫没有意识到它有一个专门的名字叫做 multiple dispatch，并且在大多数语言中是不支持的。</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211015/CL就是厉害.png" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>聪明的你应该已经发现了，在上面的 Common Lisp 代码中，其实与 Java 中的抽象类<code>AbstractResizer</code>对应的类<code>abstract-resizer</code>是完全没有必要的，<code>defgeneric</code>本身就是一种用来定义抽象<em>接口</em>的手段。</p><p>此外，在第三个版本的<code>resize</code>方法中，可以看到标识符<code>shape</code>同时作为了参数的名字和该参数所属的类的名字——没错，在 Common Lisp 中，一个符号不仅仅可以同时代表一个变量和一个函数，同时还可以兼任一个类型，它不仅仅是一门通常所说的 Lisp-2 的语言。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>直观地了解自己每天在吃上面的开销</title>
    <link href="https://liutos.github.io/2021/10/06/%E7%9B%B4%E8%A7%82%E5%9C%B0%E4%BA%86%E8%A7%A3%E8%87%AA%E5%B7%B1%E6%AF%8F%E5%A4%A9%E5%9C%A8%E5%90%83%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%BC%80%E9%94%80/"/>
    <id>https://liutos.github.io/2021/10/06/直观地了解自己每天在吃上面的开销/</id>
    <published>2021-10-06T14:45:06.000Z</published>
    <updated>2021-10-06T14:45:06.670Z</updated>
    
    <content type="html"><![CDATA[<p><del>众所周知，</del>我用<code>Emacs</code>的<code>ledger-mode</code>来记账（参见以前的文章<a href="https://liutos.github.io/2020/03/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%AE%B0%E8%B4%A6%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94ledger%E4%B8%8Eledger-mode/">《程序员的记账工具——ledger与ledger-mode》</a>）。作为一个出色的命令行报表工具，<code>ledger</code>的命令<code>balance</code>和<code>register</code>足以涵盖大部分的使用场景：</p><ul><li><code>balance</code>可以生成所有帐号的余额的报表，用于每天与各个账户中的真实余额进行比较；</li><li><code>register</code>可以生成给定帐号的交易明细，用于在余额不一致时与真实账户的流水一条条核对；</li></ul><p>美中不足的是，<code>ledger</code>的报表不够直观，因为它们是冷冰冰的文字信息，而不是振奋人心的统计图形。好在，正如<code>ledger</code>不存储数据，而只是一份份<code>.ledger</code>文件中的交易记录的搬运工一样，<code>gnuplot</code>也是这样的工具——它不存储数据，它只负责将存储在文本文件的数据以图形的形态呈现出来。</p><h1 id="如何运用gnuplot"><a href="#如何运用gnuplot" class="headerlink" title="如何运用gnuplot"></a>如何运用<code>gnuplot</code></h1><p><code>gnuplot</code>是很容易使用的。以最简单的情况为例，首先将如下内容保存到文件<code>/tmp/data.csv</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1 -1</span><br><span class="line">0 0</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><p>然后在命令行中启动<code>gnuplot</code>，进入它的 REPL 中，并执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot &quot;/tmp/data.csv&quot;</span><br></pre></td></tr></table></figure><p>即可得到这三组数据的展示</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211006/gnuplot绘图效果初识.jpg" alt=""></p><p>三组数据分别是坐标为<code>(-1, -1)</code>、<code>(0, 0)</code>，以及<code>(1, 1)</code>的点。</p><p>因此要让<code>gnuplot</code>绘制开销的图形，首先就是从账本中提取出要绘制的数据，再决定如何用<code>gnuplot</code>绘制即可。</p><h2 id="用ledger提取开销记录"><a href="#用ledger提取开销记录" class="headerlink" title="用ledger提取开销记录"></a>用<code>ledger</code>提取开销记录</h2><p>尽管<code>ledger</code>的子命令<code>register</code>可以打印出给定帐号的交易明细，但此处更适合使用<code>csv</code>子命令。例如，下列的命令可以将最早的10条、吃的方面的支出记录，都以 CSV 格式打印出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  Accounting ledger --anon --head 10 -f 2021.ledger csv 'Expense:Food'</span><br><span class="line">"2019/09/10","","32034acc","efe2a5b9:c720f278:58a3cd91:0dc07b7b","A","20","",""</span><br><span class="line">"2019/09/11","","a61b6164","5d45e249:fe84ca06:778d1855:daf61ede","A","5","",""</span><br><span class="line">"2019/09/11","","674ec19f","5d018df1:ebf020db:29d43aba:d0c84127","A","15","",""</span><br><span class="line">"2019/09/11","","e55ff018","370ca545:7d3aa2d0:86f5f330:1379261b","A","20","",""</span><br><span class="line">"2019/09/12","","f6aa675c","08315491:4c8f1ee7:5eeaddf3:f879914e","A","10.5","",""</span><br><span class="line">"2019/09/12","","139b790f","a137e4ee:9bc8ee49:7d7ccd8b:472d6007","A","23.9","",""</span><br><span class="line">"2019/09/12","","b24b716d","de348971:5364622c:b2144d94:01e74ff3","A","148","",""</span><br><span class="line">"2019/09/13","","e7c066fa","b418a3b2:a3e21e87:a32ee8ac:8716a847","A","3","",""</span><br><span class="line">"2019/09/13","","9eb044fe","702a13e9:3de7f1bd:9b20a278:1d20668d","A","24","",""</span><br><span class="line">"2019/09/13","","ba301270","d2b7eeb3:381f9473:54f86a33:391a8662","A","36","",""</span><br></pre></td></tr></table></figure><p><code>--anon</code>选项可以将交易明细中的敏感信息（如收款方、帐号）等匿名处理。</p><p>尽管<code>ledger</code>打印出的内容有很多列，但只有第一列的日期，以及第六列的金额是我所需要的。同时，由于一天中可能会有多次吃的方面的开销，因此同一天的交易也会有多笔，在绘图之前，需要将同一天之中的开销累加起来，只留下一个数字。这两个需求，都可以用<code>csvsql</code>来满足。</p><h2 id="用csvsql聚合数据"><a href="#用csvsql聚合数据" class="headerlink" title="用csvsql聚合数据"></a>用<code>csvsql</code>聚合数据</h2><p>以前文中的10条记录为例，用如下的命令可以将它们按天聚合在一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ledger --anon --head 10 -f 2021.ledger csv 'Expense:Food' | csvsql -H --query 'SELECT `a`, SUM(`f`) FROM `expense` GROUP BY `a` ORDER BY `a` ASC' --tables 'expense'</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>选项<code>-H</code>让<code>csvsql</code>知道从管道中输入的数据没有标题行。后续处理时，<code>csvsql</code>会默认使用<code>a</code>、<code>b</code>、<code>c</code>等作为列名；</li><li>选项<code>--query</code>用于提交要执行的 SQL 语句；</li><li>选项<code>--tables</code>用于指定表的名字，这样在<code>--query</code>中才能用 SQL 对其进行处理；</li></ul><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  Accounting ledger --anon --head 10 -f 2021.ledger csv 'Expense:Food' | csvsql -H --query 'SELECT `a`, SUM(`f`) FROM `expense` GROUP BY `a` ORDER BY `a` ASC' --tables 'expense'</span><br><span class="line">a,SUM(`f`)</span><br><span class="line">2019-09-10,20</span><br><span class="line">2019-09-11,40</span><br><span class="line">2019-09-12,182.4</span><br><span class="line">2019-09-13,63</span><br></pre></td></tr></table></figure><h2 id="用gnuplot读取数据并绘图"><a href="#用gnuplot读取数据并绘图" class="headerlink" title="用gnuplot读取数据并绘图"></a>用<code>gnuplot</code>读取数据并绘图</h2><p>用重定向将<code>csvsql</code>的输出结果保存到文件<code>/tmp/data.csv</code>中，然后就可以用<code>gnuplot</code>将它们画出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  Accounting ledger --anon --head 10 -f 2021.ledger csv 'Expense:Food' | csvsql -H --query 'SELECT `a`, SUM(`f`) FROM `expense` GROUP BY `a` ORDER BY `a` ASC' --tables 'expense' | tail -n '+2' &gt; /tmp/data.csv</span><br><span class="line">➜  Accounting cat /tmp/plot_expense.gplot</span><br><span class="line">set format x '%y-%m-%d'</span><br><span class="line">set style data boxes</span><br><span class="line">set terminal png font '/System/Library/Fonts/Hiragino Sans GB.ttc'</span><br><span class="line">set title '吃的开销'</span><br><span class="line">set output '/tmp/xyz.png'</span><br><span class="line">set timefmt '%Y-%m-%d'</span><br><span class="line">set xdata time</span><br><span class="line">set xlabel '日期'</span><br><span class="line">set xrange ['2019-09-10':'2019-09-13']</span><br><span class="line">set ylabel '金额(¥)'</span><br><span class="line">set yrange [0:200]</span><br><span class="line">set datafile separator comma</span><br><span class="line">plot '/tmp/data.csv' using 1:2</span><br><span class="line">➜  Accounting gnuplot /tmp/plot_expense.gplot</span><br></pre></td></tr></table></figure><p>生成的图片文件<code>/tmp/xyz.png</code>如下</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211006/xyz_bak.png" alt=""></p><p>在脚本文件<code>/tmp/plot_expense.gplot</code>中用到的命令都可以通过<code>gnuplot</code>的<a href="http://www.gnuplot.info/docs_5.4/Gnuplot_5_4.pdf" target="_blank" rel="noopener">在线手册</a>查阅到：</p><ul><li><code>set format</code>命令用于设置坐标轴的刻度的格式。<code>set format x &quot;%y-%m-%d&quot;</code>意味着设置 X 轴的刻度为形如<code>19-09-10</code>的格式；</li><li><code>set style data</code>命令设置数据的绘制风格。<code>set style data box</code>表示采用空心柱状图；</li><li><code>set terminal</code>命令用于告诉<code>gnuplot</code>该生成什么样的输出。<code>set terminal png font &#39;/System/Library/Fonts/Hiragino Sans GB.ttc&#39;</code>表示输出结果为 PNG 格式的图片，并且采用给定的字体；</li><li><code>set title</code>命令控制输出结果顶部中间位置的标题文案；</li><li><code>set output</code>命令用于将原本输出到屏幕上的内容重定向到文件中；</li><li><code>set timefmt</code>命令用于指定输入的日期时间数据的格式。<code>set timefmt &#39;%Y-%m-%d&#39;</code>意味着输入的日期时间数据的为形如<code>2019-09-10</code>的格式；</li><li><code>set xdata</code>命令控制<code>gnuplot</code>如何理解属于 X 轴的数据。<code>set xdata time</code>表示 X 轴上的均为时间型数据；</li><li><code>set xlabel</code>命令控制 X 轴的含义的文案。<code>set ylabel</code>与其类似，只是作用在 Y 轴上；</li><li><code>set xrange</code>命令控制<code>gnuplot</code>所绘制的图形中 X 轴上的展示范围；</li><li><code>set datafile separator</code>命令控制<code>gnuplot</code>读取数据文件时各列间的分隔符，<code>comma</code>表示分隔符为逗号。</li></ul><h2 id="想要按周统计怎么办"><a href="#想要按周统计怎么办" class="headerlink" title="想要按周统计怎么办"></a>想要按周统计怎么办</h2><p>假设我要查看的是2021年每一周在吃的方面的总开支，那么需要在<code>csvsql</code>中将数据按所处的是第几周进行聚合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  Accounting ledger -b '2021-01-01' -f 2021.ledger csv 'Expense:Food' | csvsql -H --query 'SELECT strftime("%W", `a`) AS `week`, SUM(`f`) FROM `expense` GROUP BY `week` ORDER BY `a` ASC' --tables 'expense' | tail -n '+2' &gt; /tmp/expense_dow.csv</span><br><span class="line">➜  Accounting head /tmp/expense_dow.csv</span><br><span class="line">00,633.6</span><br><span class="line">01,437.3</span><br><span class="line">02,337.5</span><br><span class="line">03,428.4</span><br><span class="line">04,191.5</span><br><span class="line">05,330.4</span><br><span class="line">06,154.6</span><br><span class="line">07,621.4</span><br><span class="line">08,485.6</span><br><span class="line">09,375.73</span><br></pre></td></tr></table></figure><p>同时也需要调整<code>gnuplot</code>的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set terminal png font &apos;/System/Library/Fonts/Hiragino Sans GB.ttc&apos;</span><br><span class="line">set title &apos;吃的开销&apos;</span><br><span class="line">set output &apos;/tmp/xyz2.png&apos;</span><br><span class="line">set xlabel &apos;第几周&apos;</span><br><span class="line">set xrange [0:54]</span><br><span class="line">set ylabel &apos;金额(¥)&apos;</span><br><span class="line">set yrange [0:1000]</span><br><span class="line">set datafile separator comma</span><br><span class="line">plot &apos;/tmp/expense_dow.csv&apos; using 1:2 with lines</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211006/xyz2.png" alt=""></p><h2 id="想要同时查看两年的图形怎么办"><a href="#想要同时查看两年的图形怎么办" class="headerlink" title="想要同时查看两年的图形怎么办"></a>想要同时查看两年的图形怎么办</h2><p><code>gnuplot</code>支持同时绘制多条曲线，只要使用数据文件中不同的列作为纵坐标即可。假设我要对比的是2020年和2021年，那么先分别统计两年的开支到不同的文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Accounting ledger -b '2020-01-01' -e '2021-01-01' -f 2021.ledger csv 'Expense:Food' | csvsql -H --query 'SELECT strftime("%W", `a`) AS `week`, SUM(`f`) FROM `expense` GROUP BY `week` ORDER BY `a` ASC' --tables 'expense' | tail -n '+2' &gt; /tmp/expense_2020.csv</span><br><span class="line">➜  Accounting ledger -b '2021-01-01' -f 2021.ledger csv 'Expense:Food' | csvsql -H --query 'SELECT strftime("%W", `a`) AS `week`, SUM(`f`) FROM `expense` GROUP BY `week` ORDER BY `a` ASC' --tables 'expense' | tail -n '+2' &gt; /tmp/expense_2021.csv</span><br></pre></td></tr></table></figure><p>再将处于同一周的数据合并在一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  Accounting csvjoin -H -c a /tmp/expense_2020.csv /tmp/expense_2021.csv | tail -n '+2' &gt; /tmp/expense_2years.csv</span><br></pre></td></tr></table></figure><p>最后，再让<code>gnuplot</code>一次性绘制两条折线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set terminal png font &apos;/System/Library/Fonts/Hiragino Sans GB.ttc&apos;</span><br><span class="line">set title &apos;吃的开销&apos;</span><br><span class="line">set output &apos;/tmp/xyz2years.png&apos;</span><br><span class="line">set xlabel &apos;第几周&apos;</span><br><span class="line">set xrange [0:54]</span><br><span class="line">set ylabel &apos;金额(¥)&apos;</span><br><span class="line">set yrange [0:1000]</span><br><span class="line">set datafile separator comma</span><br><span class="line">plot &apos;/tmp/expense_2years.csv&apos; using 1:2 with lines title &quot;2020&quot;, &apos;/tmp/expense_2years.csv&apos; using 1:3 with lines title &quot;2021&quot;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20211006/xyz2years.png" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实仍然是非常不直观的，因为最终生成的是一张静态的图片，并不能做到将鼠标挪到曲线上时就给出所在位置的纵坐标的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git-log很好，你也可以写一个</title>
    <link href="https://liutos.github.io/2021/09/04/git-log%E5%BE%88%E5%A5%BD%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%86%99%E4%B8%80%E4%B8%AA/"/>
    <id>https://liutos.github.io/2021/09/04/git-log很好，你也可以写一个/</id>
    <published>2021-09-04T09:29:17.000Z</published>
    <updated>2021-09-04T09:29:17.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>作为一个天天都在用的工具，各位同行想必都非常熟悉 Git 的基本用法，例如：</p><ul><li>用<code>git-blame</code>找出某一行 bug 是哪一位同事引入的，由他背锅；</li><li>用<code>git-merge</code>把别人的代码合进自己完美无瑕的分支中，然后发现单元测试无法跑通；</li><li>用<code>git-push -f</code>把团队里其他人的提交通通覆盖掉。</li></ul><p>除此之外，Git 其实还是一个带版本功能的键值数据库：</p><ul><li>所有提交的内容都存储在目录<code>.git/objects/</code>下；</li><li>有存储文件内容的<code>blob</code>对象、存储文件元数据的<code>tree</code>对象，还有存储提交记录的<code>commit</code>对象等；</li><li>Git 提供了键值风格的读写命令<code>git-cat-file</code>和<code>git-hash-object</code>。</li></ul><p>读过我以前的文章<a href="https://liutos.github.io/2019/12/21/%E5%BD%93%E6%88%91%E4%BB%ACgit-merge%E7%9A%84%E6%97%B6%E5%80%99%E5%88%B0%E5%BA%95%E5%9C%A8merge%E4%BB%80%E4%B9%88/">《当我们git merge的时候到底在merge什么》</a>的朋友们应该都知道，如果一次合并不是<code>fast-forward</code>的，那么会产生一个新的<code>commit</code>类型的对象，并且它有两个父级<code>commit</code>对象。以知名的 Go 语言 Web 框架<code>gin</code>的仓库为例，它的哈希值为<code>e38955615a14e567811e390c87afe705df957f3a</code>的提交是一次合并产生的，这个提交的内容中有两行<code>parent</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  gin git:(master) git cat-file -p 'e38955615a14e567811e390c87afe705df957f3a'</span><br><span class="line">tree 93e5046e502847a6355ed26223a902b4de2de7c7</span><br><span class="line">parent ad087650e9881c93a19fd8db75a86968aa998cac</span><br><span class="line">parent ce26751a5a3ed13e9a6aa010d9a7fa767de91b8c</span><br><span class="line">author Javier Provecho Fernandez &lt;javiertitan@gmail.com&gt; 1499534953 +0200</span><br><span class="line">committer Javier Provecho Fernandez &lt;javiertitan@gmail.com&gt; 1499535020 +0200</span><br><span class="line"></span><br><span class="line">Merge pull request #520 from 178inaba/travis-import_path</span><br></pre></td></tr></table></figure><p>通过一个提交的<code>parent</code>属性，所有的提交对象组成了一个有向无环图。但聪明的你应该发现了，<code>git-log</code>的输出结果是线性的，所以 Git 用到了某种图的遍历算法。</p><p>查阅<code>man git-log</code>，可以在<code>Commit Ordering</code>一节中看到</p><blockquote><p>By default, the commits are shown in reverse chronological order.</p></blockquote><p>聪明的你想必已经知道该如何实现这个图的遍历算法了。</p><h1 id="自己动手写一个git-log"><a href="#自己动手写一个git-log" class="headerlink" title="自己动手写一个git-log"></a>自己动手写一个<code>git-log</code></h1><h2 id="解析commit对象"><a href="#解析commit对象" class="headerlink" title="解析commit对象"></a>解析<code>commit</code>对象</h2><p>要想以正确的顺序打印<code>commit</code>对象的信息，得先解析它。我们不需要从零开始自己打开文件、读取字节流，以及解压文件内容，只需要像上文那样调用<code>git-cat-file</code>即可。<code>git-cat-file</code>打印的内容中，有一些是需要提取备用的：</p><ul><li>以<code>parent</code>开头的行。这一行的哈希值要用于定位到有向无环图中的一个节点；</li><li>以<code>committer</code>开头的行。这一行的 UNIX 时间戳将会作为决定谁是“下一个节点”的排序依据。</li></ul><p>可以随手写一个 Python 中的类来解析一个<code>commit</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommitObject</span>:</span></span><br><span class="line">    <span class="string">"""一个Git中的commit类型的对象解析后的结果。"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *, commit_id: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.commit_id = commit_id</span><br><span class="line"></span><br><span class="line">        file_content = self._cat_file(commit_id)</span><br><span class="line">        self.parents = self._parse_parents(file_content)</span><br><span class="line">        self.timestamp = self._parse_commit_timestamp(file_content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_cat_file</span><span class="params">(self, commit_id: str)</span> -&gt; str:</span></span><br><span class="line">        cmd = [<span class="string">'git'</span>, <span class="string">'cat-file'</span>, <span class="string">'-p'</span>, commit_id]</span><br><span class="line">        <span class="keyword">return</span> subprocess.check_output(cmd).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parse_commit_timestamp</span><span class="params">(self, file_content: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""解析出提交的UNIX时间戳。"""</span></span><br><span class="line">        lines = file_content.split(<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">'committer '</span>):</span><br><span class="line">                m = re.search(<span class="string">'committer .+ &lt;[^ ]+&gt; ([0-9]+)'</span>, line.strip())</span><br><span class="line">                <span class="keyword">return</span> int(m.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parse_parents</span><span class="params">(self, file_content: str)</span> -&gt; List[str]:</span></span><br><span class="line">        lines = file_content.split(<span class="string">'\n'</span>)</span><br><span class="line">        parents: List[str] = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">'parent '</span>):</span><br><span class="line">                m = re.search(<span class="string">'parent (.*)'</span>, line.strip())</span><br><span class="line">                parent_id = m.group(<span class="number">1</span>)</span><br><span class="line">                parents.append(parent_id)</span><br><span class="line">        <span class="keyword">return</span> parents</span><br></pre></td></tr></table></figure><h2 id="遍历commit组成的有向无环图——大根堆"><a href="#遍历commit组成的有向无环图——大根堆" class="headerlink" title="遍历commit组成的有向无环图——大根堆"></a>遍历<code>commit</code>组成的有向无环图——大根堆</h2><p>恭喜你，你学过的数据结构可以派上用场了。</p><p>假设用上面的类<code>CommitObject</code>解析了<code>gin</code>中哈希值为<code>e38955615a14e567811e390c87afe705df957f3a</code>的提交，那么它的<code>parents</code>属性中会有两个字符串：</p><ul><li><code>ad087650e9881c93a19fd8db75a86968aa998cac</code>；</li><li><code>ce26751a5a3ed13e9a6aa010d9a7fa767de91b8c</code>。</li></ul><p>其中：</p><ul><li>哈希值为<code>ad087650e9881c93a19fd8db75a86968aa998cac</code>的提交的时间为<code>Sat Jul 8 12:31:44</code>；</li><li>哈希值为<code>ce26751a5a3ed13e9a6aa010d9a7fa767de91b8c</code>的提交时间为<code>Jan 28 02:32:44</code>。</li></ul><p>显然，按照反转的时间先后顺序（<code>reverse chronological</code>）打印日志的话，下一个打印的节点应当是是<code>ad087650e9881c93a19fd8db75a86968aa998cac</code>——用<code>git-log</code>命令可以确认这一点。</p><p>打印完<code>ad087650e9881c93a19fd8db75a86968aa998cac</code>之后，又要从它的父级提交和<code>ce26751a5a3ed13e9a6aa010d9a7fa767de91b8c</code>中，挑选出下一个要打印的提交对象。显然，这是一个循环往复的过程：</p><ol><li>从待打印的<code>commit</code>对象中，找出提交时间戳最大的一个；</li><li>打印它的消息；</li><li>将<code>commit</code>的所有父级提交加入到待打印的对象池中，回到第1个步骤；</li></ol><p>这个过程一直持续到没有待打印的<code>commit</code>对象为止，而所有待打印的<code>commit</code>对象组成了一个优先级队列——可以用一个大根堆来实现。</p><p>然而，我并不打算在这短短的演示当中真的去实现一个堆数据结构——我用插入排序来代替它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGitLogPrinter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *, commit_id: str, n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.commits: List[CommitObject] = []</span><br><span class="line">        self.times = n</span><br><span class="line"></span><br><span class="line">        commit = CommitObject(commit_id=commit_id)</span><br><span class="line">        self._enqueue(commit)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> len(self.commits) &gt; <span class="number">0</span> <span class="keyword">and</span> i &lt; self.times:</span><br><span class="line">            commit = self.commits.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> parent_id <span class="keyword">in</span> commit.parents:</span><br><span class="line">                parent = CommitObject(commit_id=parent_id)</span><br><span class="line">                self._enqueue(parent)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(commit.commit_id, commit.timestamp))</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_enqueue</span><span class="params">(self, commit: CommitObject)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> comm <span class="keyword">in</span> self.commits:</span><br><span class="line">            <span class="keyword">if</span> commit.commit_id == comm.commit_id:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 插入排序，先找到一个待插入的下标，然后将从i到最后一个元素都往尾部移动，再将新节点插入下标i的位置。</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(self.commits):</span><br><span class="line">            <span class="keyword">if</span> commit.timestamp &gt; self.commits[i].timestamp:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        self.commits = self.commits[<span class="number">0</span>:i] + [commit] + self.commits[i:]</span><br></pre></td></tr></table></figure><p>最后再提供一个启动函数就可以体验一番了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option('--commit-id', required=True)</span></span><br><span class="line"><span class="meta">@click.option('-n', default=20)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span><span class="params">(commit_id: str, n: int)</span>:</span></span><br><span class="line">    MyGitLogPrinter(commit_id=commit_id, n=n).run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure><h2 id="真假美猴王对比"><a href="#真假美猴王对比" class="headerlink" title="真假美猴王对比"></a>真假美猴王对比</h2><p>为了看看上面的代码所打印出来的<code>commit</code>对象的顺序是否正确，我先将它的输出内容重定向到一个文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  gin git:(master) python3 ~/SourceCode/python/my_git_log/my_git_log.py --commit-id 'e38955615a14e567811e390c87afe705df957f3a' -n 20 &gt; /tmp/my_git_log.txt</span><br></pre></td></tr></table></figure><p>再用<code>git-log</code>以同样的格式打印出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  gin git:(master) git log --pretty='format:%H %ct' 'e38955615a14e567811e390c87afe705df957f3a' -n 20 &gt; /tmp/git_log.txt</span><br></pre></td></tr></table></figure><p>最后让<code>diff</code>命令告诉我们这两个文件是否有差异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  gin git:(master) diff /tmp/git_log.txt /tmp/my_git_log.txt</span><br><span class="line">20c20</span><br><span class="line">&lt; 2521d8246d9813d65700650b29e278a08823e3ae 1499266911</span><br><span class="line">\ No newline at end of file</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span> 2521d8246d9813d65700650b29e278a08823e3ae 1499266911</span><br></pre></td></tr></table></figure><p>可以说是一模一样了。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这方面Python还是比Lisp略逊一筹</title>
    <link href="https://liutos.github.io/2021/08/12/%E8%BF%99%E6%96%B9%E9%9D%A2Python%E8%BF%98%E6%98%AF%E6%AF%94Lisp%E7%95%A5%E9%80%8A%E4%B8%80%E7%AD%B9/"/>
    <id>https://liutos.github.io/2021/08/12/这方面Python还是比Lisp略逊一筹/</id>
    <published>2021-08-12T15:08:37.000Z</published>
    <updated>2021-08-12T15:08:37.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>众所周知，Python 支持向函数传递关键字参数。比如 Python 的内置函数<code>max</code>就接受名为<code>key</code>的关键字参数，以决定如何获取比较两个参数时的依据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(&#123;<span class="string">'v'</span>: <span class="number">1</span>&#125;, &#123;<span class="string">'v'</span>: <span class="number">3</span>&#125;, &#123;<span class="string">'v'</span>: <span class="number">2</span>&#125;, key=<span class="keyword">lambda</span> o: o[<span class="string">'v'</span>])  <span class="comment"># 返回值为&#123;'v': 3&#125;</span></span><br></pre></td></tr></table></figure><p>自定义一个运用了关键字参数特性的函数当然也不在话下。例如模仿一下 Common Lisp 中的函数<code>string-equal</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_equal</span><span class="params">(string1, string2, *, start1=None, end1=None, start2=None, end2=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start1:</span><br><span class="line">        start1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> end1:</span><br><span class="line">        end1 = len(string1) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start2:</span><br><span class="line">        start2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> end2:</span><br><span class="line">        end2 = len(string2) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> string1[start1:end1 + <span class="number">1</span>] == string2[start2:end2 + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>再以关键字参数的形式向它传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string_equal(<span class="string">"Hello, world!"</span>, <span class="string">"ello"</span>, start1=<span class="number">1</span>, end1=<span class="number">4</span>)  <span class="comment"># 返回值为True</span></span><br></pre></td></tr></table></figure><p><del>秉承 Python 之禅中的<code>There should be one-- and preferably only one --obvious way to do it.</code>理念，</del> 我甚至可以花里胡哨地、用关键字参数的语法向<code>string1</code>和<code>string2</code>传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string_equal(string1=<span class="string">'Goodbye, world!'</span>, string2=<span class="string">'ello'</span>)  <span class="comment"># 返回值为False</span></span><br></pre></td></tr></table></figure><p>但瑜不掩瑕，Python 的关键字参数也有其不足。</p><h1 id="Python-的不足"><a href="#Python-的不足" class="headerlink" title="Python 的不足"></a>Python 的不足</h1><p>Python 的关键字参数特性的缺点在于，同一个参数无法同时以：</p><ol><li>具有自身的参数名，以及；</li><li>可以从<code>**kwargs</code>中取得，</li></ol><p>两种形态存在于参数列表中。</p><p>举个例子，我们都知道 Python 有一个知名的第三方库叫做 requests，提供了<del>用于开发爬虫牢底坐穿的</del>发起 HTTP 请求的功能。它的类<code>requests.Session</code>的实例方法<code>request</code>有着让人忍不住运用 Long Parameter List 对其重构的、长达 16 个参数的参数列表。（你可以移步<a href="https://docs.python-requests.org/en/latest/api/#requests.Session.request" target="_blank" rel="noopener"><code>request</code>方法的文档</a>观摩）</p><p>为了便于使用，requests 的作者贴心地提供了<code>requests.request</code>，这样只需要一次简单的函数调用即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.request(<span class="string">'GET'</span>, <span class="string">'http://example.com'</span>)</span><br></pre></td></tr></table></figure><p><code>requests.request</code>函数支持与<code>requests.Session#request</code>（请允许我借用 Ruby 对于实例方法的写法）相同的参数列表，这一切都是通过在参数列表中声明<code>**kwargs</code>变量，并在函数体中用相同的语法向后者传参来实现的。（你可以移步<a href="https://docs.python-requests.org/en/latest/_modules/requests/api/#request" target="_blank" rel="noopener">request 函数的源代码</a>观摩）</p><p>这样的缺陷在于，<code>requests.request</code>函数的参数列表丢失了大量的信息。要想知道使用者能往<code>kwargs</code>中传入什么参数，必须：</p><ol><li>先知道<code>requests.request</code>是如何往<code>requests.Session#request</code>中传参的——将<code>kwargs</code>完全展开传入是最简单的情况；</li><li>再查看<code>requests.Session#request</code>的参数列表中排除掉<code>method</code>和<code>url</code>的部分剩下哪些参数。</li></ol><p>如果想在<code>requests.request</code>的参数列表中使用参数自身的名字（例如<code>params</code>、<code>data</code>、<code>json</code>等），那么调用<code>requests.Session#request</code>则变得繁琐起来，不得不写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> sessions.Session() <span class="keyword">as</span> session:</span><br><span class="line">    <span class="keyword">return</span> session.request(method=method, url=url, params=params, data=data, json=data, **kwargs)</span><br></pre></td></tr></table></figure><p>的形式——果然人类的本质是复读机。</p><p>一个优雅的解决方案，可以参考隔壁的 Common Lisp。</p><h1 id="Common-Lisp-的优越性"><a href="#Common-Lisp-的优越性" class="headerlink" title="Common Lisp 的优越性"></a>Common Lisp 的优越性</h1><p>Common Lisp 第一次面世是在1984年，比 Python 的1991年要足足早了7年。但据悉，Python 的关键字参数特性借鉴自 Modula-3，而不是<del>万物起源的</del> Lisp。Common Lisp 中的关键字参数特性与 Python 有诸多不同。例如，根据 Python 官方手册中的说法，<code>**kwargs</code>中只有多出来的关键字参数</p><blockquote><p>If the form “**identifier” is present, it is initialized to a new ordered mapping receiving any excess keyword arguments</p></blockquote><p>而在 Common Lisp 中，与<code>**kwargs</code>对应的是<code>&amp;rest args</code>，它必须放置在关键字参数之前（即左边），并且根据 CLHS 中<a href="http://www.lispworks.com/documentation/lw51/CLHS/Body/03_dac.htm" target="_blank" rel="noopener">《A specifier for a rest parameter》</a>的说法，<code>args</code>中含有所有未经处理的参数——也包含了位于其后的关键字参数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> foobar (<span class="name">&amp;rest</span> args <span class="symbol">&amp;key</span> k1 k2)</span><br><span class="line">  (<span class="name">list</span> args k1 k2))</span><br><span class="line"></span><br><span class="line">(<span class="name">foobar</span> <span class="symbol">:k1</span> <span class="number">1</span> <span class="symbol">:k2</span> <span class="number">3</span>)  <span class="comment">;; 返回值为((:K1 1 :K2 3) 1 3)</span></span><br></pre></td></tr></table></figure><p>如果我还有另一个函数与<code>foobar</code>有着相似的参数列表，那么也可以轻松将所有参数传递给它</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> foobaz (<span class="name">a</span> <span class="symbol">&amp;rest</span> args <span class="symbol">&amp;key</span> k1 k2)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> k1 k2))</span><br><span class="line">  (<span class="name">cons</span> a</span><br><span class="line">        (<span class="name">apply</span> #'foobar args)))</span><br><span class="line"></span><br><span class="line">(<span class="name">foobaz</span> <span class="number">1</span> <span class="symbol">:k1</span> <span class="number">2</span> <span class="symbol">:k2</span> <span class="number">3</span>)  <span class="comment">;; 返回值为(1 (:K1 2 :K2 3) 2 3)</span></span><br></pre></td></tr></table></figure><p>甚至于，即使在<code>foobaz</code>中支持的关键字参数比<code>foobar</code>要多，也能轻松地处理，因为 Common Lisp 支持向被调用的函数传入一个特殊的关键字参数<code>:allow-other-keys</code>即可</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> foobaz (<span class="name">a</span> <span class="symbol">&amp;rest</span> args <span class="symbol">&amp;key</span> k1 k2 my-key)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> k1 k2))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"my-key is ~S~%"</span> my-key)</span><br><span class="line">  (<span class="name">cons</span> a</span><br><span class="line">        (<span class="name">apply</span> #'foobar <span class="symbol">:allow-other-keys</span> <span class="literal">t</span> args)))</span><br><span class="line"></span><br><span class="line">(<span class="name">foobaz</span> <span class="number">1</span> <span class="symbol">:k1</span> <span class="number">2</span> <span class="symbol">:k2</span> <span class="number">3</span> <span class="symbol">:my-key</span> <span class="number">4</span>)  <span class="comment">;; 打印my-key is 4，并返回(1 (:ALLOW-OTHER-KEYS T :K1 2 :K2 3 :MY-KEY 4) 2 3)</span></span><br></pre></td></tr></table></figure><p>回到 HTTP 客户端的例子。在 Common Lisp 中我一般用<a href="https://edicl.github.io/drakma/" target="_blank" rel="noopener">drakma</a>这个第三方库来发起 HTTP 请求，它导出了一个<code>http-request</code>函数，用法与<code>requests.request</code>差不多</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">drakma</span><span class="symbol">:http-request</span> <span class="string">"http://example.com"</span> <span class="symbol">:method</span> <span class="symbol">:get</span>)</span><br></pre></td></tr></table></figure><p>如果我想要基于它来封装一个便捷地发出 GET 请求的函数<code>http-get</code>的话，可以这样写</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> http-get (<span class="name">uri</span> <span class="symbol">&amp;rest</span> args)</span><br><span class="line">  (<span class="name">apply</span> #'drakma<span class="symbol">:http-request</span> uri <span class="symbol">:method</span> <span class="symbol">:get</span> args))</span><br></pre></td></tr></table></figure><p>如果我希望在<code>http-get</code>的参数列表中直接暴露出一部分<code>http-request</code>支持的关键字参数的话，可以这样写</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> http-get (<span class="name">uri</span> <span class="symbol">&amp;rest</span> args <span class="symbol">&amp;key</span> content)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> content))</span><br><span class="line">  (<span class="name">apply</span> #'drakma<span class="symbol">:http-request</span> uri <span class="symbol">:method</span> <span class="symbol">:get</span> args))</span><br></pre></td></tr></table></figure><p>更进一步，如果我想在<code>http-get</code>中支持解析<code>Content-Type</code>为<code>application/json</code>的响应结果的话，还可以这样写</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">ql</span><span class="symbol">:quickload</span> 'jonathan)</span><br><span class="line">(<span class="name">ql</span><span class="symbol">:quickload</span> 'str)</span><br><span class="line">(<span class="name">defun</span> http-get (<span class="name">uri</span> <span class="symbol">&amp;rest</span> args <span class="symbol">&amp;key</span> content (<span class="name">decode-json</span> <span class="literal">t</span>))</span><br><span class="line">  <span class="comment">;; http-request并不支持decode-json这个参数，但依然可以将整个args传给它。</span></span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> content))</span><br><span class="line">  (<span class="name">multiple-value-bind</span> (<span class="name">bytes</span> code headers)</span><br><span class="line">      (<span class="name">apply</span> #'drakma<span class="symbol">:http-request</span> uri</span><br><span class="line">             <span class="symbol">:allow-other-keys</span> <span class="literal">t</span></span><br><span class="line">             <span class="symbol">:method</span> <span class="symbol">:get</span></span><br><span class="line">             args)</span><br><span class="line">    (<span class="name">declare</span> (<span class="name">ignorable</span> code))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">content-type</span> (<span class="name">cdr</span> (<span class="name">assoc</span> <span class="symbol">:content-type</span> headers)))</span><br><span class="line">          (<span class="name">text</span> (<span class="name">flexi-streams</span><span class="symbol">:octets-to-string</span> bytes)))</span><br><span class="line">      (<span class="name">if</span> (<span class="name">and</span> decode-json</span><br><span class="line">               (<span class="name">str</span><span class="symbol">:starts-with-p</span> <span class="string">"application/json"</span> content-type))</span><br><span class="line">          (<span class="name">jonathan</span><span class="symbol">:parse</span> text)</span><br><span class="line">          text))))</span><br></pre></td></tr></table></figure><p>不愧是<del>Dio</del> Common Lisp，轻易就做到了我们做不到的事情。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>曾几何时，Python 程序员还会津津乐道于 Python 之禅中的<code>There should be one-- and preferably only one --obvious way to do it.</code>，但其实 Python 光是在定义一个函数的参数方面就有五花八门的写法了。甚至在写这篇文章的过程中，我才知道原来 Python 的参数列表中可以通过写上<code>/</code>来使其左侧的参数都成为 positional-only 的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(a, b)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(a, /, b)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo1(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line">foo2(a=<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># 会抛出异常，因为a只能按位置来传参。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>屠龙术——如何运用整洁架构</title>
    <link href="https://liutos.github.io/2021/08/02/%E5%B1%A0%E9%BE%99%E6%9C%AF%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84/"/>
    <id>https://liutos.github.io/2021/08/02/屠龙术——如何运用整洁架构/</id>
    <published>2021-08-02T15:13:45.000Z</published>
    <updated>2021-08-02T15:13:46.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>或许是为了显摆，也或许是虚心学习，总之我在去年年初花了大约两个月读完了<a href="https://book.douban.com/subject/30333919/" target="_blank" rel="noopener">《架构整洁之道》</a>。但读过后也仅仅就是读了而已，尽管书中描绘了一个名为整洁架构的软件架构，但我并没有理解并应用到实际的开发中去。书中的诸多理念最终都蛰伏在了我的脑海深处。</p><p>今年年初的时候我换了工作。新的单位给每人都配备了办公用的电脑，从此我也不用背着2公斤重的MacBook Pro通勤了。美中不足的地方是，我和<a href="https://github.com/Liutos/cuckoo" target="_blank" rel="noopener">cuckoo</a>之间的联系被斩断了，因为<code>cuckoo</code>是个单机程序，要在私人电脑和办公电脑上各装一份太不方便了。于是乎，我决定开两个新的项目，将<code>cuckoo</code>拆分为客户端和服务端两部分。</p><p>正好，这给了我在实际的项目中践行整洁架构的机会。</p><h2 id="什么是整洁架构"><a href="#什么是整洁架构" class="headerlink" title="什么是整洁架构"></a>什么是整洁架构</h2><p>不像数学领域的概念往往有一个精确的定义，书中甚至没有道出整洁架构是什么。相对的，只有一副引人入胜的架构示意图（图片摘自作者博客的<a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener">这篇文章</a>）</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210802/整洁架构.jpg" alt=""></p><p>在作者的<a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener">文章</a>中，对图中的四个层次给出了响应的解释：</p><!-- 对Entities的解释：Entities封装了企业范围内的业务规则。如果你没有经营一个企业，仅仅是开发一款应用，那么Entities就是应用的业务对象，它们封装了应用内最通用、上层的规则。 --><!-- TODO: 将几个层的名字都用一对反引号包裹起来。 --><ul><li>Entities封装了企业范围内的业务规则。如果你没有经营一个企业，仅仅是开发一款应用，那么Entities就是应用的业务对象，它们封装了应用内最通用、上层的规则。</li></ul><!-- 对Use Cases的解释：Use Cases包含了与应用相关的业务规则。它封装并实现了系统的所有用例。 --><ul><li>Use Cases包含了与应用相关的业务规则。它封装并实现了系统的所有用例。</li></ul><!-- 衍生出来的问题：何谓用例（Use Cases）？ --><!-- 对Interface Adapters的解释：这一层负责将最方便entities和use cases的数据转换为最方便外部系统使用的格式。在这一层以内都是抽象的，对外界诸如MVC、GUI、数据库等均是无感知的。此外，这一层也负责与外部服务通信。（可以举fledgling的repository目录下的例子） --><ul><li>这一层负责将最方便entities和use cases的数据转换为最方便外部系统使用的格式。在这一层以内都是抽象的，对外界诸如MVC、GUI、数据库等均是无感知的。此外，这一层也负责与外部服务通信。</li><li><code>Frameworks &amp; Drivers</code>，顾名思义，这一层包含了与框架相关的代码，或者像C语言中的<code>main</code>函数这样的入口函数代码；</li></ul><!-- 有多少层不要紧，关键在于必须遵循依赖规则：在源代码层面，总是外层的依赖于内层的。例如，nest中use_case目录下总是依赖于entity目录、infra和repository依赖于entity目录、cli和web依赖于app、infra，以及repository等“内层”目录。 --><h1 id="如何应用整洁架构"><a href="#如何应用整洁架构" class="headerlink" title="如何应用整洁架构"></a>如何应用整洁架构</h1><!-- 这里给出我的实践心得：实践整洁架构的项目的简介、目录结构的划分、语言特性的运用、设计模式的运用、SOLID原则的体现、与MVC相比更为清晰的边界。除了这些通用的，还有一些具体的编码细节：参数的传递方式、抽象方法对比NotImplementedError、返回值对比传入Presenter、更新资源的用例的输入定义、为什么不要防御性编程、无法隐藏的I/O、类方法对比实例方法、避免循环依赖 --><h2 id="实际项目的例子"><a href="#实际项目的例子" class="headerlink" title="实际项目的例子"></a>实际项目的例子</h2><p>前文提到，为了满足新需求，我需要将<a href="https://github.com/Liutos/cuckoo" target="_blank" rel="noopener">cuckoo</a>改造为C/S模型。但比起缓缓地将cuckoo拆解为两部分，我更乐于大刀阔斧地从头开发开发这两个程序，于是便诞生了：</p><ul><li>服务端程序为<a href="https://github.com/Liutos/nest" target="_blank" rel="noopener">nest</a>，负责管理任务、计划等实体对象，并提供基于HTTP协议的API；</li><li>客户端程序为<a href="https://github.com/Liutos/fledgling" target="_blank" rel="noopener">fledgling</a>，负责与<code>nest</code>通信，并在客户机上触发通知（如macOS的右上角弹出通知）。</li></ul><p>它们都是我依照自己对整洁架构的理解来编写的。</p><h2 id="从架构理念到具体决策"><a href="#从架构理念到具体决策" class="headerlink" title="从架构理念到具体决策"></a>从架构理念到具体决策</h2><p>正如<a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a>仅仅是一种软件结构风格而不是具体的设计指南一样，整洁架构也并没有规定示意图中的分层结构该如何运用一门语言的特性来实现，这需要开发者自己去摸索。下文我给出自己在<code>nest</code>和<code>fledgling</code>项目中的做法。</p><h3 id="如何安排代码目录结构"><a href="#如何安排代码目录结构" class="headerlink" title="如何安排代码目录结构"></a>如何安排代码目录结构</h3><p>在程序的代码结构中，最接近于架构示意图的分层架构的，当属代码仓库的目录结构了。模仿整洁架构中的四层结构，我在<code>nest</code>中也安排了相似的目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  nest git:(master) tree -I '__pycache__' -d ./nest</span><br><span class="line">./nest</span><br><span class="line">├── app</span><br><span class="line">│   ├── entity</span><br><span class="line">│   └── use_case</span><br><span class="line">├── cli</span><br><span class="line">│   ├── command</span><br><span class="line">│   └── config</span><br><span class="line">├── infra</span><br><span class="line">├── repository</span><br><span class="line">│   └── DDL</span><br><span class="line">└── web</span><br><span class="line">    ├── config</span><br><span class="line">    ├── controller</span><br><span class="line">    └── presenter</span><br><span class="line"></span><br><span class="line">13 directories</span><br></pre></td></tr></table></figure><h4 id="nest-app-entity-目录"><a href="#nest-app-entity-目录" class="headerlink" title="nest/app/entity/目录"></a><code>nest/app/entity/</code>目录</h4><p><code>nest/app/entity/</code>目录下的各个文件分别定义了系统中的各个实体类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  nest git:(master) ls nest/app/entity</span><br><span class="line">__pycache__    certificate.py location.py    plan.py        task.py        user.py</span><br></pre></td></tr></table></figure><p>例如：</p><ul><li><code>task.py</code>中定义了类<code>Task</code>，表示一个任务；</li><li><code>plan.py</code>中定义了类<code>Plan</code>，表示任务的一次触发计划，等等。</li></ul><p><code>entity/</code>目录下的各个文件中，还定义了管理各种实体对象生命期的仓库对象，例如：</p><ul><li><code>task.py</code>中定义了类<code>ITaskRepository</code>，它负责增（<code>add</code>方法）删（<code>clear</code>、<code>remove</code>方法）查（<code>find</code>、<code>find_by_id</code>方法）改（同样是<code>add</code>方法）任务对象；</li><li><code>plan.py</code>中定义了类<code>IPlanRepository</code>，同样能够增（<code>add</code>方法）删（<code>clear</code>、<code>remove</code>方法）查（<code>find_as_queue</code>、<code>find_by_id</code>、<code>find_by_task_id</code>方法）改（同样是<code>add</code>方法）计划对象，等等。</li></ul><p>实体类型都是充血模型，它们实现了系统核心的业务规则，例如：</p><ul><li>类<code>Plan</code>有方法<code>is_repeated</code>用于检查是否为重复性任务；</li><li>有方法<code>is_visible</code>用于检查该计划在当前时间是否可见；</li><li>有方法<code>rebirth</code>用于生成一个新的、下一次触发的计划，等等。</li></ul><p>这个目录下的内容相当于整洁架构中的<code>Entities</code>层。</p><h4 id="nest-app-use-case-目录"><a href="#nest-app-use-case-目录" class="headerlink" title="nest/app/use_case/目录"></a><code>nest/app/use_case/</code>目录</h4><p><code>nest/app/use_case/</code>目录下的各个文件分别定义了系统所提供的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  nest git:(master) ls nest/app/use_case</span><br><span class="line">__init__.py        authenticate.py    change_task.py     create_plan.py     delete_plan.py     get_location.py    get_task.py        list_plan.py       login.py           registration.py</span><br><span class="line">__pycache__        change_plan.py     create_location.py create_task.py     delete_task.py     get_plan.py        list_location.py   list_task.py       pop_plan.py</span><br></pre></td></tr></table></figure><p>例如：</p><ul><li><code>authenticate.py</code>定义了系统如何认证发送当前请求的用户；</li><li><code>change_task.py</code>定义了系统如何修改一个任务对象，等等。</li></ul><p>每一个处于该目录下的文件，只会依赖<code>nest/app/entity/</code>中的代码，并且它们都是抽象的。例如，<code>authenticate.py</code>中的类<code>AuthenticateUseCase</code>的构造方法中，要求其：</p><ul><li>参数<code>certificate_repository</code>必须是类<code>ICertificateRepository</code>或其子类的实例；</li><li>参数<code>params</code>必须是类<code>IParams</code>或其子类的实例。</li></ul><p>然而<code>ICertificateRepository</code>和<code>IParams</code>其实都是抽象基类<code>ABC</code>的子类，并且它们都有被装饰器<code>abstractmethod</code>装饰的抽象方法，因此并不能直接实例化。</p><p>该目录相当于整洁架构中的<code>Use Cases</code>层。</p><h4 id="其它目录"><a href="#其它目录" class="headerlink" title="其它目录"></a>其它目录</h4><p>顾名思义，<code>cli</code>和<code>web</code>目录分别是与命令行程序、基于HTTP的API相关的代码，它们实现了处理来自命令行和HTTP协议的输入，以及打印到终端和返回HTTP响应的功能。<code>repository</code>目录下的各个文件实现了<code>entity</code>目录中各个抽象的仓库类的具体子类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  nest git:(master) ls nest/repository</span><br><span class="line">DDL             __init__.py     __pycache__     certificate.py  db_operation.py location.py     plan.py         task.py         user.py</span><br></pre></td></tr></table></figure><p>例如：</p><ul><li><code>certificate.py</code>中实现了<code>entity/</code>目录下的同名文件中的抽象类<code>ICertificateRepository</code>——一个基于内存的子类<code>MemoryCertificateRepository</code>，以及一个基于Redis的子类<code>RedisCertificateRepository</code>；</li><li><code>location.py</code>中实现了<code>entity/</code>目录下的同名文件中的抽象类<code>ILocationRepository</code>——基于MySQL的子类<code>DatabaseLocationRepository</code>，等等。</li></ul><p>需要注意的是，除了<code>app</code>外的这些目录，并不能与整洁架构示意图中的外面两层严格对应起来。例如，尽管<code>cli</code>和<code>web</code>的名字一下子就让人认为它们处于<code>Frameworks &amp; Drivers</code>层，但<code>web/presenter/</code>目录下的内容其实与框架并无联系。反倒是从命名上看处于<code>Interface Adapters</code>层的<code>web/controller/</code>目录，其中的代码依赖于<code>Flask</code>框架。</p><h3 id="如何往Use-Cases层传入数据"><a href="#如何往Use-Cases层传入数据" class="headerlink" title="如何往Use Cases层传入数据"></a>如何往<code>Use Cases</code>层传入数据</h3><p>在鲍勃大叔的文章中，提到了关于如何在层之间传递数据的原则</p><blockquote><p>Typically the data that crosses the boundaries is simple data structures. You can use basic structs or simple Data Transfer objects if you like.  Or the data can simply be arguments in function calls. Or you can pack  it into a hashmap, or construct it into an object.</p></blockquote><p>在<code>nest/app/use_case/</code>目录下的所有用例采用的都是这里提到的<code>construct it into an object</code>的方式。以<code>create_task.py</code>为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IParams</span><span class="params">(ABC)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_brief</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_keywords</span><span class="params">(self)</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user_id</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>用内置模块<code>abc</code>中的抽象基类<code>ABC</code>、装饰器<code>abstractmethod</code>，以及类<code>CreateTaskUseCase</code>中的<code>assert</code>一起模拟类似Java中的<code>interface</code>的效果；</li><li>用方法而不是成员变量来获取不同的输入参数：<ul><li><code>get_brief</code>获取任务的简述；</li><li><code>get_keywords</code>获取关键字列表；</li><li><code>get_user_id</code>获取创建该任务的用户的ID。</li></ul></li></ul><p>聪明的盲生已经发现了华点：明明只需要在类<code>CreateTaskUseCase</code>的构造方法中定义<code>brief</code>、<code>keywords</code>，以及<code>user_id</code>三个参数即可，为什么要用方法这么麻烦呢？答案是因为方法更灵活。</p><p>当你采用构造方法参数的方案时，本质上是立了一个假设：</p><ol><li><del>在所有惯性系中，物理定律有相同的表达形式</del>先完成所有参数的获取；</li><li>再执行用例中的业务逻辑。</li></ol><p>如果是一个基于HTTP协议的API，那么这个假设是成立的——用户在客户端发送的HTTP请求到达服务端后，便无法再补充参数了。但有一种场景，用户能够在用例执行业务逻辑的过程中，持续地与应用交互，那便是命令行程序。</p><p>我在<code>fledgling</code>项目中给了一个用户在用例执行过程中，交互式地输入的例子。在文件<code>fledgling/app/use_case/delete_task.py</code>中，实现了删除指定任务的用例。它要求输入两个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IParams</span><span class="params">(ABC)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_confirmation</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="string">"""获取用户是否要删除该任务的确认。"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_task_id</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在文件<code>fledgling/cli/command/delete_task.py</code>中实现了<code>IParams</code>类的命令行形态。当没有从命令行参数中获取到任务的ID时，便会使用第三方库<code>PyInquirer</code>询问用户输入任务ID，并进一步确认</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Params</span><span class="params">(IParams)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *, task_id: Optional[int])</span>:</span></span><br><span class="line">        self.task_id = task_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_confirmation</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> self.task_id:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        questions = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'确定删除该任务'</span>,</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'confirmation'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'confirm'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">        answers = prompt(questions)</span><br><span class="line">        <span class="keyword">return</span> answers[<span class="string">'confirmation'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_task_id</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> self.task_id:</span><br><span class="line">            <span class="keyword">return</span> self.task_id</span><br><span class="line">        questions = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'输入要删除的任务的ID'</span>,</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'task_id'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'input'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">        answers = prompt(questions)</span><br><span class="line">        <span class="keyword">return</span> answers[<span class="string">'task_id'</span>]</span><br></pre></td></tr></table></figure><p>而这一切<del>煮不在乎</del><code>DeleteTaskUseCase</code>并不会感知到，它独立于用户界面。</p><h3 id="在哪一层维护业务规则"><a href="#在哪一层维护业务规则" class="headerlink" title="在哪一层维护业务规则"></a>在哪一层维护业务规则</h3><p>在《架构整洁之道》第20章中，鲍勃大叔给出了业务规则的定义</p><blockquote><p>Strictly speaking, business rules are rules or procedures that make or save<br>the business money. Very strictly speaking, these rules would make or save the business money, irrespective of whether they were implemented on a computer. They would make or save money even if they were executed manually.</p></blockquote><p>业务规则往往不是独立存在的，它们需要作用在一些数据上</p><blockquote><p>Critical Business Rules usually require some data to work with. For example, our loan requires a loan balance, an interest rate, and a payment schedule.</p></blockquote><p>而整洁架构中的实体就是包含了一部分业务规则及其操作的数据的对象。以<code>nest</code>中的计划实体为例，在类<code>Plan</code>中包含了几种业务规则——尽管这些规则不能为我赚钱或者省钱：</p><ul><li>一个计划的持续时长（如果有的话）不会是负的秒数——由<code>duration</code>的setter保障；</li><li>周期性计划必须指定周期——由<code>new</code>方法维护；</li><li>一个计划是重复的，当且仅当它有指定重复类型——由<code>is_repeated</code>方法维护；</li><li>一个计划是可见的，当且仅当它：<ul><li>要么没有指定可见的小时，要么当且时间处于指定的小时中，并且；</li><li>要么没有指定星期几可见，要么今天是指定的<code>weekday</code>——由<code>is_visible</code>方法维护。</li></ul></li></ul><p>但在整洁架构的示意图中，<code>Use Cases</code>层也是有维护规则的，它维护的是应用的业务规则（<code>Application Business Rules</code>）。与<code>Entities</code>层所维护的业务规则不同，<code>Use Cases</code>层的业务规则取决于应用提供的功能。例如，在<code>nest</code>项目修改一个计划的用例<code>ChangePlanUseCase</code>类的方法<code>run</code>中，会：</p><ol><li>检查指定的计划是否存在——显然，实体没法检查自己是否存在；</li><li>检查计划是否能被修改；</li><li>检查新的地点的ID是否指向真实存在的地点对象——显然，<code>Plan</code>对象不会去检查<code>Location</code>存在与否；</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件nest/app/use_case/change_plan.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangePlanUseCase</span>:</span></span><br><span class="line">    <span class="comment"># 省略__init__的定义</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 省略一些无关要紧的代码</span></span><br><span class="line">        params = self.params</span><br><span class="line">        plan_id = params.get_plan_id()</span><br><span class="line">        plan = self.plan_repository.find_by_id(plan_id)</span><br><span class="line">        <span class="keyword">if</span> plan <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 上面第1点</span></span><br><span class="line">            <span class="keyword">raise</span> PlanNotFoundError(plan_id=plan_id)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> plan.is_changeable():  <span class="comment"># 上面第2点</span></span><br><span class="line">            <span class="keyword">raise</span> UnchangeableError()</span><br><span class="line"></span><br><span class="line">        found, location_id = params.get_location_id()</span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">if</span> location_id:</span><br><span class="line">                location = self.location_repository.get(id_=location_id)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> location:  <span class="comment"># 上面第3点</span></span><br><span class="line">                    <span class="keyword">raise</span> LocationNotFoundError(location_id=location_id)</span><br><span class="line">            plan.location_id = location_id</span><br></pre></td></tr></table></figure><p>聪明的你一定发现了：<code>is_changeable</code>为什么不作为<code>Enterpries Business Rules</code>，在<code>Plan</code>对象内自行检查呢？答案是因为这样写更简单。</p><p>试想一下，如果要让<code>Plan</code>自己禁止在<code>is_changeable</code>为<code>False</code>时被修改，那么必须：</p><ul><li>先为所有可修改的属性设置setter；</li><li>在每一个setter中都调用<code>is_changeable</code>进行检查。</li></ul><p>之所以要这么做，是因为一个实体对象（在这里是指<code>Plan</code>的实例对象）是外部的时间流动是无感知的。它不知道外层（此处是<code>Use Cases</code>层）会<strong>先</strong>调用哪一个方法，<strong>后</strong>调用哪一个方法。因此，要想保持“终止状态的计划不能修改”，就必须在每一处setter都检查。</p><p>与之相反，在用例中有编排，因此它可以感知时间的流动。用例可以让<code>Plan</code>的<code>is_changeable</code>方法在其它任何方法之前被调用，因此免除了繁琐地在每一个setter中检查<code>is_changeable</code>的必要。</p><h3 id="如何获取Use-Cases层的处理结果"><a href="#如何获取Use-Cases层的处理结果" class="headerlink" title="如何获取Use Cases层的处理结果"></a>如何获取<code>Use Cases</code>层的处理结果</h3><p>正如往<code>Use Cases</code>层中输入参数可以采用：</p><ol><li>直接在<code>__init__</code>中传入对应类型的参数，或；</li><li>在<code>__init__</code>中传入一个能根据方法提取参数的对象。</li></ol><p>两种方案一样，获取<code>Use Cases</code>层的计算结果同样有两种方案：</p><ol><li>获取<code>run</code>方法的返回值，捕捉它的异常，或；</li><li>在<code>__init__</code>中传入一个能够接受不同结果并处理的对象。</li></ol><p>在<code>nest</code>这样的仅仅提供HTTP API的应用中，第1种方案便已经足够了。例如，在文件<code>nest/web/controller/create_plan.py</code>中，类<code>CreatePlanUseCase</code>的<code>run</code>方法的返回值为创建的计划对象，如果<code>run</code>调用成功，这个controller会借助于<code>PlanPresenter</code>，将计划对象转换为JSON对象格式的字符串，返回给调用方；如果调用失败，那么controller中也会捕捉异常（如<code>InvalidRepeatTypeError</code>）并以另一种格式返回给调用方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_plan</span><span class="params">(certificate_repository, repository_factory)</span>:</span></span><br><span class="line">    <span class="comment"># 省略了不必要的代码</span></span><br><span class="line">    params = HTTPParams()</span><br><span class="line">    use_case = CreatePlanUseCase(</span><br><span class="line">        location_repository=repository_factory.location(),</span><br><span class="line">        params=params,</span><br><span class="line">        plan_repository=repository_factory.plan(),</span><br><span class="line">        task_repository=repository_factory.task(),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plan = use_case.run()</span><br><span class="line">        presenter = PlanPresenter(plan=plan)</span><br><span class="line">        <span class="keyword">return</span> &#123;  <span class="comment"># 成功的情形</span></span><br><span class="line">            <span class="string">'error'</span>: <span class="keyword">None</span>,</span><br><span class="line">            <span class="string">'result'</span>: presenter.format(),</span><br><span class="line">            <span class="string">'status'</span>: <span class="string">'success'</span>,</span><br><span class="line">        &#125;, <span class="number">201</span></span><br><span class="line">    <span class="keyword">except</span> InvalidRepeatTypeError <span class="keyword">as</span> e:  <span class="comment"># 失败的情形</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'error'</span>: &#123;</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'不支持的重复类型：&#123;&#125;'</span>.format(e.repeat_type),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'result'</span>: <span class="keyword">None</span>,</span><br><span class="line">            <span class="string">'status'</span>: <span class="string">'failure'</span>,</span><br><span class="line">        &#125;, <span class="number">422</span></span><br></pre></td></tr></table></figure><p>如果想要更高的灵活性并且也有施展的空间，那么可以考虑第2种方案。例如<code>fledgling</code>项目中文件<code>fledgling/app/use_case/list_plan.py</code>中，就定义了一个接口<code>IPresenter</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPresenter</span><span class="params">(ABC)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_find_location</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_find_task</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_invalid_location</span><span class="params">(self, *, error: InvalidLocationError)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_plans</span><span class="params">(self, *, count: int, plans: List[Plan])</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>并且在用例的执行过程中，会多次向<code>self.presenter</code>传递数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListPlanUseCase</span>:</span></span><br><span class="line">    <span class="comment"># 省略__init__方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        location_id = <span class="keyword">None</span></span><br><span class="line">        location_name = self.params.get_location_name()</span><br><span class="line">        no_location = self.params.get_no_location()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> no_location <span class="keyword">and</span> location_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            locations = self.location_repository.find(name=location_name)</span><br><span class="line">            <span class="keyword">if</span> len(locations) == <span class="number">0</span>:</span><br><span class="line">                self.presenter.on_invalid_location(error=InvalidLocationError(name=location_name))  <span class="comment"># 第1次，触发无效地点的错误</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            location_id = locations[<span class="number">0</span>].id</span><br><span class="line"></span><br><span class="line">        page = self.params.get_page()</span><br><span class="line">        per_page = self.params.get_per_page()</span><br><span class="line">        criteria = &#123;</span><br><span class="line">            <span class="string">'page'</span>: page,</span><br><span class="line">            <span class="string">'per_page'</span>: per_page,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> location_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            criteria[<span class="string">'location_id'</span>] = location_id</span><br><span class="line">        plans, count = self.plan_repository.list(**criteria)</span><br><span class="line">        location_ids = [plan.location_id <span class="keyword">for</span> plan <span class="keyword">in</span> plans]</span><br><span class="line">        self.presenter.on_find_location()  <span class="comment"># 第2次交互，通知presenter开始查找地点的事件</span></span><br><span class="line">        locations = self.location_repository.find(</span><br><span class="line">            ids=location_ids,</span><br><span class="line">            page=<span class="number">1</span>,</span><br><span class="line">            per_page=len(location_ids),</span><br><span class="line">        )</span><br><span class="line">        task_ids = [plan.task_id <span class="keyword">for</span> plan <span class="keyword">in</span> plans]</span><br><span class="line">        self.presenter.on_find_task()  <span class="comment"># 第3次交互，通知presenter开始查找任务的事件</span></span><br><span class="line">        tasks = self.task_repository.list(</span><br><span class="line">            page=<span class="number">1</span>,</span><br><span class="line">            per_page=len(task_ids),</span><br><span class="line">            task_ids=task_ids,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">for</span> plan <span class="keyword">in</span> plans:</span><br><span class="line">            location_id = plan.location_id</span><br><span class="line">            location = [location <span class="keyword">for</span> location <span class="keyword">in</span> locations <span class="keyword">if</span> location.id == location_id][<span class="number">0</span>]</span><br><span class="line">            plan.location = location</span><br><span class="line">            task_id = plan.task_id</span><br><span class="line">            task = [task <span class="keyword">for</span> task <span class="keyword">in</span> tasks <span class="keyword">if</span> task.id == task_id][<span class="number">0</span>]</span><br><span class="line">            plan.task = task</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第4次，也是最后一次，传入用例的处理结果</span></span><br><span class="line">        self.presenter.show_plans(</span><br><span class="line">            count=count,</span><br><span class="line">            plans=plans,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>在构造方法中注入<code>presenter</code>的缺点在于用例的<code>run</code>方法中需要显式地<code>return</code>，否则用例会继续执行下去。</p><h3 id="Python语言特性的运用"><a href="#Python语言特性的运用" class="headerlink" title="Python语言特性的运用"></a>Python语言特性的运用</h3><h4 id="模拟接口——abstractmethodv-s-NotImplementedError"><a href="#模拟接口——abstractmethodv-s-NotImplementedError" class="headerlink" title="模拟接口——abstractmethodv.s.NotImplementedError"></a>模拟接口——<code>abstractmethod</code>v.s.<code>NotImplementedError</code></h4><p>整洁架构的每一层都只会依赖于内层，而内层又对外层一无所知，负责解耦两者的便是编程语言的接口特性。但Python并不像Java那般有<code>interface</code>关键字，因此我利用它的其它一系列特性来模拟出接口：</p><ul><li>用<code>class</code>代替<code>interface</code>，这些类继承自内置模块<code>abc</code>的抽象基类<code>ABC</code>；</li><li>除此之外，这些类中的方法还用同一模块中的<code>abstractmethod</code>装饰，使它们必须由该类的子类全部定义；</li><li>在使用这个接口的位置（例如<code>Use Cases</code>层）用断言<code>assert</code>约束输入参数的类型。</li></ul><p><code>nest</code>中的大部分需要接口的位置我都是用这种手法来做的，但这种方式会给编写单元测试用例带来一些不便：</p><ol><li>因为代码中用<code>assert</code>来检查参数类型，导致传入的参数只能是这个接口或其子类的实例；</li><li>因为接口类继承自<code>ABC</code>，所以必须定义所有被<code>abstractmethod</code>装饰的方法，否则在实例化时就会抛出异常。</li></ol><p>例如，在<code>nest</code>项目的文件<code>tests/use_case/task/test_list.py</code>中，作为白盒测试的人员，我确切地知道类<code>ListTaskUseCase</code>的<code>run</code>方法只会调用它的<code>task_repository</code>的<code>find</code>方法，但在类<code>MockTaskRepository</code>中依然不得不定义基类的每一个方法——尽管它们只有一行<code>pass</code>语句。</p><p>如果愿意放弃一点点的严谨性，那么可以弱化一下上面的接口方案：</p><ol><li>不使用<code>abstractmethod</code>，而是在本应为抽象方法的方法中只留下一句<code>raise NotImplementedError</code>；</li><li>不使用<code>assert</code>检查类型，而是在参数中写上type hint。</li></ol><p>有了第1点，那么在测试用例中就不需要为测试路径上不会调用的方法写多余的定义了。而有了第2点，也就不需要为测试路径上不会引用的属性创建对象了，大可直接传入一个<code>None</code>。选择哪一种都无妨，取决于开发者或团队的口味。</p><h2 id="金坷垃整洁架构的好处都有啥"><a href="#金坷垃整洁架构的好处都有啥" class="headerlink" title="金坷垃整洁架构的好处都有啥"></a><del>金坷垃</del>整洁架构的好处都有啥</h2><p>在《架构整洁之道》的第20章，作者给出了整洁架构的五种优秀特性：</p><ul><li>独立于框架。例如，我可以花不是很大的力气，将<code>nest</code>从<a href="https://flask.palletsprojects.com/en/2.0.x/" target="_blank" rel="noopener">Flask</a>迁移到<a href="http://bottlepy.org/docs/dev/" target="_blank" rel="noopener">Bottle</a>上，尽管并不会无缘无故或频繁地这么做；</li><li>容易测试。例如，在<code>nest</code>项目的目录<code>tests/use_case</code>下的测试用例不需要有任何外部系统的依赖就可以编写并运行；</li><li>独立于用户界面。例如，在<code>nest</code>项目中同一个用例<code>RegistrationUseCase</code>就有HTTP API和命令行两种用户界面：<ul><li>在文件<code>nest/web/controller/registration.py</code>中是HTTP API形态；</li><li>在文件<code>nest/cli/command/register.py</code>中则是命令行形态。</li></ul></li><li>独立于数据库。例如，就像更换Web框架一样，我也可以从MySQL迁移到PostgreSQL中，这对于<code>Entities</code>和<code>Use Cases</code>层的代码而言别无二致；</li><li>独立于外部系统。例如，在<code>fledgling</code>项目中，尽管也定义了一个接口<code>ITaskRepository</code>，但不同于<code>nest</code>中基于数据库的实现子类<code>DatabaseTaskRepository</code>，在<code>fledgling</code>中实现的是基于网络传输的类<code>TaskRepository</code>。但究竟是基于单机数据库，还是身处一个分布式系统（C/S模型）中，<code>Entities</code>和<code>Use Cases</code>层对此是无感知的。</li></ul><h2 id="甘瓜苦蒂——整洁架构的不足"><a href="#甘瓜苦蒂——整洁架构的不足" class="headerlink" title="甘瓜苦蒂——整洁架构的不足"></a>甘瓜苦蒂——整洁架构的不足</h2><h3 id="渗入内层的I-O"><a href="#渗入内层的I-O" class="headerlink" title="渗入内层的I/O"></a>渗入内层的I/O</h3><!-- 无法隐藏的I/O --><!-- 在整洁架构中，为了不在entity层面感知到数据库，但又为了可以最终利用到数据库的事务能力，发明了基于start_transaction/commit/rollback的抽象方法。其中，当需要多个repository联合使用事务时，可以将多个repository传入到start_transaction的参数中。 --><!-- 设计模式的运用 --><!-- Python的module v.s. 单例模式 --><!-- repository.py中的工厂方法模式 --><!-- SOLID原则的体现 --><!-- 书中是如何理解SOLID原则的，给出每一个对应章节的解释。 --><!-- 不同编程语言实践整洁架构的体会 --><!-- Python如何 --><!-- CL如何 --><!-- go如何 -->]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟小于运算符的短路特性</title>
    <link href="https://liutos.github.io/2021/06/26/%E6%A8%A1%E6%8B%9F%E5%B0%8F%E4%BA%8E%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E7%9F%AD%E8%B7%AF%E7%89%B9%E6%80%A7/"/>
    <id>https://liutos.github.io/2021/06/26/模拟小于运算符的短路特性/</id>
    <published>2021-06-26T03:02:53.000Z</published>
    <updated>2022-05-02T03:18:47.058Z</updated>
    
    <content type="html"><![CDATA[<p><del>忆往昔峥嵘岁月稠</del>在Python的语言标准的<a href="https://docs.python.org/3/reference/expressions.html#comparisons" target="_blank" rel="noopener">Comparisions章节</a>中提到</p><blockquote><p>Also unlike C, expressions like a &lt; b &lt; c have the interpretation that is conventional in mathematics</p></blockquote><p>也就是说，在C语言中要写成<code>a &lt; b &amp;&amp; b &lt; c</code>的表达式，在Python中可以写成<code>a &lt; b &lt; c</code>。并且，标准中还提到</p><blockquote><p>Comparisons can be chained arbitrarily, e.g., x &lt; y &lt;= z is equivalent to x &lt; y and y &lt;= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x &lt; y is found to be false).</p></blockquote><p>一般将这种性质成为短路。因此，像<code>2 &lt; 1 &lt; (1 / 0)</code>这样的表达式在Python中不会引发异常，而是返回<code>False</code>。</p><p>Python的小于号能拥有短路特性，是因为它并非一个普通函数，而是有语言层面加持的操作符。而在Common Lisp（下称CL）中，小于号仅仅是一个普通函数，就像Haskell中的小于号也是一个函数一般。不同的是，CL的小于号能接受多于两个的参数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">&lt;</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">-1</span>) <span class="comment">; 结果为NIL</span></span><br></pre></td></tr></table></figure><p>但它并没有短路特性</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">&lt;</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">-1</span> (<span class="name">/</span> <span class="number">1</span> <span class="number">0</span>)) <span class="comment">; 引发名为DIVISION-BY-ZERO的错误</span></span><br></pre></td></tr></table></figure><p>要想模拟出具有短路特性的小于号，必须借助于宏的力量。</p><h1 id="想生成什么样的代码"><a href="#想生成什么样的代码" class="headerlink" title="想生成什么样的代码"></a>想生成什么样的代码</h1><p>要想写出一个宏，必须先设想出它的语法，以及它会展开成什么样的代码。姑且为这个宏起名为<code>less-than</code>，它的语法应当为</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defmacro</span> less-than (<span class="name">form</span> <span class="symbol">&amp;rest</span> more-forms)</span><br><span class="line">  <span class="comment">; TBC</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>至于它的展开结果可以有多种选择。例如，可以<code>(less-than 2 1 (/ 1 0))</code>展开为自身具有短路特性的<code>and</code>形式</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">and</span> (<span class="name">&lt;</span> <span class="number">2</span> <span class="number">1</span>) (<span class="name">&lt;</span> <span class="number">1</span> (<span class="name">/</span> <span class="number">1</span> <span class="number">0</span>)))</span><br></pre></td></tr></table></figure><p>但就像在C语言中用宏朴素地实现计算二者最大值的<code>MAX</code>宏一样，上面的展开方式在一些情况下会招致重复求值</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">less-than</span> <span class="number">1</span> (<span class="name">progn</span> (<span class="name">print</span> 'hello) <span class="number">2</span>) <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>因此，起码要展开为<code>and</code>和<code>let</code>的搭配</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">let</span> ((<span class="name">g917</span> <span class="number">1</span>)</span><br><span class="line">      (<span class="name">g918</span> (<span class="name">progn</span> (<span class="name">print</span> 'hello) <span class="number">2</span>)))</span><br><span class="line">  (<span class="name">and</span> (<span class="name">&lt;</span> g917 g918)</span><br><span class="line">       (<span class="name">let</span> ((<span class="name">g919</span> <span class="number">3</span>))</span><br><span class="line">         (<span class="name">&lt;</span> g918 g919))))</span><br></pre></td></tr></table></figure><p>要想展开为这种结构，可以如这般实现<code>less-than</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defmacro</span> less-than (<span class="name">form</span> <span class="symbol">&amp;rest</span> more-forms)</span><br><span class="line">  (<span class="name">labels</span> ((<span class="name">aux</span> (<span class="name">lhs</span> forms)</span><br><span class="line">             <span class="string">"LHS表示紧接着下一次要比较的、小于号的左操作数。"</span></span><br><span class="line">             (<span class="name">unless</span> forms</span><br><span class="line">               (<span class="name">return-from</span> aux))</span><br><span class="line">             (<span class="name">let*</span> ((<span class="name">rhs</span> (<span class="name">gensym</span>))</span><br><span class="line">                    (<span class="name">rv</span> (<span class="name">aux</span> rhs (<span class="name">rest</span> forms))))</span><br><span class="line">               (<span class="name">if</span> rv</span><br><span class="line">                   `(let ((,rhs ,(first forms)))</span><br><span class="line">                      (and (&lt; ,lhs ,rhs)</span><br><span class="line">                           ,rv))</span><br><span class="line">                   `(&lt; ,lhs ,(first forms))))))</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">null</span> more-forms)</span><br><span class="line">           `(&lt; ,form))</span><br><span class="line">          (<span class="name">t</span></span><br><span class="line">           (<span class="name">let</span> ((<span class="name">lhs</span> (<span class="name">gensym</span>)))</span><br><span class="line">             `(let ((,lhs ,form))</span><br><span class="line">                ,(aux lhs more-forms)))))))</span><br></pre></td></tr></table></figure><p>用上面的输入验证一下是否会导致重复求值</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CL-USER&gt; (<span class="name">macroexpand-1</span> '(less-than <span class="number">1</span> (progn (print 'hello) <span class="number">2</span>) <span class="number">3</span>))</span><br><span class="line">(<span class="name">LET</span> ((<span class="name">#</span><span class="symbol">:G942</span> <span class="number">1</span>))</span><br><span class="line">  (<span class="name">LET</span> ((<span class="name">#</span><span class="symbol">:G943</span> (<span class="name">PROGN</span> (<span class="name">PRINT</span> 'HELLO) <span class="number">2</span>)))</span><br><span class="line">    (<span class="name">AND</span> (<span class="name">&lt;</span> #<span class="symbol">:G942</span> #<span class="symbol">:G943</span>) (<span class="name">&lt;</span> #<span class="symbol">:G943</span> <span class="number">3</span>))))</span><br><span class="line">T</span><br></pre></td></tr></table></figure><h1 id="优化一下"><a href="#优化一下" class="headerlink" title="优化一下"></a>优化一下</h1><p>显然<code>less-than</code>可以优化，只需要简单地运用递归的技巧即可</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defmacro</span> less-than (<span class="name">form</span> <span class="symbol">&amp;rest</span> more-forms)</span><br><span class="line">  (<span class="name">cond</span> ((<span class="name">&lt;=</span> (<span class="name">length</span> more-forms) <span class="number">1</span>)</span><br><span class="line">         `(&lt; ,form ,@more-forms))</span><br><span class="line">        (<span class="name">t</span></span><br><span class="line">         (<span class="name">let</span> ((<span class="name">lhs</span> (<span class="name">gensym</span>))</span><br><span class="line">               (<span class="name">rhs</span> (<span class="name">gensym</span>)))</span><br><span class="line">           `(let ((,lhs ,form)</span><br><span class="line">                  (,rhs ,(first more-forms)))</span><br><span class="line">              (and (&lt; ,lhs ,rhs)</span><br><span class="line">                   (less-than ,rhs ,@(rest more-forms))))))))</span><br></pre></td></tr></table></figure><p>展开后的代码简短得多</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CL-USER&gt; (<span class="name">macroexpand-1</span> '(less-than <span class="number">1</span> (progn (print 'hello) <span class="number">2</span>) <span class="number">3</span>))</span><br><span class="line">(<span class="name">LET</span> ((<span class="name">#</span><span class="symbol">:G955</span> <span class="number">1</span>) (<span class="name">#</span><span class="symbol">:G956</span> (<span class="name">PROGN</span> (<span class="name">PRINT</span> 'HELLO) <span class="number">2</span>)))</span><br><span class="line">  (<span class="name">AND</span> (<span class="name">&lt;</span> #<span class="symbol">:G955</span> #<span class="symbol">:G956</span>) (<span class="name">LESS-THAN</span> #<span class="symbol">:G956</span> <span class="number">3</span>)))</span><br><span class="line">T</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="实战CommonLisp" scheme="https://liutos.github.io/categories/%E5%AE%9E%E6%88%98CommonLisp/"/>
    
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="macro" scheme="https://liutos.github.io/tags/macro/"/>
    
      <category term="宏" scheme="https://liutos.github.io/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>从AOP到method-combination</title>
    <link href="https://liutos.github.io/2021/06/14/%E4%BB%8EAOP%E5%88%B0method-combination/"/>
    <id>https://liutos.github.io/2021/06/14/从AOP到method-combination/</id>
    <published>2021-06-14T12:28:28.000Z</published>
    <updated>2021-06-14T12:30:36.060Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“实战Elisp”系列旨在讲述我使用Elisp定制Emacs的经验，抛砖引玉，还请广大Emacs同好不吝赐教——如果真的有广大Emacs用户的话，哈哈哈。</p></blockquote><p>Emacs的org-mode用的是一门叫Org的标记语言，正如大部分的标记语言那样，它也支持无序列表和检查清单——前者以<code>-</code>（一个连字符、一个空格）为前缀，后者以<code>- [ ]</code>或<code>- [x]</code>为前缀（比无序列表多了一对方括号及中间的字母<code>x</code>）</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210614/org模式中checkbox的语法.jpg" alt=""></p><p>此外，org-mode还为编辑这两种列表提供了快速插入新一行的快捷键<code>M-RET</code>（即按住<code>alt</code>键并按下回车键）。如果光标位于无序列表中，那么新的一行将会自动插入<code>-</code>前缀。遗憾的是，如果光标位于检查清单中，那么新一行并没有自动插入一对方括号</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210614/在Emacs中用alt回车添加一行.gif" alt=""></p><p>每次都要手动敲入<code>[ ]</code>还挺繁琐的。好在这是Emacs，它是可扩展的、可定制的。只需敲几行代码，就可以让Emacs代劳输入方括号了。</p><h1 id="Emacs的AOP特性——advice-add"><a href="#Emacs的AOP特性——advice-add" class="headerlink" title="Emacs的AOP特性——advice-add"></a>Emacs的AOP特性——<code>advice-add</code></h1><p>借助Emacs的<code>describe-key</code>功能，可以知道在一个<code>org-mode</code>的文件中按下<code>M-RET</code>时，Emacs会调用到函数<code>org-insert-item</code>上。要想让<code>M-RET</code>实现自动追加方括号的效果，马上可以想到简单粗暴的办法：</p><ul><li>定义一个新的函数，并将<code>M-RET</code>绑定到它身上；</li><li>重新定义<code>org-insert-item</code>函数，使其追加方括号；</li></ul><p>但不管是上述的哪一种，都需要连带着重新实现插入连字符、空格前缀的已有功能。有一种更温和的办法可以在现有的<code>org-insert-item</code>的基础上扩展它的行为，那就是Emacs的<code>advice</code>特性。</p><p><code>advice</code>是面向切面编程范式的一种，使用Emacs的<code>advice-add</code>函数，可以在一个普通的函数被调用前或被调用后捎带做一些事情——比如追加一对方括号。对于这两个时机，分别可以直接用<code>advice-add</code>的<code>:before</code>和<code>:after</code>来实现，但用在这里都不合适，因为：</p><ul><li>检测是否位于检查清单中，需要在调用<code>org-insert-item</code>前做；</li><li>追加一对方括号，则需要在<code>org-insert-item</code>之后做。</li></ul><p>因此，正确的做法是使用<code>:around</code>来修饰原始的<code>org-insert-item</code>函数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">cl-defun</span> lt-around-org-insert-item (<span class="name">oldfunction</span> <span class="symbol">&amp;rest</span> args)</span><br><span class="line">  <span class="string">"在调用了org-insert-item后识时务地追加 [ ]这样的内容。"</span></span><br><span class="line">  (<span class="name">let</span> ((<span class="name">is-checkbox</span> <span class="literal">nil</span>)</span><br><span class="line">        (<span class="name">line</span> (<span class="name">buffer-substring-no-properties</span> (<span class="name">line-beginning-position</span>) (<span class="name">line-end-position</span>))))</span><br><span class="line">    <span class="comment">;; 检查当前行是否为checkbox</span></span><br><span class="line">    (<span class="name">when</span> (<span class="name">string-match-p</span> <span class="string">"- \\[.\\]"</span> line)</span><br><span class="line">      (<span class="name">setf</span> is-checkbox <span class="literal">t</span>))</span><br><span class="line">    <span class="comment">;; 继续使用原来的org-insert-item插入文本</span></span><br><span class="line">    (<span class="name">apply</span> oldfunction args)</span><br><span class="line">    <span class="comment">;; 决定要不要追加“ [ ]”字符串</span></span><br><span class="line">    (<span class="name">when</span> is-checkbox</span><br><span class="line">      (<span class="name">insert</span> <span class="string">"[ ] "</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name">advice-add</span> 'org-insert-item <span class="symbol">:around</span> #'lt-around-org-insert-item)</span><br></pre></td></tr></table></figure><p>这下子，<code>M-RET</code>对检查清单也一视同仁了</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210614/advice后的效果.gif" alt=""></p><h1 id="Common-Lisp的method-combination"><a href="#Common-Lisp的method-combination" class="headerlink" title="Common Lisp的method combination"></a>Common Lisp的<code>method combination</code></h1><p><code>advice-add</code>的<code>:after</code>、<code>:around</code>，以及<code>:before</code>在Common Lisp中有着完全同名的等价物，只不过不是用一个叫<code>advice-add</code>的函数，而是喂给一个叫<code>defmethod</code>的宏。举个例子，用<code>defmethod</code>可以定义出一个多态的<code>len</code>函数，对不同类型的入参执行不同的逻辑</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defgeneric</span> len (<span class="name">x</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> len ((<span class="name">x</span> string))</span><br><span class="line">  (<span class="name">length</span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> len ((<span class="name">x</span> hash-table))</span><br><span class="line">  (<span class="name">hash-table-count</span> x))</span><br></pre></td></tr></table></figure><p>然后为其中参数类型为字符串的特化版本定义对应的<code>:after</code>、<code>:around</code>，以及<code>:before</code>修饰过的方法</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defmethod</span> len <span class="symbol">:after</span> ((<span class="name">x</span> string))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"after len~%"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> len <span class="symbol">:around</span> ((<span class="name">x</span> string))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"around中调用len前~%"</span>)</span><br><span class="line">  (<span class="name">prog1</span></span><br><span class="line">      (<span class="name">call-next-method</span>)</span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> <span class="string">"around中调用len后~%"</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> len <span class="symbol">:before</span> ((<span class="name">x</span> string))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"before len~%"</span>))</span><br></pre></td></tr></table></figure><p>这一系列方法的调用规则为：</p><ol><li>先调用<code>:around</code>修饰的方法；</li><li>由于上述方法中调用了<code>call-next-method</code>，因此再调用<code>:before</code>修饰的方法；</li><li>调用不加修饰的方法（在CL中这称为<code>primary</code>方法）；</li><li>再调用<code>:after</code>修饰的方法；</li><li>最后，又回到了<code>:around</code>中调用<code>call-next-method</code>的位置。</li></ol><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210614/实际效果.jpg" alt=""></p><p>咋看之下，Emacs的<code>advice-add</code>支持的修饰符要多得多，实则不然。在CL中，<code>:after</code>、<code>:around</code>，以及<code>:before</code>同属于一个名为<code>standard</code>的<code>method combination</code>，而CL还内置了其它的<code>method combination</code>。在<a href="https://lispcookbook.github.io/cl-cookbook/clos.html#method-qualifiers-before-after-around" target="_blank" rel="noopener">《Other method combinations》</a>一节中，作者演示了<code>progn</code>和<code>list</code>的例子。</p><p>如果想要模拟Emacs的<code>advice-add</code>所支持的其它修饰符，那么就必须定义新的<code>method combination</code>了。</p><h1 id="可编程的编程语言——define-method-combination"><a href="#可编程的编程语言——define-method-combination" class="headerlink" title="可编程的编程语言——define-method-combination"></a>可编程的编程语言——<code>define-method-combination</code></h1><p>曾经我以为，<code>defmethod</code>只能接受<code>:after</code>、<code>:around</code>，以及<code>:before</code>，认为这三个修饰符是必须在语言一级支持的特性。直到有一天我闯入了LispWorks的<a href="http://www.lispworks.com/documentation/HyperSpec/Body/m_defi_4.htm" target="_blank" rel="noopener">define-method-combination</a>词条中，才发现它们也是三个平凡的修饰符而已。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define-method-combination</span> standard ()</span><br><span class="line">  ((<span class="name">around</span> (<span class="symbol">:around</span>))</span><br><span class="line">   (<span class="name">before</span> (<span class="symbol">:before</span>))</span><br><span class="line">   (<span class="name">primary</span> () <span class="symbol">:required</span> <span class="literal">t</span>)</span><br><span class="line">   (<span class="name">after</span> (<span class="symbol">:after</span>)))</span><br><span class="line">  (<span class="name">flet</span> ((<span class="name">call-methods</span> (<span class="name">methods</span>)</span><br><span class="line">           (<span class="name">mapcar</span> #'(lambda (method)</span><br><span class="line">                       `(call-method ,method))</span><br><span class="line">                   methods)))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">form</span> (<span class="name">if</span> (<span class="name">or</span> before after (<span class="name">rest</span> primary))</span><br><span class="line">                    `(multiple-value-prog1</span><br><span class="line">                         (progn ,@(call-methods before)</span><br><span class="line">                                (call-method ,(first primary)</span><br><span class="line">                                             ,(rest primary)))</span><br><span class="line">                       ,@(call-methods (reverse after)))</span><br><span class="line">                    `(call-method ,(first primary)))))</span><br><span class="line">      (<span class="name">if</span> around</span><br><span class="line">          `(call-method ,(first around)</span><br><span class="line">                        (,@(rest around)</span><br><span class="line">                           (make-method ,form)))</span><br><span class="line">          form))))</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210614/DIO就是厉害梗图.jpg" alt=""></p><p>秉持“柿子要挑软的捏”的原则，让我来尝试模拟出<code>advice-add</code>的<code>:after-while</code>和<code>:before-while</code>的效果吧。</p><p><code>:after-while</code>和<code>:before-while</code>的效果还是很容易理解的</p><blockquote><p>Call function after the old function and only if the old function returned non-<code>nil</code>.</p><p>Call function before the old function and don’t call the old function if function returns <code>nil</code>.</p></blockquote><p>因此，由<code>define-method-combination</code>生成的<code>form</code>中（犹记得伞哥在《PCL》中将它翻译为形式），势必要：</p><ul><li>检查是否有被<code>:before-while</code>修饰的方法；</li><li>如果有，检查调用了被<code>:before-while</code>修饰的方法后的返回值是否为<code>NIL</code>；</li><li>如果没有，或者被<code>:before-while</code>修饰的方法的返回值为非<code>NIL</code>，便调用<code>primary</code>方法；</li><li>如果有被<code>:after-while</code>修饰的方法，并且<code>primary</code>方法的返回值不为<code>NIL</code>，就调用这些方法；</li><li>返回<code>primary</code>方法的返回值。</li></ul><p>为了简单起见，尽管<code>after-while</code>和<code>before-while</code>变量指向的是多个“可调用”的方法，但这里只调用“最具体”的一个。</p><p>给这个新的<code>method combination</code>取名为<code>emacs-advice</code>，其具体实现已是水到渠成</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define-method-combination</span> emacs-advice ()</span><br><span class="line">  ((<span class="name">after-while</span> (<span class="symbol">:after-while</span>))</span><br><span class="line">   (<span class="name">before-while</span> (<span class="symbol">:before-while</span>))</span><br><span class="line">   (<span class="name">primary</span> () <span class="symbol">:required</span> <span class="literal">t</span>))</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">after-while-fn</span> (<span class="name">first</span> after-while))</span><br><span class="line">        (<span class="name">before-while-fn</span> (<span class="name">first</span> before-while))</span><br><span class="line">        (<span class="name">result</span> (<span class="name">gensym</span>)))</span><br><span class="line">    `(let ((,result (when ,before-while-fn</span><br><span class="line">                      (call-method ,before-while-fn))))</span><br><span class="line">       (when (or (null ,before-while-fn)</span><br><span class="line">                 ,result)</span><br><span class="line">         (let ((,result (call-method ,(first primary))))</span><br><span class="line">           (when (and ,result ,after-while-fn)</span><br><span class="line">             (call-method ,after-while-fn))</span><br><span class="line">           ,result)))))</span><br></pre></td></tr></table></figure><p><code>call-method</code>（以及它的搭档<code>make-method</code>）是专门用于在<code>define-method-combination</code>中调用传入的方法的宏。</p><p>用一系列<code>foobar</code>方法来验证一番</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defgeneric</span> foobar (<span class="name">x</span>)</span><br><span class="line">  (<span class="symbol">:method-combination</span> emacs-advice))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> foobar (<span class="name">x</span>)</span><br><span class="line">  'hello)</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> foobar <span class="symbol">:after-while</span> (<span class="name">x</span>)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> x))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"for side effect~%"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> foobar <span class="symbol">:before-while</span> (<span class="name">x</span>)</span><br><span class="line">  (<span class="name">evenp</span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name">foobar</span> <span class="number">1</span>) <span class="comment">;; 返回NIL</span></span><br><span class="line">(<span class="name">foobar</span> <span class="number">2</span>) <span class="comment">;; 打印“fo side effect”，并返回HELLO</span></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>尽管我对CL赏识有加，但越是琢磨<code>define-method-combination</code>，就越会发现编程语言的能力是有极限的<del>，除非超越编程语言</del>。比如Emacs的<code>advice-add</code>所支持的<code>:filter-args</code>和<code>:filter-return</code>就无法用<code>define-method-combination</code>优雅地实现出来——并不是完全不行，只不过需要将它们合并在由<code>:around</code>修饰的方法之中。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="实战Elisp" scheme="https://liutos.github.io/categories/%E5%AE%9E%E6%88%98Elisp/"/>
    
    
      <category term="org-mode" scheme="https://liutos.github.io/tags/org-mode/"/>
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="elisp" scheme="https://liutos.github.io/tags/elisp/"/>
    
      <category term="emacs" scheme="https://liutos.github.io/tags/emacs/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="oop" scheme="https://liutos.github.io/tags/oop/"/>
    
      <category term="实战Elisp" scheme="https://liutos.github.io/tags/%E5%AE%9E%E6%88%98Elisp/"/>
    
  </entry>
  
  <entry>
    <title>非递归遍历二叉树到底有什么用</title>
    <link href="https://liutos.github.io/2021/05/03/%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/"/>
    <id>https://liutos.github.io/2021/05/03/非递归遍历二叉树到底有什么用/</id>
    <published>2021-05-03T03:58:11.000Z</published>
    <updated>2022-05-02T03:18:18.518Z</updated>
    
    <content type="html"><![CDATA[<p>准备过互联网公司的服务端岗位面试的人，对于二叉树的三种遍历方式想必是如数家珍。假设以类<code>BinaryTree</code>定义一棵二叉树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, left, right, value)</span>:</span></span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure><p>实现一个前序遍历的算法便是信手拈来的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(tree, func)</span>:</span></span><br><span class="line">    <span class="string">"""前序遍历二叉树的每个节点。"""</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    func(tree.value)</span><br><span class="line">    preorder_traversal(tree.left, func)</span><br><span class="line">    preorder_traversal(tree.right, func)</span><br></pre></td></tr></table></figure><p>随着行业曲率的增大，要求写出不使用递归的版本也没什么过分的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterative_preorder_traversal</span><span class="params">(tree, func)</span>:</span></span><br><span class="line">    nodes = [tree]</span><br><span class="line">    <span class="keyword">while</span> len(nodes) &gt; <span class="number">0</span>:</span><br><span class="line">        node = nodes.pop()</span><br><span class="line">        func(node)</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            nodes.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            nodes.append(node.left)</span><br></pre></td></tr></table></figure><p>一直以来，我觉得这种用一个显式的栈来代替递归过程中隐式的栈的做法就是镜花水月。但最近却找到了它的一个用武之地——用于实现<code>iterator</code>。</p><h1 id="iterator是个啥？"><a href="#iterator是个啥？" class="headerlink" title="iterator是个啥？"></a><code>iterator</code>是个啥？</h1><p>这年头，<code>iterator</code>已经不是什么新鲜事物了，许多语言中都有支持，维基百科上有一份<a href="https://en.wikipedia.org/wiki/Iterator#In_different_programming_languages" target="_blank" rel="noopener">清单</a>列出了比较知名的语言的<code>iterator</code>特性。按照Python官方的术语表中的<a href="https://docs.python.org/3/glossary.html#term-iterator" target="_blank" rel="noopener">定义</a>，<code>iterator</code>表示一个数据流，反复调用其<code>__next__</code>方法可以一个接一个地返回流中的下一项数据。将内置函数<code>iter</code>作用于<code>list</code>、<code>str</code>、<code>tuple</code>类型的对象，可以获得相应的迭代器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat get_iter.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -*- coding: utf8 -*-</span></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    values = [</span><br><span class="line">        [1, 2, 3],</span><br><span class="line">        'Hello, world!',</span><br><span class="line">        (True, None),</span><br><span class="line">    ]</span><br><span class="line">    for v in values:</span><br><span class="line">        print('type of iter(&#123;&#125;) is &#123;&#125;'.format(v, type(iter(v))))</span><br><span class="line"><span class="meta">$</span><span class="bash"> python get_iter.py</span></span><br><span class="line">type of iter([1, 2, 3]) is &lt;class 'list_iterator'&gt;</span><br><span class="line">type of iter(Hello, world!) is &lt;class 'str_iterator'&gt;</span><br><span class="line">type of iter((True, None)) is &lt;class 'tuple_iterator'&gt;</span><br></pre></td></tr></table></figure><h1 id="写一个前序遍历的iterator"><a href="#写一个前序遍历的iterator" class="headerlink" title="写一个前序遍历的iterator"></a>写一个前序遍历的<code>iterator</code></h1><p>一个<code>iterator</code>对象必须要实现<code>__iter__</code>和<code>__next__</code>方法：</p><ul><li><code>__iter__</code>只需要返回<code>iterator</code>对象自身即可；</li><li>顾名思义，<code>__next__</code>负责返回下一个元素。</li></ul><p>仔细观察一下前文中的<code>iterative_preorder_traversal</code>函数可以看出：</p><ul><li><code>nodes = [tree]</code>属于初始化逻辑；</li><li><code>len(nodes) &gt; 0</code>用于判断是应当抛出<code>StopIteration</code>，还是应当继续返回下一个值（<code>nodes.pop()</code>）；</li><li>最后四行就是负责填充<code>nodes</code>，好让它可以在下一次调用<code>__next__</code>的时候有值可以返回的。</li></ul><p>到这里，<code>iterator</code>的具体实现代码已经呼之欲出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreePreorderIterator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        nodes = []</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            nodes.append(root)</span><br><span class="line">        self.nodes = nodes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.nodes) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        node = self.nodes.pop()</span><br><span class="line">        <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.nodes.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.nodes.append(node.left)</span><br><span class="line">        <span class="keyword">return</span> node.value</span><br></pre></td></tr></table></figure><p>构造一棵这样的满二叉树</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210503/满二叉树.png" alt=""></p><p>用<code>BinaryTreePreorderIterator</code>可以正确地打印出每一个节点的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tree = BinaryTree(</span><br><span class="line">        BinaryTree(</span><br><span class="line">            BinaryTree(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="number">1</span>), </span><br><span class="line">            BinaryTree(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="number">3</span>), </span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">        ),</span><br><span class="line">        BinaryTree(</span><br><span class="line">            BinaryTree(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="number">5</span>), </span><br><span class="line">            BinaryTree(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="number">7</span>), </span><br><span class="line">            <span class="number">6</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="number">4</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> BinaryTreePreorderIterator(tree):</span><br><span class="line">        print(<span class="string">'&#123;&#125;\t'</span>.format(n), end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 打印内容为：4213657</span></span><br></pre></td></tr></table></figure><h1 id="iterator的优势"><a href="#iterator的优势" class="headerlink" title="iterator的优势"></a><code>iterator</code>的优势</h1><p>显然，<code>iterator</code>比起<code>preorder_traversal</code>更为灵活——很容易在<code>for-in</code>循环内添加各种各样的控制逻辑：用<code>continue</code>跳过一些值，或者用<code>break</code>提前结束遍历过程。这些在函数<code>preorder_traversal</code>中做起来会比较别扭。</p><p>聪明的你应该已经发现了，大可不必将<code>preorder_traversal</code>拆解到一个构造方法和一个<code>__next__</code>方法中。用<code>generator</code>写起来明明更加直观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_generator</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="string">"""返回一个能够以前序遍历的次序遍历二叉树节点的generator。"""</span></span><br><span class="line">    nodes = [tree]</span><br><span class="line">    <span class="keyword">while</span> len(nodes) &gt; <span class="number">0</span>:</span><br><span class="line">        node = nodes.pop()</span><br><span class="line">        <span class="keyword">yield</span> node.value</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            nodes.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            nodes.append(node.left)</span><br></pre></td></tr></table></figure><p>但是，很多语言并不支持<code>generator</code>。与之相比，<code>iterator</code>要亲民得多，更容易移植。例如，即使是Common Lisp这种一穷二白的语言，也可以实现和Python的<code>iterator</code>以及<code>for</code>类似的效果</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">in-package</span> #<span class="symbol">:cl-user</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">defpackage</span> #<span class="symbol">:com</span>.liutos.binary-tree</span><br><span class="line">  (<span class="symbol">:use</span> #<span class="symbol">:cl</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">in-package</span> #<span class="symbol">:com</span>.liutos.binary-tree)</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> preorder-iterator ()</span><br><span class="line">  ((<span class="name">nodes</span></span><br><span class="line">    <span class="symbol">:initform</span> <span class="literal">nil</span>)</span><br><span class="line">   (<span class="name">tree</span></span><br><span class="line">    <span class="symbol">:initarg</span> <span class="symbol">:tree</span>))</span><br><span class="line">  (<span class="symbol">:documentation</span> <span class="string">"前序遍历二叉树的迭代器"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> initialize-instance <span class="symbol">:after</span> ((<span class="name">instance</span> preorder-iterator) <span class="symbol">&amp;key</span>)</span><br><span class="line">  (<span class="name">with-slots</span> (<span class="name">nodes</span> tree)</span><br><span class="line">      instance</span><br><span class="line">    (<span class="name">when</span> tree</span><br><span class="line">      (<span class="name">push</span> tree nodes))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defgeneric</span> next (<span class="name">iterator</span>)</span><br><span class="line">  (<span class="symbol">:documentation</span> <span class="string">"返回迭代器的下一个值。"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">define-condition</span> stop-iteration (<span class="name">error</span>)</span><br><span class="line">  ()</span><br><span class="line">  (<span class="symbol">:documentation</span> <span class="string">"Python中StopIteration异常的等价物。"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> next ((<span class="name">iterator</span> preorder-iterator))</span><br><span class="line">  (<span class="name">with-slots</span> (<span class="name">nodes</span>) iterator</span><br><span class="line">    (<span class="name">when</span> (<span class="name">null</span> nodes)</span><br><span class="line">      (<span class="name">error</span> 'stop-iteration))</span><br><span class="line"></span><br><span class="line">    (<span class="name">let</span> ((<span class="name">node</span> (<span class="name">pop</span> nodes)))</span><br><span class="line">      <span class="comment">;; 一个节点的结构为：(值 左子树 右子树)</span></span><br><span class="line">      (<span class="name">when</span> (<span class="name">third</span> node)</span><br><span class="line">        (<span class="name">push</span> (<span class="name">third</span> node) nodes))</span><br><span class="line">      (<span class="name">when</span> (<span class="name">second</span> node)</span><br><span class="line">        (<span class="name">push</span> (<span class="name">second</span> node) nodes))</span><br><span class="line">      (<span class="name">first</span> node))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmacro</span> for-in (<span class="name">var</span> iterator <span class="symbol">&amp;body</span> forms)</span><br><span class="line">  <span class="string">"将iterator中的值逐个绑定到变量var上，并执行forms中的表达式。"</span></span><br><span class="line">  (<span class="name">let</span> ((<span class="name">iter</span> (<span class="name">gensym</span>)))</span><br><span class="line">    `(let ((,iter ,iterator))</span><br><span class="line">       (handler-case</span><br><span class="line">           (loop</span><br><span class="line">              (let ((,var (next ,iter)))</span><br><span class="line">                ,@forms))</span><br><span class="line">         (stop-iteration (c)</span><br><span class="line">           (declare (ignorable c)))))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defparameter</span> *tree*</span><br><span class="line">  '(<span class="number">4</span> (<span class="number">2</span> (<span class="number">1</span> <span class="literal">nil</span> <span class="literal">nil</span>) (<span class="number">3</span> <span class="literal">nil</span> <span class="literal">nil</span>)) (<span class="number">6</span> (<span class="number">5</span> <span class="literal">nil</span> <span class="literal">nil</span>) (<span class="number">7</span> <span class="literal">nil</span> <span class="literal">nil</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> test-preorder-iterator ()</span><br><span class="line">  <span class="string">"测试前序遍历迭代器。"</span></span><br><span class="line">  (<span class="name">for-in</span> n (<span class="name">make-instance</span> 'preorder-iterator</span><br><span class="line">                           <span class="symbol">:tree</span> *tree*)</span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~D~C"</span> n #\Tab)))</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>中序遍历和后序遍历也可以写成迭代器，证明略。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="算法" scheme="https://liutos.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="二叉树" scheme="https://liutos.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://liutos.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="python" scheme="https://liutos.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>当你SET的时候，Redis到底在SET些什么</title>
    <link href="https://liutos.github.io/2021/04/17/%E5%BD%93%E4%BD%A0SET%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8CRedis%E5%88%B0%E5%BA%95%E5%9C%A8SET%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    <id>https://liutos.github.io/2021/04/17/当你SET的时候，Redis到底在SET些什么/</id>
    <published>2021-04-17T07:09:24.000Z</published>
    <updated>2021-04-17T07:14:19.543Z</updated>
    
    <content type="html"><![CDATA[<p>准备过互联网公司的服务端岗位面试的人，对Redis中的5种数据类型想必是如数家珍。而网上很多面试题里也会出现这道题目</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210417/面试题例子1.jpg" alt="来自https://blog.csdn.net/ThinkWon/article/details/103522351"></p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210417/面试题例子2.jpg" alt="来自https://juejin.cn/post/6844903982066827277"></p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210417/面试题例子3.jpg" alt="来自https://mikechen.cc/3313.html"></p><p>随着行业曲率的增大，光是知道有这些数据类型已经不够了，还得知道同一个类型也有不同的底层数据结构。例如同样是<code>string</code>类型，不同内容或不同长度会采用不同的编码方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 "1"</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET key2 "value"</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET key3 "Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp."</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; TYPE key1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; TYPE key2</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; TYPE key3</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING key1</span><br><span class="line">"int"</span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING key2</span><br><span class="line">"embstr"</span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING key3</span><br><span class="line">"raw"</span><br></pre></td></tr></table></figure><p>而<code>hash</code>类型也有两种底层实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  HSET myhash field1 "Hello"</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt;  HSET myhash2 field1 "Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp."</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING myhash</span><br><span class="line">"ziplist"</span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING myhash2</span><br><span class="line">"hashtable"</span><br></pre></td></tr></table></figure><p>不知道你是否曾经好奇过，上文中的<code>key1</code>、<code>key2</code>、<code>key3</code>、<code>myhash</code>，以及<code>myhash2</code>这些键，与它们各自的值（前三个为<code>string</code>，后两个为<code>hash</code>）之间的关系又是存储在什么数据结构中的呢？</p><p>答案在意料之外，情理之中：键与值的关系，也是存储在一张哈希表中的，并且正是上文中的<code>hashtable</code>。</p><p>求证的办法当然是阅读Redis的源代码。</p><h1 id="Redis命令的派发逻辑"><a href="#Redis命令的派发逻辑" class="headerlink" title="Redis命令的派发逻辑"></a>Redis命令的派发逻辑</h1><p>阅读Redis的源码是比较轻松愉快的，一是因为其源码由简单易懂的C语言编写，二是因为源码仓库的<code>README.md</code>中对内部实现做了一番高屋建瓴的介绍。在<code>README.md</code>的<a href="https://github.com/redis/redis#serverc" target="_blank" rel="noopener">server.c</a>一节中，道出了有关命令派发的两个关键点</p><blockquote><p><code>call()</code> is used in order to call a given command in the context of a given client.</p></blockquote><blockquote><p>The global variable <code>redisCommandTable</code> defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of  each command.</p></blockquote><p>位于文件<code>src/server.c</code>中的变量<code>redisCommandTable</code>定义了所有可以在Redis中使用的命令——为什么一个C语言项目里要用<code>camelCase</code>这种格格不入的命名风格呢——它的元素的类型为<code>struct redisCommand</code>，其中：</p><ul><li><code>name</code>存放命令的名字；</li><li><code>proc</code>存放实现命令的C函数的指针；</li></ul><p>比如高频使用的<code>GET</code>命令在<code>redisCommandTable</code>中就是这样定义的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"get"</span>,getCommand,<span class="number">2</span>,</span><br><span class="line"> <span class="string">"read-only fast @string"</span>,</span><br><span class="line"> <span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br></pre></td></tr></table></figure><p>身为一名老解释器爱好者，对这种套路的代码当然是不会陌生的。我也曾在写过的、跑不起来的玩具解释器上用过类似的手法</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210417/liutscm中的类似代码.jpg" alt=""></p><p>Redis收到一道需要执行的命令后，根据命令的名字用<code>lookupCommand</code>找到一个命令（是个<code>struct redisCommand</code>类型的结构体），然后<code>call</code>函数做的事情就是调用它的<code>proc</code>成员所指向的函数而已</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-&gt;cmd-&gt;proc(c);</span><br></pre></td></tr></table></figure><p>那么接下来，就要看看<code>SET</code>命令对应的C函数究竟做了些什么了。</p><h1 id="SET命令的实现"><a href="#SET命令的实现" class="headerlink" title="SET命令的实现"></a><code>SET</code>命令的实现</h1><p><code>redisCommonTable</code>中下标为2的元素正是<code>SET</code>命令的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Note that we can't flag set as fast, since it may perform an</span></span><br><span class="line"><span class="comment"> * implicit DEL of a large key. */</span></span><br><span class="line">&#123;<span class="string">"set"</span>,setCommand,<span class="number">-3</span>,</span><br><span class="line"> <span class="string">"write use-memory @string"</span>,</span><br><span class="line"> <span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br></pre></td></tr></table></figure><p>其中函数<code>setCommand</code>定义在文件<code>t_string.c</code>中，它根据参数中是否有传入<code>NX</code>、<code>XX</code>、<code>EX</code>等选项计算出一个<code>flags</code>后，便调用<code>setGenericCommand</code>——顾名思义，这是一个通用的<code>SET</code>命令，它同时被<code>SET</code>、<code>SETNX</code>、<code>SETEX</code>，以及<code>PSETEX</code>四个Redis命令的实现函数所共用。</p><p><code>setGenericCommand</code>调用了<code>genericSetKey</code>，后者定义在文件<code>db.c</code>中。尽管该函数上方的注释写着</p><blockquote><p>All the new keys in the database should be created via this interface.</p></blockquote><p>但<del>人生不如意事十之八九</del>事实并非如此。例如在命令<code>RPUSH</code>的实现函数<code>rpushCommand</code>中，调用了<code>pushGenericCommand</code>，后者直接调用了<code>dbAdd</code>往Redis中存入键和列表对象的关系。</p><p>言归正传。根据键存在与否，<code>genericSetKey</code>会调用<code>dbAdd</code>或<code>dbOverwrite</code>。而在<code>dbAdd</code>中，最终调用了<code>dictAdd</code>将键与值存入数据库中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Add an element to the target hash table */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dictAdd</span><span class="params">(dict *d, <span class="keyword">void</span> *key, <span class="keyword">void</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dictEntry *entry = dictAddRaw(d,key,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!entry) <span class="keyword">return</span> DICT_ERR;</span><br><span class="line">    dictSetVal(d, entry, val);</span><br><span class="line">    <span class="keyword">return</span> DICT_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们知道了，使用<code>SET</code>命令时传入的<code>key</code>和<code>value</code>，是存储在一个<code>dict</code>类型的数据结构中。</p><h1 id="HSET命令的实现"><a href="#HSET命令的实现" class="headerlink" title="HSET命令的实现"></a><code>HSET</code>命令的实现</h1><p>依葫芦画瓢，Redis的<code>HSET</code>命令由位于文件<code>t_hash.c</code>中的函数<code>hsetCommand</code>实现，它会尝试转换要操作的<code>hash</code>值的编码方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashTypeTryConversion(o,c-&gt;argv,<span class="number">2</span>,c-&gt;argc<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>如果<code>hashTypeTryConversion</code>发现要写入哈希表的任何一个键或者值的长度超过了<code>server.hash_max_ziplist_value</code>所规定的值，就会将<code>hash</code>类型的编码从<code>ziplist</code>转换为<code>hashtable</code>。<code>server.hash_max_ziplist_value</code>的值在文件<code>config.c</code>中通过宏设置，默认值为64——这正是上文中<code>myhash2</code>所对应的值的编码为<code>hashtable</code>的原因。</p><p>将思绪拉回到函数<code>hsetCommand</code>中。做完编码的转换后，它调用函数<code>hashTypeSet</code>，在编码为<code>hashtable</code>的世界线中，同样调用了<code>dictAdd</code>实现往哈希表中写入键值对。</p><p>殊途同归</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210417/path_to_dbAdd.png" alt=""></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>因此，在Redis中用以维持每一个键与其对应的值——这些值也许是<code>string</code>，也许是<code>list</code>，也许是<code>hash</code>——的关系的数据结构，与Redis中的一系列操作哈希表的命令——也许是<code>HSET</code>、也许<code>HGET</code>，也许是<code>HDEL</code>——所用的数据结构，不能说是毫不相关，起码是一模一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多重返回值的阵营九宫格</title>
    <link href="https://liutos.github.io/2021/03/14/%E5%A4%9A%E9%87%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%98%B5%E8%90%A5%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    <id>https://liutos.github.io/2021/03/14/多重返回值的阵营九宫格/</id>
    <published>2021-03-14T07:52:34.000Z</published>
    <updated>2021-03-14T07:57:18.761Z</updated>
    
    <content type="html"><![CDATA[<p>通常在糊业务代码的时候，不管是函数、方法，还是宏，都只会有一个返回值。比如在C语言用于检查一个字符是否为阿拉伯数字的<code>isdigit</code>函数就只会返回是（1）或否（0）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"isdigit('%c') is %d\n"</span>, c, <span class="built_in">isdigit</span>(c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有时候如果一个函数、方法，或宏可以返回多个值的话会更加方便。例如，在Python中<code>dict</code>类型有一个实例方法<code>get</code>，它可以取得<code>dict</code>实例中与给定的键对应的值。但如果有一个键在字典中的值为<code>None</code>，那么光凭<code>get</code>的返回值无法准确判断这个键是否存在——除非你给它一个非<code>None</code>的默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(d, key)</span>:</span></span><br><span class="line">    print(<span class="string">"d.get('&#123;0&#125;') is &#123;1&#125;\t'&#123;0&#125;' in d is &#123;2&#125;"</span>.format(key, d.get(key), key <span class="keyword">in</span> d))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    d = &#123;</span><br><span class="line">        <span class="string">'foo'</span>: <span class="string">'bar'</span>,</span><br><span class="line">        <span class="string">'baz'</span>: <span class="keyword">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    test(d, <span class="string">'foo'</span>)</span><br><span class="line">    test(d, <span class="string">'baz'</span>)</span><br></pre></td></tr></table></figure><p>发展了这么多年的编程语言，又怎么会连一次调用、多值返回这么简单的事情都做不到呢。事实上，有各种各样、各显神通的返回多个值的方法，我给其中的一些做了个分类</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210314/多重返回值的定义阵营九宫格.png" alt=""></p><h1 id="Lisp的multiple-value-bind"><a href="#Lisp的multiple-value-bind" class="headerlink" title="Lisp的multiple-value-bind"></a>Lisp的<code>multiple-value-bind</code></h1><p>Common Lisp（简称为CL）的多重返回值当之无愧是其中最正统、最好用的实现方式。以它的内置函数<code>truncate</code>为例，它的第一个返回值为第一个参数除以第二个参数的商，第二个返回值为对应的余数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CL-USER&gt; (<span class="name">truncate</span> <span class="number">10</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果不加修饰地调用<code>truncate</code>，就像其它只返回一个值的函数一样，也只会拿到一个返回值</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CL-USER&gt; (<span class="name">let</span> ((<span class="name">q</span> (<span class="name">truncate</span> <span class="number">10</span> <span class="number">3</span>)))</span><br><span class="line">           (<span class="name">format</span> <span class="literal">t</span> <span class="string">"q = ~D~%"</span> q))</span><br><span class="line">q = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>除非用<code>multiple-value-bind</code>来捕获一个函数产生的所有返回值</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CL-USER&gt; (<span class="name">multiple-value-bind</span> (<span class="name">q</span> r)</span><br><span class="line">             (<span class="name">truncate</span> <span class="number">10</span> <span class="number">3</span>)</span><br><span class="line">           (<span class="name">format</span> <span class="literal">t</span> <span class="string">"q = ~D~8Tr = ~D~%"</span> q r))</span><br><span class="line">q = <span class="number">3</span>   r = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>CL的方案的优点在于它十分灵活。即使将一个函数从返回单个值改为返回多个值，也不会导致原本调用该函数的位置要全部修改一遍——对修改封闭，对扩展开放（误）。</p><h1 id="Go的多重返回值"><a href="#Go的多重返回值" class="headerlink" title="Go的多重返回值"></a>Go的多重返回值</h1><p>踩在C语言肩膀上的Go也能够从函数中返回多个值。在<code>io/ioutil</code>包的<a href="https://golang.org/pkg/io/ioutil/" target="_blank" rel="noopener">官方文档</a>中有大量的例子，比如用<code>ReadAll</code>方法从字符串衍生的流中读取全部内容，就会返回两个值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Hello, world!"</span></span><br><span class="line">reader := strings.NewReader(s)</span><br><span class="line">bytes, err := ioutil.ReadAll(reader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"bytes is %s"</span>, bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go以这种方式取代了C语言中用返回值表达成功与否、再通过指针传出读到的数据的风格。由于这个模式在有用的Go程序中到处出现，因此Gopher们用的都是定制的键盘（误）</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210314/go的错误检查.jpg" alt=""></p><p>不同于前文的<code>multiple-value-bind</code>，如果一个函数或方法返回多个值，那么调用者必须捕获每一个值，否则编译无法通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  try cat try_read_all_ignore_err.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">"fmt"</span><br><span class="line">"io/ioutil"</span><br><span class="line">"strings"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">s := "Hello, world!"</span><br><span class="line">reader := strings.NewReader(s)</span><br><span class="line">bytes := ioutil.ReadAll(reader)</span><br><span class="line">fmt.Printf("bytes is %s", bytes)</span><br><span class="line">&#125;</span><br><span class="line">➜  try go build try_read_all_ignore_err.go</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span>-line-arguments</span></span><br><span class="line">./try_read_all_ignore_err.go:12:8: assignment mismatch: 1 variable but ioutil.ReadAll returns 2 values</span><br></pre></td></tr></table></figure><p>这一要求也是合理的，毕竟多重返回值机制主要用于向调用者传递出错原因——既然可能出错，那么就必须要检查一番。</p><h1 id="Python和Rust的解构"><a href="#Python和Rust的解构" class="headerlink" title="Python和Rust的解构"></a>Python和Rust的解构</h1><p>就像CL的<code>truncate</code>函数一样，Python中的函数<code>divmod</code>也可以同时返回两个数相除的商和余数，并且咋看之下也是返回多个值的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q, r = divmod(<span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'q = &#123;&#125;\tr = &#123;&#125;'</span>.format(q, r))</span><br></pre></td></tr></table></figure><p>但本质上，这是因为Python支持<a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" target="_blank" rel="noopener">解构</a>，同时<a href="https://docs.python.org/3/library/functions.html#divmod" target="_blank" rel="noopener"><code>divmod</code></a>返回的是一个由商和余数组成的元组。这样的做法与CL的真·奥义·多重返回值的差异在于，如果只想要<code>divmod</code>的第一个值，那么等号左侧也要写成对应的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q, _ = divmod(<span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'q = &#123;&#125;'</span>.format(q))</span><br></pre></td></tr></table></figure><p>在支持解构的语言中都可以模仿出多重返回值，例如Rust</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">divmod</span></span>(a: <span class="built_in">u32</span>, b: <span class="built_in">u32</span>) -&gt; (<span class="built_in">u32</span>, <span class="built_in">u32</span>) &#123;</span><br><span class="line">    (a / b, a % b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (q, r) = divmod(<span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"q = &#123;&#125;\tr = &#123;&#125;"</span>, q, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prolog的归一"><a href="#Prolog的归一" class="headerlink" title="Prolog的归一"></a>Prolog的归一</h1><p>到了Prolog这里，画风就有点不一样了。首先Prolog既没有函数，也没有方法，更没有宏。在Prolog中，像<code>length/2</code>和<code>member/2</code>这样的东西叫做<code>functor</code>，它们之于Prolog中的列表，就犹如CL的<code>length</code>和<code>member</code>之于列表、Python的<code>len</code>函数和<code>in</code>操作符之于列表，JavaScript的<code>length</code>属性和<code>indexOf</code>方法之于数组……</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210314/prolog的length和member.jpg" alt=""></p><p>其次，Prolog并不“返回”一个<code>functor</code>的“调用结果”，它只是判断输入的查询是否成立，以及给出使查询成立的变量值。在第一个查询中，<code>length/2</code>的第二个参数为变量<code>L</code>，因此Prolog给出了使这个查询成立的<code>L</code>的值4；第二个查询中没有变量，Prolog只是简单地给出查询是否成立；第三个查询中，Prolog给出了四个能够使查询成立的变量<code>X</code>的值。</p><p>由于Prolog会给出查询中每一个变量的值，可以用这个特性来模拟多重返回值。例如，可以让Prolog一次性给出两个数字的和、差、积，和商</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210314/同时计算出和查积商.jpg" alt=""></p><p>麻烦之处在于就算只想要得到两数之和，也必须用占位符填在后三个参数上：<code>jjcc(10, 3, S, _, _, _)</code>。</p><h1 id="作弊的指针与全局变量"><a href="#作弊的指针与全局变量" class="headerlink" title="作弊的指针与全局变量"></a>作弊的指针与全局变量</h1><p>尽管在开篇的时候提到了C语言中的函数无法返回多个值，但如果像上文的Prolog那般允许修改参数的话，C语言也是可以做到的，谁让它有指针这个强力特性呢。例如，<code>stat(2)</code>函数就会将关于一个文件的信息填充到参数中所指向的结构体的内存中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *path = <span class="string">"./try_stat.c"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">buf</span>;</span></span><br><span class="line">    stat(path, &amp;buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"inode's number of %s is %llu\n"</span>, path, buf.st_ino);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>man 2 stat</code>可以知道<code>struct stat</code>类型中有非常多的内容，这显然也是一种多重返回值。同样的手法，在Go中也可以运用，例如用于把从数据库中读取出来的行的数据写入目标数据结构的<a href="https://golang.org/pkg/database/sql/#Rows.Scan" target="_blank" rel="noopener"><code>Scan</code>方法</a>。</p><p>最后，如果只要能让调用者感知就行，那么全局变量未尝不是一种通用的多重返回值机制。例如在C语言中的<code>strtol</code>函数，就会在无法转换出任何数字的时候返回0并设置<code>errno</code>，因此检查<code>errno</code>是必须的步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">try_conversion</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> num = strtol(str, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (errno == EINVAL || errno == ERANGE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> message[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">snprintf</span>(message, <span class="keyword">sizeof</span>(message), <span class="string">"strtol(\"%s\")"</span>, str);</span><br><span class="line">        perror(message);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"strtol(\"%s\") is %ld\n"</span>, str, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    try_conversion(<span class="string">"233"</span>);</span><br><span class="line">    try_conversion(<span class="string">"0"</span>);</span><br><span class="line">    try_conversion(<span class="string">"lisp"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鉴于<code>errno</code>是一个全局变量，<code>strtol</code>的使用者完全有可能忘记要检查。相比之下，Go的<a href="https://golang.org/pkg/strconv/" target="_blank" rel="noopener">strconv</a>包的函数都将转换过程中的错误以第二个参数的形式返回给调用者，用起来更安全。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>按照<a href="https://mp.weixin.qq.com/s/8T0rrl5dkwtYB_XCbAhACQ" target="_blank" rel="noopener">《代码写得不好，不要总觉得是自己抽象得不好》</a>这篇文章的说法，代码写成什么样子完全是由产品经理决定的。但产品经理又怎么会在意你用的技术是怎么实现多重返回值的呢。综上所述，这个特性没用（误）。</p><p>全文完。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="编程语言" scheme="https://liutos.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>终端看片指日可待</title>
    <link href="https://liutos.github.io/2021/02/27/%E7%BB%88%E7%AB%AF%E7%9C%8B%E7%89%87%E6%8C%87%E6%97%A5%E5%8F%AF%E5%BE%85/"/>
    <id>https://liutos.github.io/2021/02/27/终端看片指日可待/</id>
    <published>2021-02-27T06:54:55.000Z</published>
    <updated>2021-02-27T07:02:53.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>在旧文<a href="https://liutos.github.io/2020/07/03/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E7%A7%92%E8%A1%A8/">《如何写一个命令行的秒表》</a>中，借助命令<code>tput</code>，我实现了“原地更新”所输出的时分秒的效果</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/stopwatch的演示效果.gif" alt=""></p><p>其中用到的是ASCII转义序列<code>\x1b[8D</code>和<code>\x1b[0K</code>。除此之外，ASCII转义序列还有许多其它功能。例如，可以用来定制输出内容的前景色</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/打印红色的helloworld.jpg" alt=""></p><p>将转义序列中的参数<code>38</code>改为<code>48</code>，可以定制输出内容的背景色</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/打印红色背景的helloworld.jpg" alt=""></p><p>将打印内容改为两个空格，看起来就像是在一块黑色的画布上涂了一个红色的方块</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/打印红色方块.jpg" alt=""></p><p>既然如此，只要尺寸合适，就可以在终端打印出一张图片，只需要将每一个像素的颜色作为背景色，在坐标对应的行列上输出两个空格即可。如果能抹掉输出的内容并在同样的位置上打印一张不同的图片，甚至可以实现动画的效果。</p><p>百闻不如一见，下面我用Python演示一番。</p><h1 id="把GIF装进终端"><a href="#把GIF装进终端" class="headerlink" title="把GIF装进终端"></a>把GIF装进终端</h1><p>要想用前文的思路在终端中显示一张GIF图片，必须先得到GIF图片每一帧的每个像素的颜色才行。在Python中使用名为<a href="https://github.com/python-pillow/Pillow" target="_blank" rel="noopener">Pillow</a>的库可以轻松地解析GIF文件，先安装这个库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  /tmp rmdir show_gif</span><br><span class="line">➜  /tmp mkdir show_gif</span><br><span class="line">➜  /tmp cd show_gif</span><br><span class="line">➜  show_gif python3 -m venv ./venv</span><br><span class="line">➜  show_gif . ./venv/bin/activate</span><br><span class="line">(venv) ➜  show_gif pip install Pillow</span><br><span class="line">Collecting Pillow</span><br><span class="line">  Using cached Pillow-8.1.0-cp39-cp39-macosx_10_10_x86_64.whl (2.2 MB)</span><br><span class="line">Installing collected packages: Pillow</span><br><span class="line">Successfully installed Pillow-8.1.0</span><br><span class="line">WARNING: You are using pip version 20.2.3; however, version 21.0.1 is available.</span><br><span class="line">You should consider upgrading via the '/private/tmp/show_gif/venv/bin/python3 -m pip install --upgrade pip' command.</span><br></pre></td></tr></table></figure><p>接着便可以让它读入并解析一张GIF图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    im = Image.open(path)</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后将每一帧都转换为<code>RGB</code>模式再遍历其每一个像素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    im = Image.open(path)</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">        rgb_frame = frame.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        pixels = rgb_frame.load()</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.height):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.width):</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>调用<code>Image</code>类的实例方法<code>load</code>得到的是一个<a href="https://pillow.readthedocs.io/en/stable/reference/PixelAccess.html" target="_blank" rel="noopener"><code>PixelAccess</code></a>类的实例，它可以像二维数组一般用坐标获取每一个像素的颜色值，颜色值则是一个长度为3的<code>tuple</code>类型的值，其中依次是像素的三原色的分量。</p><p>从<a href="https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit" target="_blank" rel="noopener">ANSI escape code词条的24-bit小节</a>中得知，使用参数为<code>48;2;</code>的转义序列，再接上以分号分隔的三原色分量即可设置24位的背景色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    im = Image.open(path)</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">        rgb_frame = frame.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        pixels = rgb_frame.load()</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.height):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.width):</span><br><span class="line">                colors = pixels[x, y]</span><br><span class="line">                print(<span class="string">'\x1b[48;2;&#123;&#125;;&#123;&#125;;&#123;&#125;m  \x1b[0m'</span>.format(*colors), end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>在每次二重循环遍历了所有像素后，还必须清除输出的内容，并将光标重置到左上角才能再次打印，这可以用ASCII转义序列来实现。查阅<a href="https://vt100.net/docs/vt100-ug/chapter3.html" target="_blank" rel="noopener">VT100 User Guide</a>可以知道，用<a href="https://vt100.net/docs/vt100-ug/chapter3.html#ED" target="_blank" rel="noopener">ED命令</a>可以擦除显示的字符，对应的转义序列为<code>\x1b[2J</code>；用<a href="https://vt100.net/docs/vt100-ug/chapter3.html#CUP" target="_blank" rel="noopener">CUP命令</a>可以移动光标的位置到左上角，对应的转义序列为<code>\x1b[0;0H</code>。在每次开始打印一帧图像前输出这两个转义序列即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    im = Image.open(path)</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">        rgb_frame = frame.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        pixels = rgb_frame.load()</span><br><span class="line">        print(<span class="string">'\x1b[2J\x1b[0;0H'</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.height):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.width):</span><br><span class="line">                colors = pixels[x, y]</span><br><span class="line">                print(<span class="string">'\x1b[48;2;&#123;&#125;;&#123;&#125;;&#123;&#125;m  \x1b[0m'</span>.format(*colors), end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>最后，只需要在每次打印完一帧后，按GIF文件的要求睡眠一段时间即可。每一帧的展示时长可以从<code>info</code>属性的键<code>duration</code>中得到，单位是毫秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    im = Image.open(path)</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">        rgb_frame = frame.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        pixels = rgb_frame.load()</span><br><span class="line">        print(<span class="string">'\x1b[2J\x1b[0;0H'</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.height):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.width):</span><br><span class="line">                colors = pixels[x, y]</span><br><span class="line">                print(<span class="string">'\x1b[48;2;&#123;&#125;;&#123;&#125;;&#123;&#125;m  \x1b[0m'</span>.format(*colors), end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">        time.sleep(rgb_frame.info[<span class="string">'duration'</span>] / <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>现在可以看看效果了。我准备了一张测试用的GIF图片，宽度和高度均为47像素，共34帧</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/一颗苹果的动画.gif" alt=""></p><p>让它在终端中显示出来吧</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/在终端播放一棵苹果的动图.gif" alt=""></p><h1 id="一点微小的改进"><a href="#一点微小的改进" class="headerlink" title="一点微小的改进"></a>一点微小的改进</h1><p>你可能留意到了，前文的演示效果中有明显的闪烁，这是因为打印ASCII转义序列的速度不够快导致的。既然如此，可以将一整行的转义序列先生成出来，再一次性输出到终端。改动不复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    im = Image.open(path)</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">        rgb_frame = frame.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        pixels = rgb_frame.load()</span><br><span class="line">        print(<span class="string">'\x1b[2J\x1b[0;0H'</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.height):</span><br><span class="line">            last_colors = <span class="keyword">None</span></span><br><span class="line">            line = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, rgb_frame.width):</span><br><span class="line">                colors = pixels[x, y]</span><br><span class="line">                <span class="keyword">if</span> colors != last_colors:</span><br><span class="line">                    line += <span class="string">'\x1b[0m\x1b[48;2;&#123;&#125;;&#123;&#125;;&#123;&#125;m  '</span>.format(*colors)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    line += <span class="string">'  '</span></span><br><span class="line">                last_colors = colors</span><br><span class="line">            print(<span class="string">'&#123;&#125;\x1b[0m'</span>.format(line))</span><br><span class="line">        time.sleep(rgb_frame.info[<span class="string">'duration'</span>] / <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>但效果却很显著</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210227/不怎么闪烁的版本.gif" alt=""></p><p>全文完</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="命令行" scheme="https://liutos.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="绘图" scheme="https://liutos.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>此数绵绵无绝期——欧拉计划第66题</title>
    <link href="https://liutos.github.io/2021/02/11/%E6%AD%A4%E6%95%B0%E7%BB%B5%E7%BB%B5%E6%97%A0%E7%BB%9D%E6%9C%9F%E2%80%94%E2%80%94%E6%AC%A7%E6%8B%89%E8%AE%A1%E5%88%92%E7%AC%AC66%E9%A2%98/"/>
    <id>https://liutos.github.io/2021/02/11/此数绵绵无绝期——欧拉计划第66题/</id>
    <published>2021-02-11T07:21:32.000Z</published>
    <updated>2022-05-02T03:18:57.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅以此文膜拜八年前的自己</p></blockquote><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p><a href="https://projecteuler.net/about" target="_blank" rel="noopener">欧拉计划</a>（Project Euler）就像LeetCode，是一个编程答题的网站。不同于LeetCode的是，欧拉计划只要求用户提交最终答案即可（一般是一个数字），而不需要完整代码。因此，可以尽情地使用自己喜欢的编程语言——不少题目甚至光靠笔和纸便能解决。</p><p>欧拉计划的<a href="https://projecteuler.net/problem=66" target="_blank" rel="noopener">第66题</a>非常有意思，它的题目很简单，就是要求找出在不大于1000的整数中，以哪一个数字为丢番图方程的系数，可以得到所有最小解中的最大值。</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210211/第66题的描述.jpeg" alt=""></p><p>可以很容易地看出方程有一个直观的暴力算法：让y从1开始递增，对于每一个y，计算公式<code>Dy^2+1</code>的值。如果该值为平方数，那么它的平方根就是最小的x解。再依照这个算法求解所有D不大于1000的方程，便可以求出题目的答案。很容易用Python写出这个算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_square</span><span class="params">(num: int)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">return</span> math.isqrt(num) ** <span class="number">2</span> == num</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_x</span><span class="params">(D: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    求出给定D时，满足题目所给的丢番图方程的最小的x。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> is_square(D)</span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        candidate = D * y * y + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> is_square(candidate):</span><br><span class="line">            <span class="keyword">return</span> math.isqrt(candidate)</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_66</span><span class="params">(limit)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    找出不大于limi的D中，使find_x的返回值最大的那一个数字。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    max_D = <span class="keyword">None</span></span><br><span class="line">    max_x = <span class="keyword">None</span></span><br><span class="line">    D = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> D &lt;= limit:</span><br><span class="line">        <span class="keyword">if</span> is_square(D):</span><br><span class="line">            D += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        x = find_x(D)</span><br><span class="line">        <span class="keyword">if</span> max_x <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> x &gt; max_x:</span><br><span class="line">            max_D = D</span><br><span class="line">            max_x = x</span><br><span class="line">        D += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> max_D, max_x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    D, x = solve_66(<span class="number">7</span>)</span><br><span class="line">    print(<span class="string">'D is &#123;&#125; and x is &#123;&#125;'</span>.format(D, x))</span><br></pre></td></tr></table></figure><p>但如果将上限<code>limit</code>提升为1000，这个算法在有生之年是算不出结果的。</p><p>要想解决这一题，需要借助数学的力量。</p><h1 id="佩尔方程"><a href="#佩尔方程" class="headerlink" title="佩尔方程"></a>佩尔方程</h1><p>八年前第一次做这一题的时候，经过一番搜索，我从<a href="https://eli.thegreenplace.net/2009/06/19/project-euler-problem-66-and-continued-fractions/" target="_blank" rel="noopener">这篇文章</a>中知道了题目中的方程叫做<a href="https://zh.wikipedia.org/wiki/%E4%BD%A9%E5%B0%94%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">佩尔方程。</a>它有标准的解法，但需要用到连分数。那么什么是连分数呢？</p><p>连分数不是一种新的数系，只是小数的另一种写法。例如可以把分数45除以16写成下面的形式</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210211/一个连分数的例子.jpg" alt=""></p><p>就像定义递归的数据结构一样，可以给连分数一个递归的定义。连分数要么是一个整数，要么是一个整数加上另一个连分数的倒数。除了上面的形式，连分数也可以写成更节省篇幅的样子。比如把45除以16写成<code>[2;1,4,3]</code>，即把原本的式子中所有的整数部分按顺序写在一对方括号之间。这种记法，看起来就像是编程语言中的数组一般。</p><p>如果用数组<code>[2;1,4,3]</code>的不同前缀来构造分式，那么结果依次为<code>2/1</code>、<code>3/1</code>、<code>14/5</code>。它们是这个连分数的渐进连分数，而佩尔方程的一组解，就来自于渐进连分数的分子和分母。</p><p>以系数为7的佩尔方程为例，先计算出根号7的连分数，然后依次尝试它的渐进连分数。前三个分别为<code>2/1</code>、<code>3/1</code>、<code>5/2</code>，都不是方程的解。第四个渐进连分数<code>8/3</code>才是方程的解。如果继续提高连分数的精度，还会找到第二个解<code>127/48</code>。继续找，还有更多，而8则是其中最小的x。</p><p>所以，想要快速算出佩尔方程的解，最重要的是找到计算一个数的平方根的连分数的算法。</p><h1 id="计算平方根的连分数的错误方法"><a href="#计算平方根的连分数的错误方法" class="headerlink" title="计算平方根的连分数的错误方法"></a>计算平方根的连分数的错误方法</h1><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210211/连分数的通用形式.jpg" alt=""></p><p>要计算一个数字的连分数，最重要的便是要算出所有的整数部分（<code>a0</code>、<code>a2</code>、<code>a2</code>等）。它们都可以依据定义直接计算</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210211/整数部分的计算方法.png" alt=""></p><p>推广到一半情况，如果用变量<code>n</code>存储开平方的数字，用<code>numbers</code>存储所有已知的整数，那么用Python可以写出下面的算法来计算出下一个整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算连分数数列的下一个数字</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_next_integer_part</span><span class="params">(n, numbers)</span>:</span></span><br><span class="line">    v = math.sqrt(n)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> numbers:</span><br><span class="line">        v = <span class="number">1</span> / (v - a)</span><br><span class="line">    <span class="keyword">return</span> int(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">14</span></span><br><span class="line">    numbers = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    v = compute_next_integer_part(n, numbers)</span><br><span class="line">    print(<span class="string">'下一个数字为&#123;&#125;'</span>.format(v))</span><br></pre></td></tr></table></figure><p>遗憾的是，这个算法算出来的数字会因为计算上的精度误差而导致失之毫厘谬以千里。</p><h1 id="计算平方根的连分数的正确方法"><a href="#计算平方根的连分数的正确方法" class="headerlink" title="计算平方根的连分数的正确方法"></a>计算平方根的连分数的正确方法</h1><p>要想计算出正确的结果，就需要尽可能地消除在计算<code>1 / (v - a)</code>的时候引入的误差，因此必须把浮点数从分母中除去。</p><p>在<a href="http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/cfINTRO.html#section6.2.2" target="_blank" rel="noopener">这个网站</a>中，作者以计算根号14的连分数为例，列出了一个表格</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210211/计算根号14连分数的过程.jpeg" alt=""></p><p>可以看到<code>x1</code>、<code>x2</code>，以及<code>x3</code>都是形如<code>(sqrt(n)+a)/b</code>这样的格式，这样的式子更利于控制误差。那么是否每一个待计算的<code>x</code>都符合这种格式呢？答案是肯定的，可以用数学归纳法予以证明（为了方便写公式，用LaTeX写好后截了图）</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210211/数学归纳法过程.jpg" alt=""></p><p>在这个证明过程中，还得到了分子中的<code>a</code>以及分母中的<code>b</code>的递推公式，现在可以写出正确的计算连分数整数部分的代码了。</p><h1 id="用Common-Lisp实现上述算法"><a href="#用Common-Lisp实现上述算法" class="headerlink" title="用Common Lisp实现上述算法"></a>用Common Lisp实现上述算法</h1><p>为了在实现这个算法的同时还要写出优雅的代码，我会用上Common Lisp的面向对象特性。首先是定义一个类来表示一个可以不断提高精度的连分数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defpackage</span> #<span class="symbol">:com</span>.liutos.cf</span><br><span class="line">  (<span class="symbol">:use</span> #<span class="symbol">:cl</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">in-package</span> #<span class="symbol">:com</span>.liutos.cf)</span><br><span class="line"></span><br><span class="line">(<span class="name">defclass</span> &lt;cf&gt; ()</span><br><span class="line">  ((<span class="name">a</span></span><br><span class="line">    <span class="symbol">:documentation</span> <span class="string">"数学归纳法中、分子中与平方根相加的数"</span></span><br><span class="line">    <span class="symbol">:initform</span> <span class="number">0</span>)</span><br><span class="line">   (<span class="name">b</span></span><br><span class="line">    <span class="symbol">:documentation</span> <span class="string">"数学归纳法中的分母"</span></span><br><span class="line">    <span class="symbol">:initform</span> <span class="number">1</span>)</span><br><span class="line">   (<span class="name">numbers</span></span><br><span class="line">    <span class="symbol">:documentation</span> <span class="string">"连分数中的整数部分依次组成的数组。"</span></span><br><span class="line">    <span class="symbol">:initform</span> <span class="literal">nil</span>)</span><br><span class="line">   (<span class="name">origin</span></span><br><span class="line">    <span class="symbol">:documentation</span> <span class="string">"被开平方的数字"</span></span><br><span class="line">    <span class="symbol">:initarg</span> <span class="symbol">:origin</span>))</span><br><span class="line">  (<span class="symbol">:documentation</span> <span class="string">"表示整数ORIGIN的平方根的连分数。"</span>))</span><br></pre></td></tr></table></figure><p>接着再定义这个类需要实现的“接口”</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defgeneric</span> advance (<span class="name">cf</span>)</span><br><span class="line">  (<span class="symbol">:documentation</span> <span class="string">"让连分数CF提高到下一个精度。"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">defgeneric</span> into-rational (<span class="name">cf</span>)</span><br><span class="line">  (<span class="symbol">:documentation</span> <span class="string">"将连分数CF转换为有理数类型的值。"</span>))</span><br></pre></td></tr></table></figure><p>最后来实现上述两个接口</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defmethod</span> advance ((<span class="name">cf</span> &lt;cf&gt;))</span><br><span class="line">  <span class="string">"根据递推公式计算出下一批a、b，以及连分数的整数部分。"</span></span><br><span class="line">  (<span class="name">let*</span> ((<span class="name">a</span> (<span class="name">slot-value</span> cf 'a))</span><br><span class="line">         (<span class="name">b</span> (<span class="name">slot-value</span> cf 'b))</span><br><span class="line">         (<span class="name">n</span> (<span class="name">slot-value</span> cf 'origin))</span><br><span class="line">         (<span class="name">m</span> (<span class="name">truncate</span> (<span class="name">+</span> (<span class="name">sqrt</span> n) a) b)))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">a</span> (<span class="name">-</span> (<span class="name">*</span> b m) a))</span><br><span class="line">          (<span class="name">b</span> (<span class="name">/</span> (<span class="name">-</span> n (<span class="name">expt</span> (<span class="name">-</span> a (<span class="name">*</span> b m)) <span class="number">2</span>)) b)))</span><br><span class="line">      (<span class="name">setf</span> (<span class="name">slot-value</span> cf 'a) a</span><br><span class="line">            (<span class="name">slot-value</span> cf 'b) b</span><br><span class="line">            (<span class="name">slot-value</span> cf 'numbers) (<span class="name">append</span> (<span class="name">slot-value</span> cf 'numbers) (<span class="name">list</span> m))))</span><br><span class="line">    (<span class="name">values</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defmethod</span> into-rational ((<span class="name">cf</span> &lt;cf&gt;))</span><br><span class="line">  (<span class="name">let*</span> ((<span class="name">numbers</span> (<span class="name">reverse</span> (<span class="name">slot-value</span> cf 'numbers)))</span><br><span class="line">         (<span class="name">v</span> (<span class="name">first</span> numbers)))</span><br><span class="line">    (<span class="name">dolist</span> (<span class="name">n</span> (<span class="name">rest</span> numbers))</span><br><span class="line">      (<span class="name">setf</span> v</span><br><span class="line">            (<span class="name">+</span> n (<span class="name">/</span> <span class="number">1</span> v))))</span><br><span class="line">    v))</span><br></pre></td></tr></table></figure><p>在实现<code>into-rational</code>方法上，Common Lisp的有理数数值类型给我带来了极大的便利，它使我不必担心计算<code>(/ 1 v)</code>的时候会引入误差，代码写起来简单直白。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>乘胜追击，用Common Lisp解答第66题</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> find-min-x (<span class="name">D</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">cf</span> (<span class="name">make-instance</span> '&lt;cf&gt; <span class="symbol">:origin</span> D)))</span><br><span class="line">    (<span class="name">loop</span></span><br><span class="line">       (<span class="name">advance</span> cf)</span><br><span class="line">       (<span class="name">let*</span> ((<span class="name">ratio</span> (<span class="name">into-rational</span> cf))</span><br><span class="line">              (<span class="name">x</span> (<span class="name">numerator</span> ratio))</span><br><span class="line">              (<span class="name">y</span> (<span class="name">denominator</span> ratio)))</span><br><span class="line">         (<span class="name">when</span> (<span class="name">=</span> (<span class="name">-</span> (<span class="name">*</span> x x) (<span class="name">*</span> D y y)) <span class="number">1</span>)</span><br><span class="line">           (<span class="name">return-from</span> find-min-x x))))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> square-p (<span class="name">n</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">rt</span> (<span class="name">sqrt</span> n)))</span><br><span class="line">    (<span class="name">=</span> rt (<span class="name">truncate</span> rt))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> pro66 (<span class="name">&amp;optional</span> (<span class="name">bnd</span> <span class="number">1000</span>))</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">target-d</span>)</span><br><span class="line">(<span class="name">max-x</span> <span class="number">0</span>))</span><br><span class="line">    (<span class="name">loop</span> <span class="symbol">:for</span> i <span class="symbol">:from</span> <span class="number">2</span> <span class="symbol">:to</span> bnd</span><br><span class="line">       <span class="symbol">:when</span> (<span class="name">not</span> (<span class="name">square-p</span> i))</span><br><span class="line">       <span class="symbol">:do</span> (<span class="name">let</span> ((<span class="name">x</span> (<span class="name">find-min-x</span> i)))</span><br><span class="line">     (<span class="name">if</span> (<span class="name">&gt;</span> x max-x)</span><br><span class="line"> (<span class="name">setf</span> target-d i</span><br><span class="line">       max-x x))))</span><br><span class="line">    (<span class="name">values</span> target-d max-x)))</span><br></pre></td></tr></table></figure><p>答案的D是多少就不说了，不过作为答案的x是16421658242965910275055840472270471049。有兴趣的读者可以试一下暴力解法要花多久才能算到这个数字。</p><p>全文完。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="algorithm" scheme="https://liutos.github.io/tags/algorithm/"/>
    
      <category term="project euler" scheme="https://liutos.github.io/tags/project-euler/"/>
    
      <category term="算法" scheme="https://liutos.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="https://liutos.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
  </entry>
  
  <entry>
    <title>format，不只是格式化</title>
    <link href="https://liutos.github.io/2021/01/29/format%EF%BC%8C%E4%B8%8D%E5%8F%AA%E6%98%AF%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://liutos.github.io/2021/01/29/format，不只是格式化/</id>
    <published>2021-01-29T15:05:51.000Z</published>
    <updated>2022-05-02T03:18:42.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《实战Common Lisp》系列主要讲述在使用Common Lisp时能派上用场的小函数，希望能为Common Lisp的复兴做一些微小的贡献。MAKE COMMON LISP GREAT AGAIN。</p></blockquote><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>写了一段时间的Python后，总觉得它跟Common Lisp（下文简称CL）有亿点点像。例如，Python和CL都支持可变数量的函数参数。在Python中写作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(* args)</span>:</span></span><br><span class="line">    print(args)</span><br></pre></td></tr></table></figure><p>而在CL中则写成</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> foo (<span class="name">&amp;rest</span> args)</span><br><span class="line">  (<span class="name">print</span> args))</span><br></pre></td></tr></table></figure><p>Python的语法更紧凑，而CL的语法表意更清晰。此外，它们也都支持关键字参数。在Python中写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(*, a=None, b=None)</span>:</span></span><br><span class="line">    print(<span class="string">'a=&#123;&#125;\tb=&#123;&#125;'</span>.format(a, b))</span><br></pre></td></tr></table></figure><p>而在CL中则是</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> bar (<span class="name">&amp;key</span> (<span class="name">a</span> <span class="literal">nil</span>) (<span class="name">b</span> <span class="literal">nil</span>))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"a=~A~8Tb=~A~%"</span> a b))</span><br></pre></td></tr></table></figure><p>尽管CL的<code>&amp;key</code>仍然更清晰，但声明参数默认值的语法确实是Python更胜一筹。</p><p>细心的读者可能发现了，在Python中有一个叫做<code>format</code>的方法（属于字符串类），而在CL则有一个叫做<code>format</code>的函数。并且，从上面的例子来看，它们都负责生成格式化的字符串，那么它们有相似之处吗？</p><p>答案是否定的，CL的<code>format</code>简直就是格式化打印界的一股泥石流。</p><h1 id="format的基本用法"><a href="#format的基本用法" class="headerlink" title="format的基本用法"></a><code>format</code>的基本用法</h1><p>不妨从上面的示例代码入手介绍CL中的<code>format</code>（下文在不引起歧义的情况下，简称为<code>format</code>）的基本用法。首先，它需要至少两个参数：</p><ul><li>第一个参数控制了<code>format</code>将会把格式化后的字符串打印到什么地方。<code>t</code>表示打印到标准输出；</li><li>第二个参数则是本文的主角，名为控制字符串（control-string）。它指导<code>format</code>如何格式化。</li></ul><p>听起来很神秘，但其实跟C语言的<code>fprintf</code>也没什么差别。</p><p>在控制字符串中，一般会有许多像占位符一般的命令（directive）。正如Python的<code>format</code>方法中，有各式各样的<a href="https://docs.python.org/3/library/string.html#formatspec" target="_blank" rel="noopener">format_spec</a>能够格式化对应类型的数据，控制字符串中的命令也有很多种，常见的有：</p><ul><li>打印二进制数字的<code>~B</code>，例如<code>(format t &quot;~B&quot; 5)</code>会打印出101；</li><li>打印八进制数字的<code>~O</code>，例如<code>(format t &quot;~O&quot; 8)</code>会打印出10；</li><li>打印十进制数字的<code>~D</code>；</li><li>打印十六进制数字的<code>~X</code>，例如<code>(format t &quot;~X&quot; 161)</code>会打印出A1；</li><li>打印任意一种类型的<code>~A</code>，一般打印字符串的时候会用到。</li></ul><p>另外，<code>format</code>的命令也支持参数。在Python中，可以用下列代码打印右对齐的、左侧填充字符0的、二进制形式的数字5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;:0&gt;8b&#125;'</span>.format(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><code>format</code>函数也可以做到同样的事情</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~8,'0B"</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>到这里为止，你可能会觉得<code>format</code>的控制字符串，不过就是将花括号去掉、冒号换成波浪线，以及参数语法不一样的<code>format</code>方法的翻版罢了。</p><p>接下来，让我们进入<code>format</code>的黑科技领域。</p><h1 id="format的高级用法"><a href="#format的高级用法" class="headerlink" title="format的高级用法"></a><code>format</code>的高级用法</h1><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>前面列举了打印二、八、十，以及十六进制的命令，但<code>format</code>还支持其它的进制。使用命令<code>~R</code>搭配参数，<code>format</code>可以打印数字从2到36进制的所有形态。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~3R~%"</span> <span class="number">36</span>)   <span class="comment">; 以 3进制打印数字36，结果为1100</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~5R~%"</span> <span class="number">36</span>)   <span class="comment">; 以 5进制打印数字36，结果为 121</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~7R~%"</span> <span class="number">36</span>)   <span class="comment">; 以 7进制打印数字36，结果为  51</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~11R~%"</span> <span class="number">36</span>)  <span class="comment">; 以11进制打印数字36，结果为  33</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~13R~%"</span> <span class="number">36</span>)  <span class="comment">; 以13进制打印数字36，结果为  2A</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~17R~%"</span> <span class="number">36</span>)  <span class="comment">; 以17进制打印数字36，结果为  22</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~19R~%"</span> <span class="number">36</span>)  <span class="comment">; 以19进制打印数字36，结果为  1H</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~23R~%"</span> <span class="number">36</span>)  <span class="comment">; 以23进制打印数字36，结果为  1D</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~29R~%"</span> <span class="number">36</span>)  <span class="comment">; 以29进制打印数字36，结果为  17</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~31R~%"</span> <span class="number">36</span>)  <span class="comment">; 以31进制打印数字36，结果为  15</span></span><br></pre></td></tr></table></figure><p>之所以最大为36进制，是因为十个阿拉伯数字，加上二十六个英文字母正好是三十六个。那如果不给<code>~R</code>加任何参数，会使用0进制吗？非也，<code>format</code>会把数字打印成英文单词</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~R~%"</span> <span class="number">123</span>) <span class="comment">; 打印出one hundred twenty-three</span></span><br></pre></td></tr></table></figure><p>甚至可以让<code>format</code>打印罗马数字，只要加上<code>@</code>这个修饰符即可</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~@R~%"</span> <span class="number">123</span>) <span class="comment">; 打印出CXXIII</span></span><br></pre></td></tr></table></figure><p>天晓得为什么要内置这么冷门的功能。</p><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p>你，作为一名细心的读者，可能留意到了，<code>format</code>的<code>~X</code>只能打印出大写字母，而在Python的<code>format</code>方法中，<code>{:x}</code>可以输出小写字母的十六进制数字。即使你在<code>format</code>函数中使用<code>~x</code>也是无效的，因为命令是大小写不敏感的（case insensitive）。</p><p>那要怎么实现打印小写字母的十六进制数字呢？答案是使用新的命令<code>~(</code>，以及它配套的命令<code>~)</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~(~X~)~%"</span> <span class="number">26</span>) <span class="comment">; 打印1a</span></span><br></pre></td></tr></table></figure><p>配合<code>:</code>和<code>@</code>修饰符，一共可以实现四种大小写风格</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~(hello world~)~%"</span>)   <span class="comment">; 打印hello world</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~:(hello world~)~%"</span>)  <span class="comment">; 打印Hello World</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~@(hello world~)~%"</span>)  <span class="comment">; 打印Hello world</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~:@(hello world~)~%"</span>) <span class="comment">; 打印HELLO WORLD</span></span><br></pre></td></tr></table></figure><h2 id="对齐控制"><a href="#对齐控制" class="headerlink" title="对齐控制"></a>对齐控制</h2><p>在Python的<code>format</code>方法中，可以控制打印出的内容的宽度，这一点在“<code>format</code>的基本用法”中已经演示过了。如果设置的最小宽度（在上面的例子中，是8）超过了打印的内容所占据的宽度（在上面的例子中，是3），那么还可以控制其采用左对齐、右对齐，还是居中对齐。</p><p>在CL的<code>format</code>函数中，不管是<code>~B</code>、<code>~D</code>、<code>~O</code>，还是<code>~X</code>，都没有控制对齐方式的选项，数字总是右对齐。要控制对齐方式，需要用到<code>~&lt;</code>和它配套的<code>~&gt;</code>。例如，下面的CL代码可以让数字在八个宽度中左对齐</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"|~8&lt;~B~;~&gt;|"</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>打印内容为<code>|101     |</code>。<code>~&lt;</code>跟前面提到的其它命令不一样，它不消耗控制字符串之后的参数，它只控制<code>~&lt;</code>和<code>~&gt;</code>之间的字符串的布局。这意味着，即使<code>~&lt;</code>和<code>~&gt;</code>之间是字符串常量，它也可以起作用。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"|~8,,,'-&lt;~;hello~&gt;|"</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>上面的代码运行后会打印出<code>|---hello|</code>：8表示用于打印的最小宽度；三个逗号（<code>,</code>）之间为空，表示忽略<code>~&lt;</code>的第二和第三个参数；第四个参数控制着打印结果中用于填充的字符，由于<code>-</code>不是数字，因此需要加上单引号前缀；<code>~;</code>是内部的分隔符，由于它的存在，<code>hello</code>成了最右侧的字符串，因此会被右对齐。</p><p>如果<code>~&lt;</code>和<code>~&gt;</code>之间的内容被<code>~;</code>分隔成了三部分，还可以实现左对齐、居中对齐，以及右对齐的效果</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"|~24&lt;left~;middle~;right~&gt;|"</span>) <span class="comment">; 打印出|left    middle     right|</span></span><br></pre></td></tr></table></figure><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>通常情况下，控制字符串中的命令会消耗参数，比如<code>~B</code>和<code>~D</code>等命令。也有像<code>~&lt;</code>这样不消耗参数的命令。但有的命令甚至可以做到“一参多用”，那就是<code>~*</code>。比如，给<code>~*</code>加上冒号修饰，就可以让上一个被消耗的参数重新被消耗一遍</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~8D~:*~8D~8D~%"</span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">; 打印出       1       1       2</span></span><br></pre></td></tr></table></figure><p>在<code>~8D</code>消耗了参数1之后，<code>~:*</code>让下一个被消耗的参数重新指向了1，因此第二个<code>~8D</code>拿到的参数仍然是1，最后一个拿到了2。尽管控制字符串中看起来有三个<code>~D</code>命令而参数只有两个，却依然可以正常打印。</p><p>在<code>format</code>的文档中一个不错的例子，就是让<code>~*</code>和<code>~P</code>搭配使用。<code>~P</code>可以根据它对应的参数是否大于1，来打印出字母<code>s</code>或者什么都不打印。配合<code>~:*</code>就可以实现根据参数打印出单词的单数或复数形式的功能</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~D dog~:*~P~%"</span> <span class="number">1</span>) <span class="comment">; 打印出1 dog</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~D dog~:*~P~%"</span> <span class="number">2</span>) <span class="comment">; 打印出2 dogs</span></span><br></pre></td></tr></table></figure><p>甚至你可以组合一下前面的毕生所学</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~@(~R dog~:*~P~)~%"</span> <span class="number">2</span>) <span class="comment">; 打印出Two dogs</span></span><br></pre></td></tr></table></figure><h2 id="条件打印"><a href="#条件打印" class="headerlink" title="条件打印"></a>条件打印</h2><p>命令<code>~[</code>和<code>~]</code>也是成对出现的，它们的作用是选择性打印，不过比起编程语言中的<code>if</code>，更像是取数组某个下标的元素</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~[~;one~;two~;three~]~%"</span> <span class="number">1</span>) <span class="comment">; 打印one</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~[~;one~;two~;three~]~%"</span> <span class="number">2</span>) <span class="comment">; 打印two</span></span><br><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~[~;one~;two~;three~]~%"</span> <span class="number">3</span>) <span class="comment">; 打印three</span></span><br></pre></td></tr></table></figure><p>但这个特性还挺鸡肋的。想想，你肯定不会无缘无故传入一个数字来作为下标，而这个作为下标的数字很可能本身就是通过<code>position</code>之类的函数计算出来的，而<code>position</code>就要求传入待查找的<code>item</code>和整个列表<code>sequence</code>，而为了用上<code>~[</code>你还得把列表中的每个元素硬编码到控制字符串中，颇有南辕北辙的味道。</p><p>给它加上冒号修饰符之后倒是有点用处，比如可以将CL中的真（<code>NIL</code>以外的所有对象）和假（<code>NIL</code>）打印成单词<code>true</code>和<code>false</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~:[false~;true~]"</span> <span class="literal">nil</span>) <span class="comment">; 打印false</span></span><br></pre></td></tr></table></figure><h2 id="循环打印"><a href="#循环打印" class="headerlink" title="循环打印"></a>循环打印</h2><p>圆括号和方括号都用了，又怎么能少了花括号呢。没错，<code>~{</code>也是一个命令，它的作用是遍历列表。例如，想要打印出一个列表中的每个元素，并且两两之间用逗号和空格分开的话，可以用下列代码</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~&#123;~D~^, ~&#125;"</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">; 打印出1, 2, 3</span></span><br></pre></td></tr></table></figure><p><code>~{</code>和<code>~}</code>之间也可以有不止一个命令，例如下列代码中每次会消耗列表中的两个元素</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"&#123;~&#123;\"~A\": ~D~^, ~&#125;&#125;"</span> '(<span class="symbol">:a</span> <span class="number">3</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>打印结果为<code>{&quot;A&quot;: 3, &quot;B&quot;: 2, &quot;C&quot;: 1}</code>。如果把这两个<code>format</code>表达式拆成用循环写的、不使用<code>format</code>的等价形式，大约是下面这样子</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 与(format t "~&#123;~D~^, ~&#125;" '(1 2 3))等价</span></span><br><span class="line">(<span class="name">progn</span></span><br><span class="line">  (<span class="name">do</span> ((<span class="name">lst</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) (<span class="name">cdr</span> lst)))</span><br><span class="line">      ((<span class="name">null</span> lst))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">e</span> (<span class="name">car</span> lst)))</span><br><span class="line">      (<span class="name">princ</span> e)</span><br><span class="line">      (<span class="name">when</span> (<span class="name">cdr</span> lst)</span><br><span class="line">        (<span class="name">princ</span> <span class="string">", "</span>))))</span><br><span class="line">  (<span class="name">princ</span> #\Newline))</span><br><span class="line"></span><br><span class="line"><span class="comment">; 与(format t "&#123;~&#123;\"~A\": ~D~^, ~&#125;&#125;" '(:a 3 :b 2 :c 1))等价</span></span><br><span class="line">(<span class="name">progn</span></span><br><span class="line">  (<span class="name">princ</span> <span class="string">"&#123;"</span>)</span><br><span class="line">  (<span class="name">do</span> ((<span class="name">lst</span> '(<span class="symbol">:c</span> <span class="number">3</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:a</span> <span class="number">1</span>) (<span class="name">cddr</span> lst)))</span><br><span class="line">      ((<span class="name">null</span> lst))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">key</span> (<span class="name">car</span> lst))</span><br><span class="line">          (<span class="name">val</span> (<span class="name">cadr</span> lst)))</span><br><span class="line">      (<span class="name">princ</span> <span class="string">"\""</span>)</span><br><span class="line">      (<span class="name">princ</span> key)</span><br><span class="line">      (<span class="name">princ</span> <span class="string">"\": "</span>)</span><br><span class="line">      (<span class="name">princ</span> val)</span><br><span class="line">      (<span class="name">when</span> (<span class="name">cddr</span> lst)</span><br><span class="line">        (<span class="name">princ</span> <span class="string">", "</span>))))</span><br><span class="line">  (<span class="name">princ</span> <span class="string">"&#125;"</span>)</span><br><span class="line">  (<span class="name">princ</span> #\Newline))</span><br></pre></td></tr></table></figure><p>这么看来，<code>~{</code>确实可以让使用者写出更紧凑的代码。</p><h2 id="参数化参数"><a href="#参数化参数" class="headerlink" title="参数化参数"></a>参数化参数</h2><p>在前面的例子中，尽管用<code>~R</code>搭配不同的参数可以将数字打印成不同进制的形式，但毕竟这个参数是固化在控制字符串中的，局限性很大。例如，如果我想要定义一个函数<code>print-x-in-base-y</code>，使得参数<code>x</code>可以打印为<code>y</code>进程的形式，那么也许会这么写</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> print-x-in-base-y (<span class="name">x</span> y)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">control-string</span> (<span class="name">format</span> <span class="literal">nil</span> <span class="string">"~~~DR"</span> y)))</span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> control-string x)))</span><br></pre></td></tr></table></figure><p>但<code>format</code>的灵活性，允许使用者将命令的前缀参数也放到控制字符串之后的列表中，因此可以写成如下更简练的实现</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> print-x-in-base-y (<span class="name">x</span> y)</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~VR"</span> y x))</span><br></pre></td></tr></table></figure><p>而且不只一个，你可以把所有参数都写成参数的形式</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> print-x-in-base-y (<span class="name">x</span></span><br><span class="line">                          <span class="symbol">&amp;optional</span> y</span><br><span class="line">                          <span class="symbol">&amp;rest</span> args</span><br><span class="line">                          <span class="symbol">&amp;key</span> mincol padchar commachar commainterval)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> args))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~V,V,V,V,VR"</span></span><br><span class="line">          y mincol padchar commachar commainterval x))</span><br></pre></td></tr></table></figure><p>恭喜你重新发明了<code>~R</code>，而且还不支持<code>:</code>和<code>@</code>修饰符。</p><h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><p>要在CL中打印形如<code>2021-01-29 22:43</code>这样的日期和时间字符串，是一件比较麻烦的事情</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">multiple-value-bind</span> (<span class="name">sec</span> min hour date mon year)</span><br><span class="line">    (<span class="name">decode-universal-time</span> (<span class="name">get-universal-time</span>))</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> sec))</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">"~4D-~2,'0D-~2,'0D ~2,'0D:~2,'0D~%"</span></span><br><span class="line">          year mon date hour min))</span><br></pre></td></tr></table></figure><p>谁让CL没有内置像Python的<code>datetime</code>模块这般完善的功能呢。不过，借助<code>format</code>的<code>~/</code>命令，我们可以在控制字符串中写上要调用的自定义函数，来深度定制打印出来的内容。以打印上述格式的日期和时间为例，首先定义一个后续要用的自定义函数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> yyyy-mm-dd-HH-MM (<span class="name">dest</span> arg is-colon-p is-at-p <span class="symbol">&amp;rest</span> args)</span><br><span class="line">  (<span class="name">declare</span> (<span class="name">ignorable</span> args is-at-p is-colon-p))</span><br><span class="line">  (<span class="name">multiple-value-bind</span> (<span class="name">sec</span> min hour date mon year)</span><br><span class="line">      (<span class="name">decode-universal-time</span> arg)</span><br><span class="line">    (<span class="name">declare</span> (<span class="name">ignorable</span> sec))</span><br><span class="line">    (<span class="name">format</span> dest <span class="string">"~4D-~2,'0D-~2,'0D ~2,'0D:~2,'0D~%"</span></span><br><span class="line">            year mon date hour min)))</span><br></pre></td></tr></table></figure><p>然后便可以直接在控制字符串中使用它的名字</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">format</span> <span class="literal">t</span> <span class="string">"~/yyyy-mm-dd-HH-MM/"</span> (<span class="name">get-universal-time</span>))</span><br></pre></td></tr></table></figure><p>在我的机器上运行的时候，打印内容为<code>2021-01-29 22:51</code>。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><code>format</code>可以做的事情还有很多，CL的HyperSpec中有关于<code>format</code>函数的<a href="http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/sec_22-3.html" target="_blank" rel="noopener">详细介绍</a>，CL爱好者一定不容错过。</p><p>最后，其实Python跟CL并不怎么像。每每看到Python中的<code>__eq__</code>、<code>__ge__</code>，以及<code>__len__</code>等方法的巧妙运用时，身为一名Common Lisp爱好者，我都会流露出羡慕的神情。纵然CL被称为可扩展的编程语言，这些平凡的功能却依旧无法方便地做到呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="实战CommonLisp" scheme="https://liutos.github.io/categories/%E5%AE%9E%E6%88%98CommonLisp/"/>
    
    
      <category term="common lisp" scheme="https://liutos.github.io/tags/common-lisp/"/>
    
      <category term="lisp" scheme="https://liutos.github.io/tags/lisp/"/>
    
      <category term="format" scheme="https://liutos.github.io/tags/format/"/>
    
      <category term="格式化打印" scheme="https://liutos.github.io/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%89%93%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的第一个VSCode扩展</title>
    <link href="https://liutos.github.io/2021/01/02/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAVSCode%E6%8F%92%E4%BB%B6/"/>
    <id>https://liutos.github.io/2021/01/02/年轻人的第一个VSCode插件/</id>
    <published>2021-01-02T08:18:34.000Z</published>
    <updated>2021-01-02T08:28:06.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>入坑<code>VS Code</code>前，我已经是一名久经考验的<code>Emacs</code>老用户了，因此开始正式使用<code>VS Code</code>后，我第一时间启用了它的<a href="https://marketplace.visualstudio.com/items?itemName=hiro-sun.vscode-emacs" target="_blank" rel="noopener"><code>Emacs Keymap</code></a>。但不久我便发现，这套键映射缺少一个重要的快捷键——<code>ctrl-l</code>。</p><p>在<code>Emacs</code>中，<code>ctrl-l</code>对应的命令是<code>recenter-top-bottom</code>，它用于将光标所在的行轮替地滚动到可视区域（即<code>Emacs</code>中的<code>window</code>）的中间、顶部，以及底部（如下图所示）</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210102/Emacs的ctrl-l效果演示.gif" alt=""></p><p>这是我高频使用的一个功能，尤其是跳转到函数的定义的首行后，我习惯于连按两次，将其滚动到<code>window</code>的顶部以便在一屏中看到尽量多的内容。</p><p>为了避免重复发明轮子，我先搜索了一番，找到了一个宣称实现了该功能的扩展<a href="https://marketplace.visualstudio.com/items?itemName=yeannylam.recenter-top-bottom" target="_blank" rel="noopener"><code>Recenter Top Bottom</code></a>。可惜的是，安装后并不生效。</p><p>难道只能委屈自己用鼠标小心翼翼地将光标所在行滚到顶部了吗？当然不是。既然没有开箱即用的，那便自己写一个<code>VS Code</code>的扩展实现这个功能吧。</p><h1 id="年轻人的第一个VS-Code扩展"><a href="#年轻人的第一个VS-Code扩展" class="headerlink" title="年轻人的第一个VS Code扩展"></a>年轻人的第一个VS Code扩展</h1><h2 id="创建VS-Code扩展的项目"><a href="#创建VS-Code扩展的项目" class="headerlink" title="创建VS Code扩展的项目"></a>创建VS Code扩展的项目</h2><p>要想入门<code>VS Code</code>扩展的开发，官方便提供了一份不错的<a href="https://code.visualstudio.com/api/get-started/your-first-extension" target="_blank" rel="noopener">教程</a>。一个扩展有许多的“八股文”代码，可以用<code>yo</code>和<code>generator-code</code>来快速生成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br><span class="line">yo code</span><br></pre></td></tr></table></figure><p>到这里，便得到了一个名为<code>helloworld</code>的目录了。用<code>VS Code</code>打开它，接下来要在其中大展身手。</p><h2 id="实现将光标所在行垂直居中的功能"><a href="#实现将光标所在行垂直居中的功能" class="headerlink" title="实现将光标所在行垂直居中的功能"></a>实现将光标所在行垂直居中的功能</h2><p><code>VS Code</code>扩展的核心逻辑定义在文件<code>src/extension.ts</code>中。在<code>yo</code>生成的示例代码中，用<code>registerCommand</code>注册了一个名为<code>helloworld.helloWorld</code>的命令，其逻辑是简单地在右下角弹出一句<code>Hello VS Code from HelloWorld!</code>。这个回调函数，便是业务逻辑的落脚点。</p><p>要想实现将光标所在行滚动到中间的功能，首先要知道<code>VS Code</code>为开发者提供了哪些支持。在摸索了一通从<code>VS Code</code>的<a href="https://code.visualstudio.com/api/references/vscode-api" target="_blank" rel="noopener"><code>API文档</code></a>后，我有了以下的线索：</p><ol><li>通过<code>vscode.window.activeTextEditor</code>可以取得当前聚焦的编辑器——其值可能为空（<code>undefined</code>）；</li><li><code>TextEditor</code>实例的属性<code>.selection.active</code>可以取得当前光标的位置；</li><li><code>TextEditor</code>实例有一个方法<code>revealRange</code>可以滚动文本来改变展示的范围，它需要一个<code>vscode.Range</code>类的实例，以及一个<code>vscode.TextEditorRevealType</code>类型的枚举值；</li><li><code>vscode.TextEditorRevealType.InCenter</code>的效果是将所给定的范围展示在中间，<code>vscode.TextEditorRevealType.AtTop</code>则是置顶。</li></ol><p>有了这些知识储备，实现这样的一个回调函数便是信手拈来的事情了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recenterTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> editor = vscode.window.activeTextEditor;</span><br><span class="line">  <span class="keyword">if</span> (!editor) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> cursorPosition = editor.selection.active;</span><br><span class="line">  editor.revealRange(<span class="keyword">new</span> vscode.Range(cursorPosition, cursorPosition), vscode.TextEditorRevealType.InCenter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于暂时没有配置该命令的快捷键，只能用<code>VS Code</code>的命令面板来调用</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20210102/初步实现居中的效果.gif" alt=""></p><h2 id="实现将光标所在行置顶的功能"><a href="#实现将光标所在行置顶的功能" class="headerlink" title="实现将光标所在行置顶的功能"></a>实现将光标所在行置顶的功能</h2><p>接下来我将实现连续调用两次<code>helloworld.helloWorld</code>命令，把光标所在行滚动到顶部的效果。在<code>Emacs</code>中，可以很轻松地知道一个命令是否被连续运行——<code>Emacs</code>有一个名为<code>last-command</code>的变量存储着上一个命令的名称，只需要检查其是否等于<code>recenter-top-bottom</code>即可。但<code>VS Code</code>没有暴露这么强大的功能，只能另辟蹊径。</p><p>我的策略是，如果调用<code>helloworld.helloWorld</code>时光标的位置，与上一次调用该命令时的位置相同，就认为是连续调用。为此，需要两个在函数<code>recenterTop</code>之外定义的变量：</p><ol><li><code>previousPosition</code>负责记录上一次调用<code>recenterTop</code>时光标的位置，它的初始值为<code>null</code>；</li><li><code>revealType</code>存储着上一次调整展示范围时传递给<code>TextEditor</code>实例的<code>revealRange</code>方法的第二个参数的值，它的初始值也为<code>null</code>。</li></ol><p>我的目标是尽量模拟<code>Emacs</code>中的<code>recenter-top-bottom</code>所具备的、交替使用居中、置顶效果的特点，因此：</p><ol><li>如果<code>revealType</code>为<code>null</code>，意味着这是第一次调用<code>recenterTop</code>，那么效果便是居中。否则；</li><li>如果这一次与上一次的光标位置不同，意味着在上一次调用<code>recenterTop</code>后调用过其它命令，效果依然是居中。否则；</li><li>如果<code>revealType</code>已经是居中了，就改为置顶。否则；</li><li>将<code>revealType</code>改为居中。</li></ol><blockquote><p>Talk is cheap. Show me the code.</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> previousPosition: <span class="literal">null</span>|vscode.Position = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> revealType: <span class="literal">null</span>|vscode.TextEditorRevealType = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recenterTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> editor = vscode.window.activeTextEditor;</span><br><span class="line">  <span class="keyword">if</span> (!editor) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> cursorPosition = editor.selection.active;</span><br><span class="line">  <span class="keyword">if</span> (!revealType) &#123;</span><br><span class="line">    revealType = vscode.TextEditorRevealType.InCenter;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (previousPosition &amp;&amp; !cursorPosition.isEqual(previousPosition)) &#123;</span><br><span class="line">    revealType = vscode.TextEditorRevealType.InCenter;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (revealType === vscode.TextEditorRevealType.InCenter) &#123;</span><br><span class="line">    revealType = vscode.TextEditorRevealType.AtTop;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    revealType = vscode.TextEditorRevealType.InCenter;</span><br><span class="line">  &#125;</span><br><span class="line">  previousPosition = cursorPosition;</span><br><span class="line">  editor.revealRange(<span class="keyword">new</span> vscode.Range(cursorPosition, cursorPosition), revealType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义快捷键"><a href="#定义快捷键" class="headerlink" title="定义快捷键"></a>定义快捷键</h2><p>通过命令面板来使用不是我的最终目标，通过快捷键才是。根据<code>VS Code</code>的<a href="https://code.visualstudio.com/api/references/contribution-points#contributes.keybindings" target="_blank" rel="noopener">文档</a>可以知道，只要在<code>package.json</code>的<code>contributes</code>对象中，新增名为<code>keybindings</code>的属性，并定义命令及按键序列即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 此处省略其它不必要的属性</span></span><br><span class="line">  <span class="string">"contributes"</span>: &#123;</span><br><span class="line">    <span class="string">"keybindings"</span>:&#123; <span class="comment">// 新增属性</span></span><br><span class="line">      <span class="string">"command"</span>: <span class="string">"helloworld.helloWorld"</span>,</span><br><span class="line">      <span class="string">"key"</span>: <span class="string">"ctrl+l"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果看过我之前的文章<a href="https://liutos.github.io/2020/09/28/%E6%89%8B%E6%8C%87%E7%96%BC%EF%BC%8C%E5%86%99%E7%82%B9%E4%BB%A3%E7%A0%81%E7%BC%93%E8%A7%A3%E4%B8%80%E4%B8%8B/">《手指疼，写点代码缓解一下》</a>的读者应当会记得，我已经从<code>Emacs Keymap</code>“叛逃”到了<code>Vim Keymap</code>了。所以，我并没有真正用上上述的<code>VS Code</code>扩展。相反，目前高频使用的是<code>Vim Keymap</code>内置的<code>z-.</code>以及<code>z-↵</code>了——前者用于垂直居中，后者用于置顶。</p><p>爱护手指，从使用<code>Vim Keymap</code>做起。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="editor" scheme="https://liutos.github.io/tags/editor/"/>
    
      <category term="编辑器" scheme="https://liutos.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="vscode" scheme="https://liutos.github.io/tags/vscode/"/>
    
      <category term="工具" scheme="https://liutos.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>自己动手丰衣足食——用Hammerspoon控制Emacs的窗口</title>
    <link href="https://liutos.github.io/2020/12/20/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E4%B8%B0%E8%A1%A3%E8%B6%B3%E9%A3%9F%E2%80%94%E2%80%94%E7%94%A8Hammerspoon%E6%8E%A7%E5%88%B6Emacs%E7%9A%84%E7%AA%97%E5%8F%A3/"/>
    <id>https://liutos.github.io/2020/12/20/自己动手丰衣足食——用Hammerspoon控制Emacs的窗口/</id>
    <published>2020-12-20T13:00:07.000Z</published>
    <updated>2020-12-20T13:00:07.698Z</updated>
    
    <content type="html"><![CDATA[<p>有一天，我用<code>Homebrew</code>安装了一些软件——因为已经是一个月前的事情了，所以已经记不清是安装了什么。安装后并没有立即出现什么问题，只是又过了两天我重新启动电脑后，发现同样是由<code>Homebrew</code>安装的<code>Emacs</code>不由分说地无法启动了。这下可麻烦了，毕竟我是<code>org-mode</code>的重度使用者，还需要偶尔用<code>SLIME</code>写点Common Lisp的代码，而它们都运行在<code>Emacs</code>中。</p><p>直觉告诉我，也许重新安装一下<code>Emacs</code>，一切就可以恢复正常。重装了<code>Emacs</code>后，又遇到了别的问题——用<code>BetterTouchTools</code>在Touch Bar中添加的按钮，无法在<code>Emacs</code>已经启动的情况下，切换到它的窗口上。</p><p>非要说，问题其实也不大，毕竟很多时候是将MacBook Pro合上盖子当主机用的，Touch Bar在工作时的使用频率并不高。此外，糊<code>Node.js</code>等语言的代码时也用不到<code>Emacs</code>——还是<code>VSCode</code>更合适。</p><p>但这就是令人不爽，因此我决定要解决它——用<code>Hammerspoon</code>。</p><h1 id="Hammerspoon是什么？"><a href="#Hammerspoon是什么？" class="headerlink" title="Hammerspoon是什么？"></a>Hammerspoon是什么？</h1><p><code>Hammerspoon</code>的<a href="https://www.hammerspoon.org/" target="_blank" rel="noopener">官网</a>很好地说明了这款工具的定位和原理</p><blockquote><p>This is a tool for powerful automation of OS X. At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting  engine. What gives Hammerspoon its power is a set of extensions that expose  specific pieces of system functionality, to the user.</p></blockquote><ol><li>它运行在OS X上——现在应该叫macOS；</li><li>它是用来自动化操作的——就像系统内置的<code>Automator</code>或第三方的<code>Alfred Workflow</code>那样；</li><li>它的原理是将操作系统的功能封装成了可以用<code>Lua</code>代码调用的模块；</li></ol><p>例如下面的代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"E"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  hs.alert.show(<span class="string">"Hello World!"</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>就可以让使用者在按下组合键<code>⌘⌥⌃e</code>的时候，在屏幕正中间显示<code>Hello World!</code>这段文本</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201220/hammerspoon的示例.jpg" alt=""></p><h1 id="为什么用Hammerspoon？"><a href="#为什么用Hammerspoon？" class="headerlink" title="为什么用Hammerspoon？"></a>为什么用Hammerspoon？</h1><p><code>Hammerspoon</code>正好可以解决我的问题，它的<code>hs.window</code>模块既可以让使用者遍历所有打开的窗口（用<a href="https://www.hammerspoon.org/docs/hs.window.html#allWindows" target="_blank" rel="noopener"><code>hs.window.allWindows</code>函数</a>），也可以聚焦到指定的窗口上（用<a href="https://www.hammerspoon.org/docs/hs.window.html#focus" target="_blank" rel="noopener"><code>focus</code>方法</a>）。有了它们，将<code>Emacs</code>调到最前面（front-most）来也就是水到渠成的事情了：</p><ol><li>调用函数<code>hs.window.allWindows</code>函数，获得所有窗口的列表；</li><li>逐个检查列表中的窗口对象，如果属于<code>Emacs</code>的，就调用窗口的方法<code>focus</code>，并跳出循环。</li></ol><p>剩下的两个问题便是：</p><ol><li><code>Emacs</code>的<code>bundle ID</code>是什么；</li><li>如何知道一个窗口对象的<code>bundle ID</code>。</li></ol><h1 id="Emacs的bundle-ID"><a href="#Emacs的bundle-ID" class="headerlink" title="Emacs的bundle ID"></a>Emacs的bundle ID</h1><p><code>Bundle ID</code>可以在macOS中独一无二地标识一个应用。要想知道<code>Emacs</code>的<code>bundle ID</code>是什么，只需要打开文件<code>/Applications/Emacs.app/Contents/Info.plist</code>，看看其中键为<code>CFBundleIdentifier</code>的值即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  Contents grep -A 1 <span class="string">'CFBundleIdentifier'</span> Info.plist</span><br><span class="line">&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</span><br><span class="line">&lt;string&gt;org.gnu.Emacs&lt;/string&gt;</span><br><span class="line">➜  Contents</span><br></pre></td></tr></table></figure><p>可以看到，<code>Emacs</code>的<code>bundle ID</code>是<code>org.gnu.Emacs</code>。</p><h1 id="来点Lua代码吧"><a href="#来点Lua代码吧" class="headerlink" title="来点Lua代码吧"></a>来点Lua代码吧</h1><p>有了<code>Emacs</code>的<code>bundle ID</code>，接下来就可以在<code>Hammerspoon</code>中定义快捷键了。由于最后会通过Touch Bar上的按钮来触发这组快捷键，复杂点也不要紧，因此我直接沿用了<code>Hammerspoon</code>的入门指引中作为例子的<code>⌘⌥⌃w</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"W"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>为了在一个循环中逐个遍历窗口对象，将<code>hs.window.allWindows</code>的返回值保存到一个局部变量中</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"W"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> windows = hs.window.allWindows()</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>照着简书上的<a href="https://www.jianshu.com/p/de5a4b132918" target="_blank" rel="noopener">这篇文章</a>，依葫芦画瓢地用<code>for</code>和<code>pairs</code>来遍历变量<code>windows</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"W"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> windows = hs.window.allWindows()</span><br><span class="line">      <span class="comment">-- 在Lua中遍历表的方法：https://www.jianshu.com/p/de5a4b132918</span></span><br><span class="line">      <span class="keyword">for</span> _, win <span class="keyword">in</span> <span class="built_in">pairs</span>(windows) <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>窗口自身没有<code>bundle ID</code>，为此需要先获取窗口所属的应用。查看文档可以知道，有一个<a href="https://www.hammerspoon.org/docs/hs.window.html#application" target="_blank" rel="noopener"><code>application</code>方法</a>正是用来获取应用对象的</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"W"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> windows = hs.window.allWindows()</span><br><span class="line">      <span class="comment">-- 在Lua中遍历表的方法：https://www.jianshu.com/p/de5a4b132918</span></span><br><span class="line">      <span class="keyword">for</span> _, win <span class="keyword">in</span> <span class="built_in">pairs</span>(windows) <span class="keyword">do</span></span><br><span class="line">         <span class="keyword">local</span> app = win:application()</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>调用<code>allWindows</code>时使用的是英文句号（<code>.</code>），调用<code>application</code>则是用冒号（<code>:</code>），这正是<code>Lua</code>中调用函数与方法时语法上的差异。</p><p>再用应用的<a href="https://www.hammerspoon.org/docs/hs.application.html#bundleID" target="_blank" rel="noopener"><code>bundleID</code></a>方法获得它的<code>bundle ID</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"W"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> windows = hs.window.allWindows()</span><br><span class="line">      <span class="comment">-- 在Lua中遍历表的方法：https://www.jianshu.com/p/de5a4b132918</span></span><br><span class="line">      <span class="keyword">for</span> _, win <span class="keyword">in</span> <span class="built_in">pairs</span>(windows) <span class="keyword">do</span></span><br><span class="line">         <span class="keyword">local</span> app = win:application()</span><br><span class="line">         <span class="keyword">local</span> bundleID = app:bundleID()</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>现在，只要变量<code>bundleID</code>等于<code>Emacs</code>的<code>bundle ID</code>就可以聚焦到当前遍历的窗口上了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"W"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> windows = hs.window.allWindows()</span><br><span class="line">      <span class="comment">-- 在Lua中遍历表的方法：https://www.jianshu.com/p/de5a4b132918</span></span><br><span class="line">      <span class="keyword">for</span> _, win <span class="keyword">in</span> <span class="built_in">pairs</span>(windows) <span class="keyword">do</span></span><br><span class="line">         <span class="keyword">local</span> app = win:application()</span><br><span class="line">         <span class="keyword">local</span> bundleID = app:bundleID()</span><br><span class="line">         <span class="keyword">if</span> bundleID == <span class="string">"org.gnu.Emacs"</span> <span class="keyword">then</span></span><br><span class="line">            win:focus()</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><h1 id="让Touch-Bar按钮触发这一切"><a href="#让Touch-Bar按钮触发这一切" class="headerlink" title="让Touch Bar按钮触发这一切"></a>让Touch Bar按钮触发这一切</h1><p>只需要在<code>BetterTouchTools</code>中配置一下即可</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201220/用BTT触发Hammerspoon的快捷键.jpg" alt=""></p><p>这个方法比此前唤起<code>/Applications/Emacs.app</code>的方式更好，因为它只依赖于<code>Emacs</code>逻辑上亘古不变的东西——<code>bundle ID</code>，而不依赖于其物理上的安装位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一箭双雕——org-mode中的ID和CUSTOM_ID字段</title>
    <link href="https://liutos.github.io/2020/11/18/%E4%B8%80%E7%AE%AD%E5%8F%8C%E9%9B%95%E2%80%94%E2%80%94org-mode%E4%B8%AD%E7%9A%84ID%E5%92%8CCUSTOM-ID%E5%AD%97%E6%AE%B5/"/>
    <id>https://liutos.github.io/2020/11/18/一箭双雕——org-mode中的ID和CUSTOM-ID字段/</id>
    <published>2020-11-18T13:44:36.000Z</published>
    <updated>2020-11-19T12:59:04.073Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“实战Elisp”系列旨在讲述我使用Elisp定制Emacs的经验，抛砖引玉，还请广大Emacs同好不吝赐教——如果真的有广大Emacs用户的话，哈哈哈。</p></blockquote><p>在<code>org-mode</code>中，一个条目（entry）可以设置多个属性（<a href="https://orgmode.org/guide/Properties.html" target="_blank" rel="noopener">Properties</a>）。有的属性是<code>org-mode</code>内置的，有它们的特殊用途。有的属性是自定义的，用在一些插件或仅仅用于记录信息。<code>CUSTOM_ID</code>属于前者，而<code>ID</code>属性后者。</p><h1 id="CUSTOM-ID"><a href="#CUSTOM-ID" class="headerlink" title="CUSTOM_ID"></a>CUSTOM_ID</h1><p><code>CUSTOM_ID</code>用于跳转。<code>org-mode</code>支持丰富的<a href="https://orgmode.org/manual/External-Links.html" target="_blank" rel="noopener">外部链接</a>格式，其中之一便是链接到指定<code>.org</code>文件的指定<code>CUSTOM_ID</code>的条目。</p><p>比如在一个<code>.org</code>文件中有<code>file:/Users/liutos/Dropbox/gtd/roles/writer.org::#d1bdc978-a8ce-4266-9ffa-b6041f818431</code>这么一段文本，那么当光标置于这个文本中时，按下快捷键<code>C-c C-o</code>，Emacs便会打开文件<code>/Users/liutos/Dropbox/gtd/roles/writer.org</code>，并将光标对应的条目上。</p><h1 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h1><p><code>ID</code>用于联系两个条目。一个名叫<code>org-edna</code>的第三方插件能够实现两个条目间的依赖，其中一个要素便是条目的<code>ID</code>属性。</p><p>比如我有一个<code>讲解Ada语言</code>的任务（以一个条目的形式存在），同时也有一个<code>学习Ada语言</code>的任务（另一个条目）。显然，必须先学习一番才能讲给他人听，所以第一个条目依赖于第二个条目，于是我先给<code>学习Ada语言</code>的条目设置一个<code>ID</code>属性，值为<code>905fc2f4-4e28-4966-84fa-84c9e6bae96c</code>，然后再为<code>讲解Ada语言</code>的条目中设置一个<code>BLOCKER</code>属性，值为<code>ids(905fc2f4-4e28-4966-84fa-84c9e6bae96c)</code>。如此一来，当<code>讲解Ada语言</code>的条目出现在<code>*Org Agenda*</code>中时，Emacs会将其置灰显示，代表它处于阻塞的状态，必须先处理它的依赖才行。</p><h1 id="自动填充CUSTOM-ID和ID"><a href="#自动填充CUSTOM-ID和ID" class="headerlink" title="自动填充CUSTOM_ID和ID"></a>自动填充CUSTOM_ID和ID</h1><p>建立依赖和跳转都是很常用的功能，因此我会给每一个条目都设置<code>CUSTOM_ID</code>和<code>ID</code>属性。为了免除每次都手动设置的麻烦，我用<code>org-mode</code>的<a href="https://orgmode.org/manual/Capture-templates.html" target="_blank" rel="noopener">capture-template</a>特性来实现自动填充。</p><p>capture-template是<code>org-mode</code>的又一项利器，用于生成条目间共性的内容，比如行首的星号、关键字，以及写入到哪一个文件的哪一个层级中。<code>org-mode</code>的官网便有一个例子</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> org-capture-templates</span><br><span class="line">      '((<span class="string">"t"</span> <span class="string">"Todo"</span> entry (file+headline <span class="string">"~/org/gtd.org"</span> <span class="string">"Tasks"</span>)</span><br><span class="line">         <span class="string">"* TODO %?\n  %i\n  %a"</span>)</span><br><span class="line">        (<span class="string">"j"</span> <span class="string">"Journal"</span> entry (file+datetree <span class="string">"~/org/journal.org"</span>)</span><br><span class="line">         <span class="string">"* %?\nEntered on %U\n  %i\n  %a"</span>)))</span><br></pre></td></tr></table></figure><p>在capture-template中除了可以用预置的<a href="https://orgmode.org/manual/Template-expansion.html" target="_blank" rel="noopener">占位符</a>（比如上文的<code>%U</code>、<code>%i</code>，以及<code>%a</code>），还可以调用任意的Elisp函数——这正适合填充<code>ID</code>和<code>CUSTOM_ID</code>这类不重复，并且有一定的格式要求的属性。<code>ID</code>属性的值可以用来自于第三方插件<code>uuidgen</code>的<code>uuidgen-4</code>函数来生成</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> org-capture-templates</span><br><span class="line">      '((<span class="string">"t"</span> <span class="string">"Todo"</span> entry (file+headline <span class="string">"~/org/gtd.org"</span> <span class="string">"Tasks"</span>)</span><br><span class="line">         <span class="string">"* TODO %?  :PROPERTIES:\n  :CUSTOM_ID: %(uuidgen-4)\n  :ID: %(uuidgen-4)\n  :END:"</span>)))</span><br></pre></td></tr></table></figure><p>美中不足的是，<code>CUSTOM_ID</code>和<code>ID</code>的值是不同的，因为<code>uuidgen-4</code>每次都会返回不同的字符串。有没有什么办法能够让它们一样的呢？答案是肯定的。</p><h1 id="一式两份"><a href="#一式两份" class="headerlink" title="一式两份"></a>一式两份</h1><p>既然两次调用<code>uuidgen-4</code>的结果不同，那么就将第一次调用后的结果保存起来，然后重复使用即可。思路很简单，实现代码也很直白</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">let</span> (<span class="name">lt-org-capture--uuid</span>)</span><br><span class="line">  (<span class="name">defun</span> lt-org-capture-uuidgen ()</span><br><span class="line">    <span class="string">"生成一个UUID并填充到词法作用域的变量中。"</span></span><br><span class="line">    (<span class="name">setf</span> lt-org-capture--uuid (<span class="name">uuidgen-4</span>))</span><br><span class="line">    lt-org-capture--uuid)</span><br><span class="line">  (<span class="name">defun</span> lt-org-capture-uuidclr ()</span><br><span class="line">    <span class="string">"返回生成好的UUID并清空它。"</span></span><br><span class="line">    lt-org-capture--uuid))</span><br></pre></td></tr></table></figure><p>capture-template也是水到渠成的</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> org-capture-templates</span><br><span class="line">      '((<span class="string">"t"</span> <span class="string">"Todo"</span> entry (file+headline <span class="string">"~/org/gtd.org"</span> <span class="string">"Tasks"</span>)</span><br><span class="line">         <span class="string">"* TODO %?  :PROPERTIES:\n  :CUSTOM_ID: %(lt-org-capture-uuidgen)\n  :ID: %(lt-org-capture-uuidclr)\n  :END:"</span>)))</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在上面的函数定义中，我试图利用词法作用域特性，使得<code>lt-org-capture--uuid</code>只能被<code>lt-org-capture-uuidgen</code>和<code>lt-org-capture-uuidclr</code>读写。遗憾的是，Elisp并不支持词法作用域，<code>lt-org-capture--uuid</code>实际上是一个全局变量——完全可以用<code>C-h v</code>来审视它。</p><p>全文完。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="实战Elisp" scheme="https://liutos.github.io/categories/%E5%AE%9E%E6%88%98Elisp/"/>
    
    
      <category term="org-mode" scheme="https://liutos.github.io/tags/org-mode/"/>
    
      <category term="elisp" scheme="https://liutos.github.io/tags/elisp/"/>
    
      <category term="emacs" scheme="https://liutos.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>精确之美——用TikZ画硬盘示意图</title>
    <link href="https://liutos.github.io/2020/10/29/%E7%B2%BE%E7%A1%AE%E4%B9%8B%E7%BE%8E%E2%80%94%E2%80%94%E7%94%A8TikZ%E7%94%BB%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE/"/>
    <id>https://liutos.github.io/2020/10/29/精确之美——用TikZ画硬盘示意图/</id>
    <published>2020-10-29T05:42:17.000Z</published>
    <updated>2020-10-29T14:07:17.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>备考某等级考试的时候，在教材中碰到了几个一直不太理解的、关于硬盘的概念：磁道、柱面号、扇区。然而教材没有配图，无法直观地了解这些概念的物理形态。维基百科的<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="noopener">硬盘</a>词条页中倒是有一副不错的示意图，我截图搬运了过来</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/维基百科机械硬盘示意图.png" alt="机械硬盘示意图"></p><p>原图是一张SVG图片，本质上是一堆指令——也就是所谓的语绘啦。我是一个语绘爱好者，也想试试看能否用代码画一幅差不多的图出来。</p><p>在旧文<a href="https://liutos.github.io/2020/05/07/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%89%B9%E6%9C%89%E7%9A%84%E7%94%BB%E5%9B%BE%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94%E8%AF%AD%E7%BB%98%E5%B7%A5%E5%85%B7%E5%B0%8F%E5%85%A5%E9%97%A8/">《程序员特有的画图方式——语绘工具小入门》</a>中，我演示过几款写代码画图的工具，但它们都不适合用来绘制几何图形，所以这次它们没有用武之地。</p><p>本来我想试试用<a href="https://zh.wikipedia.org/wiki/MetaPost" target="_blank" rel="noopener">MetaPost</a>来画的，但鉴于“入门”了太多次，这次还是换点新花样吧。这一次，我用LaTeX+TikZ来画。</p><h1 id="TikZ是什么及光速入门"><a href="#TikZ是什么及光速入门" class="headerlink" title="TikZ是什么及光速入门"></a>TikZ是什么及光速入门</h1><p>著名的<del>压泡面神器、麻将桌脚垫</del>《TAOCP》的作者发明了<a href="https://zh.wikipedia.org/wiki/TeX" target="_blank" rel="noopener">TeX</a>，知名的<del>Raft竞品</del>Paxos算法的作者在此基础上创造了<a href="https://zh.wikipedia.org/wiki/LaTeX" target="_blank" rel="noopener">LaTeX</a>，它们都是<del>程序员简历</del>论文排版的好帮手。而TikZ则是如虎添翼地在LaTeX中实现了简单易懂的绘图功能的一个<del>红包</del>宏包（macro package，TeX的术语）。简而言之，TikZ自定义了一套“语言”，可以在用LaTeX编写的文档中画出各种图形。</p><p>百闻不如一见，我演示一下如何用TikZ画一条线段、一个圆，以及一段圆弧。先将下列的代码保存到一个文件<code>three_in_one.tex</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;standalone&#125;</span><br><span class="line">\usepackage&#123;tikz&#125;</span><br><span class="line">\usetikzlibrary&#123;shapes.geometric, arrows&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;tikzpicture&#125;[scale=2]</span><br><span class="line">  %% 画一条从原点指向(1, 1)的线段</span><br><span class="line">  \draw (0, 0) -- (1, 1);</span><br><span class="line">  %% 画一个以(1, 1)为圆心，半径为2的圆。</span><br><span class="line">  \draw (1, 1) circle (2);</span><br><span class="line">  %% 画一段以原点为圆心，半径为1，张开角度为30度的圆弧。</span><br><span class="line">  \draw (1, 0) arc (0:30:1);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>再使用<code>xelatex</code>将其编译成PDF文件（<code>xelatex</code>可以通过安装TeXLive 2020获得）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xelatex three_in_one.tex</span><br></pre></td></tr></table></figure><p>此时便得到了<code>three_in_one.pdf</code>文件。为了可以在文章中显示，我用ImageMagick将其转换为PNG文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert three_in_one.pdf /tmp/three_in_one.png</span><br></pre></td></tr></table></figure><p>最终的图片如下</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/three_in_one.png" alt=""></p><p>简单，就像画一匹马一样简单。</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/怎样画马.jpeg" alt=""></p><p>现在该来试试用TikZ复刻维基百科上的硬盘示意图了。</p><h1 id="来点同心圆"><a href="#来点同心圆" class="headerlink" title="来点同心圆"></a>来点同心圆</h1><p>在原图中最引人注目的，当属那十几个同心圆了。简单起见，我只画六个圆。这六个圆的半径相差<code>1pt</code>（<code>pt</code>是TikZ默认的长度单位），从<code>3pt</code>一直递增到<code>8pt</code>，它们的圆心都在坐标原点<code>(0, 0)</code>上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%% 为了节省篇幅，只给出TikZ部分的代码。</span><br><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_circle.png" alt=""></p><h1 id="来点等分线"><a href="#来点等分线" class="headerlink" title="来点等分线"></a>来点等分线</h1><p>原图中有12根线段，将每一个圆等分成了全等的12份。从前一节的内容可知，要用<code>\draw</code>命令绘制线段，需要的是线段两端的坐标，那么这批坐标要怎么计算呢？尽管可以用三角函数计算出这些点的笛卡尔坐标，但在TikZ中可以用更方便的极坐标来指定这些点。</p><p>以原图中从X轴开始逆时针旋转遇到的第一条线段为例，它在半径为<code>3pt</code>的圆上的点的坐标为<code>(30:3)</code>（30是极坐标中的角度，3是半径长度），而在半径为<code>8pt</code>的圆上的点的坐标为<code>(30:8)</code>，因此可以用<code>\draw (30:3) -- (30:8)</code>来画出这根线段。</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_30.png" alt=""></p><p>通过调整其中的角度可以画出剩余的其它线段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line"></span><br><span class="line">  \draw (0:3) -- (0:8);</span><br><span class="line">  \draw (30:3) -- (30:8);</span><br><span class="line">  \draw (60:3) -- (60:8);</span><br><span class="line">  \draw (90:3) -- (90:8);</span><br><span class="line">  \draw (120:3) -- (120:8);</span><br><span class="line">  \draw (150:3) -- (150:8);</span><br><span class="line">  \draw (180:3) -- (180:8);</span><br><span class="line">  \draw (210:3) -- (210:8);</span><br><span class="line">  \draw (240:3) -- (240:8);</span><br><span class="line">  \draw (270:3) -- (270:8);</span><br><span class="line">  \draw (300:3) -- (300:8);</span><br><span class="line">  \draw (330:3) -- (330:8);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_split.png" alt=""></p><h1 id="来张色图"><a href="#来张色图" class="headerlink" title="来张色图"></a>来张色图</h1><p>原图大致的骨架已经画完了，现在来尝试给它上色。在TikZ中，可以用<code>\fill</code>命令给一段封闭的曲线上色。比如用<code>\fill[red] (0, 0) -- (1, 0) -- (1, 1) -- (0, 1) -- cycle</code>可以将左下角在原点、边长为<code>1pt</code>的正方形涂成红色。</p><p>先给原图中的区域B上色。区域B是一个扇形，它由两根长度为<code>8pt</code>的半径和一段夹角为30度的圆弧构成。要描述这段封闭曲线，可以借助入门一节中介绍的<code>arc</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  %% 给区域B上色。</span><br><span class="line">  \fill[blue] (0, 0) -- (30:8) arc (30:60:8) -- cycle;</span><br><span class="line"></span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line"></span><br><span class="line">  \draw (0:3) -- (0:8);</span><br><span class="line">  \draw (30:3) -- (30:8);</span><br><span class="line">  \draw (60:3) -- (60:8);</span><br><span class="line">  \draw (90:3) -- (90:8);</span><br><span class="line">  \draw (120:3) -- (120:8);</span><br><span class="line">  \draw (150:3) -- (150:8);</span><br><span class="line">  \draw (180:3) -- (180:8);</span><br><span class="line">  \draw (210:3) -- (210:8);</span><br><span class="line">  \draw (240:3) -- (240:8);</span><br><span class="line">  \draw (270:3) -- (270:8);</span><br><span class="line">  \draw (300:3) -- (300:8);</span><br><span class="line">  \draw (330:3) -- (330:8);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_B.png" alt=""></p><p><code>\fill</code>命令那一行最后的<code>cycle</code>的意思，是让曲线回到起点组成一个封闭的形状。另外，<code>\fill</code>命令需要写在<code>\draw</code>命令之前，是为了避免蓝色颜料将区域内的圆弧给盖住了。</p><p>对于区域C和区域D，方法是一样的，只是描述封闭曲线的坐标不同罢了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  %% 给区域B上色。</span><br><span class="line">  \fill[blue] (0, 0) -- (30:8) arc (30:60:8) -- cycle;</span><br><span class="line">  %% 给区域C上色。</span><br><span class="line">  \fill[purple] (30:4) -- (30:5) arc (30:60:5) -- (60:4) -- (60:4) arc (60:30:4);</span><br><span class="line">  %% 给区域D上色。</span><br><span class="line">  \fill[green] (240:6) -- (240:7) arc (240:330:7) -- (330:6) -- (330:6) arc (330:240:6);</span><br><span class="line"></span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line"></span><br><span class="line">  \draw (0:3) -- (0:8);</span><br><span class="line">  \draw (30:3) -- (30:8);</span><br><span class="line">  \draw (60:3) -- (60:8);</span><br><span class="line">  \draw (90:3) -- (90:8);</span><br><span class="line">  \draw (120:3) -- (120:8);</span><br><span class="line">  \draw (150:3) -- (150:8);</span><br><span class="line">  \draw (180:3) -- (180:8);</span><br><span class="line">  \draw (210:3) -- (210:8);</span><br><span class="line">  \draw (240:3) -- (240:8);</span><br><span class="line">  \draw (270:3) -- (270:8);</span><br><span class="line">  \draw (300:3) -- (300:8);</span><br><span class="line">  \draw (330:3) -- (330:8);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_CD.png" alt=""></p><h1 id="给环形上色"><a href="#给环形上色" class="headerlink" title="给环形上色"></a>给环形上色</h1><p>聪明的读者也许已经发现了，区域A的环形没办法用这种方式来描述。不过没关系，只要将其视为上下半两部分，再分别上色即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  %% 环的上半部分</span><br><span class="line">  \fill[red] (4, 0) -- (5, 0) arc (0:180:5) -- (-4, 0) -- (-4, 0) arc (180:0:4);</span><br><span class="line">  %% 环的下半部分</span><br><span class="line">  \fill[red] (4, 0) -- (5, 0) arc (360:180:5) -- (-4, 0) -- (-4, 0) arc (180:360:4);</span><br><span class="line">  %% 给区域B上色。</span><br><span class="line">  \fill[blue] (0, 0) -- (30:8) arc (30:60:8) -- cycle;</span><br><span class="line">  %% 给区域C上色。</span><br><span class="line">  \fill[purple] (30:4) -- (30:5) arc (30:60:5) -- (60:4) -- (60:4) arc (60:30:4);</span><br><span class="line">  %% 给区域D上色。</span><br><span class="line">  \fill[green] (240:6) -- (240:7) arc (240:330:7) -- (330:6) -- (330:6) arc (330:240:6);</span><br><span class="line"></span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line"></span><br><span class="line">  \draw (0:3) -- (0:8);</span><br><span class="line">  \draw (30:3) -- (30:8);</span><br><span class="line">  \draw (60:3) -- (60:8);</span><br><span class="line">  \draw (90:3) -- (90:8);</span><br><span class="line">  \draw (120:3) -- (120:8);</span><br><span class="line">  \draw (150:3) -- (150:8);</span><br><span class="line">  \draw (180:3) -- (180:8);</span><br><span class="line">  \draw (210:3) -- (210:8);</span><br><span class="line">  \draw (240:3) -- (240:8);</span><br><span class="line">  \draw (270:3) -- (270:8);</span><br><span class="line">  \draw (300:3) -- (300:8);</span><br><span class="line">  \draw (330:3) -- (330:8);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_ring.png" alt=""></p><h1 id="润色一下"><a href="#润色一下" class="headerlink" title="润色一下"></a>润色一下</h1><p>用macOS的“数码测色计”看了一下原图中各个区域的颜色的RGB值，区域A大概是<code>(236, 133, 130)</code>、区域B大概是<code>(122, 127, 237)</code>、区域C大概是<code>(131, 132, 139)</code>、区域D大概是<code>(0, 151, 27)</code>。接下来我让TikZ以这四种指定的颜色填充图中的四个区域，先用LaTeX的<code>\definecolor</code>命令定义四个新的颜色的名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%% 下列四行代码置于document环境之前</span><br><span class="line">\definecolor&#123;areaA&#125;&#123;RGB&#125;&#123;236,133,130&#125;</span><br><span class="line">\definecolor&#123;areaB&#125;&#123;RGB&#125;&#123;122,127,237&#125;</span><br><span class="line">\definecolor&#123;areaC&#125;&#123;RGB&#125;&#123;131,32,139&#125;</span><br><span class="line">\definecolor&#123;areaD&#125;&#123;RGB&#125;&#123;0,151,27&#125;</span><br></pre></td></tr></table></figure><p>再替换掉<code>\fill</code>命令中的颜色名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  %% 环的上半部分</span><br><span class="line">  \fill[areaA] (4, 0) -- (5, 0) arc (0:180:5) -- (-4, 0) -- (-4, 0) arc (180:0:4);</span><br><span class="line">  %% 环的下半部分</span><br><span class="line">  \fill[areaA] (4, 0) -- (5, 0) arc (360:180:5) -- (-4, 0) -- (-4, 0) arc (180:360:4);</span><br><span class="line">  %% 给区域B上色。</span><br><span class="line">  \fill[areaB] (0, 0) -- (30:8) arc (30:60:8) -- cycle;</span><br><span class="line">  %% 给区域C上色。</span><br><span class="line">  \fill[areaC] (30:4) -- (30:5) arc (30:60:5) -- (60:4) -- (60:4) arc (60:30:4);</span><br><span class="line">  %% 给区域D上色。</span><br><span class="line">  \fill[areaD] (240:6) -- (240:7) arc (240:330:7) -- (330:6) -- (330:6) arc (330:240:6);</span><br><span class="line"></span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line"></span><br><span class="line">  \draw (0:3) -- (0:8);</span><br><span class="line">  \draw (30:3) -- (30:8);</span><br><span class="line">  \draw (60:3) -- (60:8);</span><br><span class="line">  \draw (90:3) -- (90:8);</span><br><span class="line">  \draw (120:3) -- (120:8);</span><br><span class="line">  \draw (150:3) -- (150:8);</span><br><span class="line">  \draw (180:3) -- (180:8);</span><br><span class="line">  \draw (210:3) -- (210:8);</span><br><span class="line">  \draw (240:3) -- (240:8);</span><br><span class="line">  \draw (270:3) -- (270:8);</span><br><span class="line">  \draw (300:3) -- (300:8);</span><br><span class="line">  \draw (330:3) -- (330:8);</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_color.png" alt=""></p><h1 id="图文并茂"><a href="#图文并茂" class="headerlink" title="图文并茂"></a>图文并茂</h1><p>剩下的需要复刻的东西就是原图中的文字以及标注用的线了。线很容易画，只要规定了坐标后用<code>\draw</code>命令即可。比如说，我可以把四条线定义如下，其中的坐标和线段的长度纯粹是个人偏好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\draw (75:4.5) -- (75:9);</span><br><span class="line">\draw (40:7.5) -- (40:9);</span><br><span class="line">\draw (50:4.5) -- (50:9);</span><br><span class="line">\draw (285:6.5) -- (285:9);</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_line.png" alt=""></p><p>线画完了，再到每一根线的“终点”标上文字说明，这需要用到TikZ的<code>node</code>功能。用法很简单，就是在需要标注文字的坐标后，紧跟着关键字<code>node</code>，以及一段用花括号包裹的文本即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;standalone&#125;</span><br><span class="line">\usepackage&#123;tikz&#125;</span><br><span class="line">\usepackage&#123;xeCJK&#125;</span><br><span class="line">\setCJKmainfont&#123;Songti TC&#125;</span><br><span class="line">\usetikzlibrary&#123;shapes.geometric, arrows&#125;</span><br><span class="line">\definecolor&#123;areaA&#125;&#123;RGB&#125;&#123;236,133,130&#125;</span><br><span class="line">\definecolor&#123;areaB&#125;&#123;RGB&#125;&#123;122,127,237&#125;</span><br><span class="line">\definecolor&#123;areaC&#125;&#123;RGB&#125;&#123;131,32,139&#125;</span><br><span class="line">\definecolor&#123;areaD&#125;&#123;RGB&#125;&#123;0,151,27&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;tikzpicture&#125;</span><br><span class="line">  %% 环的上半部分</span><br><span class="line">  \fill[areaA] (4, 0) -- (5, 0) arc (0:180:5) -- (-4, 0) -- (-4, 0) arc (180:0:4);</span><br><span class="line">  %% 环的下半部分</span><br><span class="line">  \fill[areaA] (4, 0) -- (5, 0) arc (360:180:5) -- (-4, 0) -- (-4, 0) arc (180:360:4);</span><br><span class="line">  %% 给区域B上色。</span><br><span class="line">  \fill[areaB] (0, 0) -- (30:8) arc (30:60:8) -- cycle;</span><br><span class="line">  %% 给区域C上色。</span><br><span class="line">  \fill[areaC] (30:4) -- (30:5) arc (30:60:5) -- (60:4) -- (60:4) arc (60:30:4);</span><br><span class="line">  %% 给区域D上色。</span><br><span class="line">  \fill[areaD] (240:6) -- (240:7) arc (240:330:7) -- (330:6) -- (330:6) arc (330:240:6);</span><br><span class="line"></span><br><span class="line">  \draw (0, 0) circle (3);</span><br><span class="line">  \draw (0, 0) circle (4);</span><br><span class="line">  \draw (0, 0) circle (5);</span><br><span class="line">  \draw (0, 0) circle (6);</span><br><span class="line">  \draw (0, 0) circle (7);</span><br><span class="line">  \draw (0, 0) circle (8);</span><br><span class="line"></span><br><span class="line">  \draw (0:3) -- (0:8);</span><br><span class="line">  \draw (30:3) -- (30:8);</span><br><span class="line">  \draw (60:3) -- (60:8);</span><br><span class="line">  \draw (90:3) -- (90:8);</span><br><span class="line">  \draw (120:3) -- (120:8);</span><br><span class="line">  \draw (150:3) -- (150:8);</span><br><span class="line">  \draw (180:3) -- (180:8);</span><br><span class="line">  \draw (210:3) -- (210:8);</span><br><span class="line">  \draw (240:3) -- (240:8);</span><br><span class="line">  \draw (270:3) -- (270:8);</span><br><span class="line">  \draw (300:3) -- (300:8);</span><br><span class="line">  \draw (330:3) -- (330:8);</span><br><span class="line"></span><br><span class="line">  \draw (75:4.5) -- (75:9) node &#123;磁道&#125;;</span><br><span class="line">  \draw (40:7.5) -- (40:9) node &#123;扇面&#125;;</span><br><span class="line">  \draw (50:4.5) -- (50:9) node &#123;扇区&#125;;</span><br><span class="line">  \draw (285:6.5) -- (285:9) node &#123;簇&#125;;</span><br><span class="line">\end&#123;tikzpicture&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201029/hdd2_text.png" alt=""></p><p>需要留意的是，我在源代码开头的位置，引入了<code>xeCJK</code>宏包（<code>\usepackage{xeCJK}</code>），并且指定了中文内容用的字体为宋体（<code>\setCJKmainfont{Songti TC}</code>），这样才能成功编译。</p><p>至此，复刻算是完成了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本文只是管中窥豹，TikZ还可以画出其它更复杂更美轮美奂的图形，有兴趣的读者可以移步<a href="https://texample.net/tikz/examples/" target="_blank" rel="noopener">这里</a>观赏。此外，TikZ也可以“编程”，比如下面的两行代码便足矣画出上文中12行代码才完成的等分线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\foreach \x in &#123;0,30,60,90,120,150,180,210,240,270,300,330&#125;</span><br><span class="line">\draw (\x:3) -- (\x:8);</span><br></pre></td></tr></table></figure><p>TikZ的更多潜力和乐趣，就由各位读者自己探索吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://liutos.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="语绘" scheme="https://liutos.github.io/tags/%E8%AF%AD%E7%BB%98/"/>
    
      <category term="绘图" scheme="https://liutos.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="latex" scheme="https://liutos.github.io/tags/latex/"/>
    
      <category term="tikz" scheme="https://liutos.github.io/tags/tikz/"/>
    
  </entry>
  
  <entry>
    <title>Emacs的avy插件</title>
    <link href="https://liutos.github.io/2020/10/11/Emacs%E7%9A%84avy%E6%8F%92%E4%BB%B6/"/>
    <id>https://liutos.github.io/2020/10/11/Emacs的avy插件/</id>
    <published>2020-10-11T02:07:27.000Z</published>
    <updated>2020-10-11T02:56:12.431Z</updated>
    
    <content type="html"><![CDATA[<p>用Emacs的时候，我习惯将它分成“四个部分”</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201011/Emacs分成四部分.jpg" alt=""></p><p>怎么弄的呢？一般是先按<code>C-x 3</code>分出左右两个window，再到各个window中用<code>C-x 2</code>分出上下两个window——这不是我的笔误，在Emacs的术语中，用来显示一个buffer的区域就叫做一个<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html" target="_blank" rel="noopener">window</a>。而常常被人们冠名为window的、最外层的窗体，则叫做<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html#Frames" target="_blank" rel="noopener">frame</a>。</p><p>这样划分后，多次按下<code>C-Tab</code>（我把这个快捷键绑定到了命令<code>other-window</code>上），便可以按照左上、左下、右上、右下的顺序轮换当前聚焦的window了。</p><p>如果需要从其它window中复制内容到当前window中粘贴，操作会麻烦一点。以右上角需要左下角的内容为例：</p><ol><li>按三次<code>C-Tab</code>换到左下角的window中——用快捷键是因为我不想去挪鼠标；</li><li>按<code>k</code>或<code>j</code>上下移动光标到目标行——用<code>k</code>和<code>j</code>是因为用了<code>evil-mode</code>插件（参见<a href="https://liutos.github.io/2020/09/28/%E6%89%8B%E6%8C%87%E7%96%BC%EF%BC%8C%E5%86%99%E7%82%B9%E4%BB%A3%E7%A0%81%E7%BC%93%E8%A7%A3%E4%B8%80%E4%B8%8B/">这篇文章</a>）；</li><li>复制内容，再按一次<code>C-Tab</code>回到原来的window中粘贴。</li></ol><p>听起来可麻烦了。</p><p>好在Emacs有一个非常好用的插件，可以把第1和第2个步骤合在一起完成。</p><h1 id="avy"><a href="#avy" class="headerlink" title="avy"></a>avy</h1><p>这个非常好用的插件就是<a href="https://github.com/abo-abo/avy" target="_blank" rel="noopener">avy</a>，它提供的<code>avy-goto-line</code>函数可以一步到位地完成上面的第1和第2个步骤。</p><p>用Emacs的包管理器就可以安装它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M-x package-install RET avy RET</span><br></pre></td></tr></table></figure><p>接着要为命令<code>avy-goto-line</code>绑定一个喜欢的快捷键</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">global-set-key</span> (<span class="name">kbd</span> <span class="string">"M-g f"</span>) 'avy-goto-line)</span><br></pre></td></tr></table></figure><p>至此便可以在Emacs中愉快地使用<code>M-g f</code>来快速跳转到当前或其它window中的行了。百闻不如一见，我来演示一番。</p><h1 id="avy-goto-line"><a href="#avy-goto-line" class="headerlink" title="avy-goto-line"></a>avy-goto-line</h1><p><del>众所周知，</del>我用org-mode来跟踪自己的学习计划，还会将摸索过程中的一些半成品代码保存到org-mode的条目中。例如，我想要将左下角的window中的三个函数的定义，复制到右上角的代码块中去</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201011/移动前的景象.jpg" alt=""></p><p>于是我先按下<code>M-g f</code>，让<code>avy</code>为每一行赋予一个标记</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201011/按下快捷键之后的景象.jpg" alt=""></p><p>因为希望切换到左下角的window的第一行，所以我先按下<code>j</code></p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201011/按下字母j之后的景象.jpg" alt=""></p><p>此时，在前一幅截图中不以字母<code>j</code>开始的标记统统消失了，而以字母<code>j</code>开始的标记则只留下了从第二个字符开始的部分。</p><p>再按下字母<code>l</code>，就可以将焦点切换到左下角的window，并且将光标移动到第一行的行首了。然后只需要选中内容、复制，并返回原来的window中粘贴即可。完整的过程如下</p><p><img src="/images/loading.png" data-original="https://raw.githubusercontent.com/Liutos/riverbed/master/pictures/20201011/使用avy-goto-line的全过程.gif" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果在按下组合键<code>M-g f</code>后，接着按下的是数字键的话，<code>avy-goto-line</code>会认为使用者打算跳转到指定的行。它将在Emacs的minibuffer中继续等待输入更多的数字或按下回车。不过我不怎么用这个功能，因为我没有让Emacs显示行号，按行号来跳转对我并不方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="editor" scheme="https://liutos.github.io/tags/editor/"/>
    
      <category term="编辑器" scheme="https://liutos.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="elisp" scheme="https://liutos.github.io/tags/elisp/"/>
    
      <category term="emacs" scheme="https://liutos.github.io/tags/emacs/"/>
    
      <category term="效率" scheme="https://liutos.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
</feed>
